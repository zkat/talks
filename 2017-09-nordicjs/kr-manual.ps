%!PS-Adobe-2.0
%%Title: kr/kr-manual.mss
%%DocumentFonts: (atend)
%%Creator: Andrew Mickish and Scribe 7(1700)
%%CreationDate: 12 December 1994 15:25
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
11 SS 
1 1 0 8280 7200 GB 
%%BeginDocument: single-sided.ps
%!PS-Adobe-2.0
%
%  This PostScript code turns off double-sided printing,
%  which is desirable since we want to be able to move the
%  Tables of Contents by hand after the manuals are printed.
%
statusdict begin
   false setduplexmode
end

%%EndDocument
 GE 16 /Times-Bold AF
14592 18976 MT
(KR: Constraint-Based Knowledge Representation)SH
11 SS 
28853 21368 MT
(Dario Giuse)SH
/Times-Roman SF
28183 23294 MT
(December 1994)SH
/Times-Bold SF
29634 41334 MT
(Abstract)SH
/Times-Roman SF
8280 43086 MT
(KR is a very efficient knowledge representation language implemented in Common Lisp.  It)
155 W( provides)154 W
8280 44382 MT
(powerful frame-based knowledge representation with user-defined)
297 W( inheritance and relations, and an)298 W
8280 45678 MT
(integrated object-oriented programming system.  In addition,)
514 W( the system supports a constraint)513 W
8280 46974 MT
(maintenance mechanism which allows any value)
9 W( to be computed from a combination of other values.  KR)10 W
8280 48270 MT
(is simple and compact and)
42 W( does not include some of the more complex functionality often found in other)41 W
8280 49566 MT
(knowledge representation systems.  Because of its simplicity, however, it is highly)
76 W( optimized and offers)77 W
8280 50862 MT
(good performance.  These qualities make it suitable for many applications that require a mixture of)
48 W( good)47 W
8280 52158 MT
(performance and flexible knowledge representation.)SH
21010 56436 MT
(Copyright)SH
/Symbol SF
25747 XM
(\323)SH
/Times-Roman SF
26891 XM
(1994 - Carnegie Mellon University)SH
8280 63219 MT
(This research was sponsored by NCCOSC under Contract No.  N66001-94-C-6037, Arpa Order)
207 W( No.)208 W
8280 64515 MT
(B326. The)
381 W( views and conclusions contained in this document)
53 W( are those of the authors and should not be)52 W
8280 65811 MT
(interpreted as representing the official policies, either expressed or implied, of NCCOSC or)
192 W( the U.S.)193 W
8280 67107 MT
(Government.)SH
ES
%%Page: 103 2
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Chapter 1)
SH( Introduction)1550 W
51386 XM
(Page 103)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(1. Introduction)SH
11 /Times-Roman AF
8280 10524 MT
(This document is the reference manual for the KR system.)
218 W( KR)
710 W( implements objects, also known as)217 W
/Times-Italic SF
8280 11720 MT
(schemata)SH
/Times-Roman SF
(, which can contain any amount of information and which can be connected in arbitrary)
88 W( ways.)89 W
8280 12916 MT
(All Garnet objects are implemented as KR schemata.  KR)
48 W( [Giuse)
SH( 87] can also be used as a very efficient)48 W
8280 14112 MT
(frame-based representation system.  Simplicity and efficiency are)
2 W( its main design goals and differentiate it)3 W
8280 15308 MT
(sharply from more conventional frame systems, as discussed in [Giuse 90].)SH
8280 17606 MT
(In addition to the basic representation of knowledge as a network of schemata, KR provides object-)204 W
8280 18802 MT
(oriented programming and)
277 W( an integrated constraint maintenance system.  Constraint maintenance is)278 W
8280 19998 MT
(implemented through)200 W
/Times-Italic SF
18396 XM
(formulas)SH
/Times-Roman SF
(, which constrain certain values to combinations)
200 W( of other values.  The)199 W
8280 21194 MT
(constraint system is closely integrated with the basic object)
198 W( system and is part of the same program)199 W
8280 22390 MT
(interface.)SH
8280 24688 MT
(Close integration between objects and constraint maintenance yields)
191 W( several advantages.  First of all,)190 W
8280 25884 MT
(constraint maintenance is seen as)
74 W( a natural extension of object representation; the same access functions)75 W
8280 27080 MT
(work on regular values and on values constrained by a formula.)
326 W( Second,)
925 W( the full power of the)325 W
8280 28276 MT
(representation language is available in the specification of constraints.  Third,)
61 W( since the two mechanisms)62 W
8280 29472 MT
(are integrated at a fairly low level,)
189 W( the constraint maintenance system offers very good performance.)188 W
8280 30668 MT
(These advantages make the KR constraint maintenance system a)
144 W( practical tool for the development of)145 W
8280 31864 MT
(applications that require flexibility, expressive)
52 W( power, and performance comparable to that obtained with)51 W
8280 33060 MT
(conventional data structures.)SH
8280 35358 MT
(In addition to being)
54 W( one of the building blocks of the Garnet project, KR can be used as a self-contained)55 W
8280 36554 MT
(knowledge representation system.)
102 W( Besides)
477 W( Garnet, KR is used in the Chinese Tutor)
101 W( [Giuse)
SH( 88a])
101 W( [Giuse)SH
8280 37750 MT
(88b], an intelligent tutoring system designed to teach Chinese to English)
305 W( speakers, and in speech)306 W
8280 38946 MT
(understanding research [Young 89] currently underway at Carnegie Mellon.)SH
8280 41244 MT
(This document describes version 2.3.1 of KR, which is part of release 2.2 of the Garnet)
53 W( system.  Several)52 W
8280 42440 MT
(aspects of this version differ from previous versions of the system, such as)
25 W( the ones described in previous)26 W
8280 43636 MT
(reports [Giuse 89] [Giuse 87].  The present document overrides all previous descriptions.)SH
8280 45934 MT
(The orientation of this manual is for users of KR as an object system.  Users)
63 W( who are more interested in)62 W
8280 47130 MT
(using KR as a knowledge representation system should consult a previous)
18 W( paper)
19 W( [Giuse)
SH( 90].  This manual)19 W
8280 48326 MT
(begins with a description of the features of the system that beginners are most)
8 W( likely to need.  Some of the)7 W
8280 49522 MT
(less common features are only presented near the)
104 W( end of the document, in order to avoid obscuring the)105 W
8280 50718 MT
(description with irrelevant details.  Sections 6 and 7 contain the detailed)
208 W( description of the program)207 W
8280 51914 MT
(interface of KR.  This is a complete description of the system and its features.)
10 W( Most)
297 W( application programs)11 W
8280 53110 MT
(will only need a small number of features, described in section 6.)SH
ES
%%Page: 104 3
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 104)
SH( KR)830 W
37788 XM
(Structure of the System)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(2. Structure of the System)SH
11 /Times-Roman AF
6120 10524 MT
(KR is an object system implemented in Common Lisp)
124 W( [Steele)
SH( 84].  It includes three closely)
124 W( integrated)123 W
6120 11720 MT
(components:)SH
/Times-Italic SF
12017 XM
(object-oriented programming)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
25612 XM
(constraint maintenance)SH
/Times-Roman SF
(, and)SH
/Times-Italic SF
38382 XM
(knowledge representation)SH
/Times-Roman SF
(.)SH
6120 14018 MT
(The first component of KR is an object oriented programming system)
135 W( based on the prototype-instance)136 W
6120 15214 MT
(paradigm. Schemata)
303 W( can be used as objects, and inheritance can be used to determine their properties and)13 W
6120 16410 MT
(behavior. Objects)
589 W( can be)
157 W( sent)158 W
/Times-Italic SF
20533 XM
(messages)SH
/Times-Roman SF
(, which are implemented as procedural attachments to certain)158 W
6120 17606 MT
(slots; messages are inherited through the same mechanism as values.)SH
6120 19904 MT
(Instead of the class-instance paradigm,)
453 W( common in object-oriented programming languages, KR)452 W
6120 21100 MT
(implements the more flexible prototype-instance paradigm)
159 W( [Lieberman)
SH( 86], which allows)
159 W( properties of)160 W
6120 22296 MT
(instances to be determined dynamically by their prototypes.)
182 W( This)
637 W( means that the class structure of a)181 W
6120 23492 MT
(system can be modified dynamically as needed, without any need for recompilation.)SH
6120 25790 MT
(The second component)
499 W( of KR implements constraint maintenance.  Constraint maintenance is)500 W
6120 26986 MT
(implemented through)94 W
/Times-Italic SF
16024 XM
(formulas)SH
/Times-Roman SF
(, which may be attached to slots and)
94 W( determine their values based on the)93 W
6120 28182 MT
(values of other slots in the system.)SH
6120 30480 MT
(Constraint maintenance is closely)
40 W( integrated with the other components.  The user, for example, does not)41 W
6120 31676 MT
(need to know which)
197 W( slots in a schema contain ordinary values and which ones are constrained by a)196 W
6120 32872 MT
(formula, since the same access primitives may be used in both cases.)SH
6120 35170 MT
(The third component, frame-based knowledge representation, stores knowledge as)
12 W( a network of chunks of)13 W
6120 36366 MT
(information. Networks)
301 W( in KR are built out of unstructured chunks, i.e.,)13 W
/Times-Italic SF
37895 XM
(schemata)SH
/Times-Roman SF
(. Each)
300 W( schema can store)12 W
6120 37562 MT
(arbitrary pieces of information, and is not restricted to a particular format or data structure.)
2 W( Information)
281 W( is)3 W
6120 38758 MT
(encoded via attribute-value pairs.)SH
6120 41056 MT
(Values in a schema can be interpreted as links to other schemata.)
138 W( This)
549 W( enables the system to support)137 W
6120 42252 MT
(complex network structures, which can be freely)
122 W( extended and modified by application programs.  KR)123 W
6120 43448 MT
(provides simple ways to specify the structure of a network and the relationship among its components.)SH
ES
%%Page: 105 4
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.1)
SH( Main)
1800 W( Concepts: Schema, Slot, Value)SH
51386 XM
(Page 105)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(3. Basic Concepts)SH
11 /Times-Roman AF
8280 10524 MT
(This section describes the basic elements)
75 W( of KR, i.e., objects.  More details about the design philosophy)74 W
8280 11720 MT
(of the system)
129 W( and some of the internal implementation may be found in)
130 W( [Giuse)
SH( 87], which describes a)130 W
8280 12916 MT
(previous version of the system that did not support constraint maintenance.)SH
14 /Times-Bold AF
8280 16734 MT
(3.1. Main Concepts: Schema, Slot, Value)SH
11 /Times-Roman AF
8280 18944 MT
(An object in KR is known as a)76 W
/Times-Italic SF
22636 XM
(schema)SH
/Times-Roman SF
(. A)
427 W( schema is the basic unit)
76 W( of representation and consists of an)75 W
8280 20140 MT
(optional)SH
/Times-Italic SF
12223 XM
(name)SH
/Times-Roman SF
(, a set of)63 W
/Times-Italic SF
18858 XM
(slots)SH
/Times-Roman SF
(, and a)63 W
/Times-Italic SF
24241 XM
(value)SH
/Times-Roman SF
26961 XM
(for each slot.  The user can assemble networks of schemata by)63 W
8280 21336 MT
(placing a schema as the value in a slot of another schema; this causes the two schemata to become linked.)SH
8280 23634 MT
(A schema may be named or unnamed.  Named schemata are readily accessible and are most useful)
105 W( for)104 W
8280 24830 MT
(interactive situations or as the top levels)
3 W( of a hierarchy, since their names act as global handles.  Unnamed)4 W
8280 26026 MT
(schemata do not have meaningful external names.  They are, however, more)
278 W( compact than named)277 W
8280 27222 MT
(schemata and account for the vast majority of)
4 W( schemata created by most applications.  Unnamed schemata)5 W
8280 28418 MT
(are automatically garbage-collected when no longer needed, whereas named schemata)
340 W( have to be)339 W
8280 29614 MT
(destroyed explicitly by the user.)SH
8280 31912 MT
(The name of a)
27 W( named schema is a symbol.  When a named schema is created, KR automatically creates a)28 W
8280 33108 MT
(special variable)
15 W( by the same name  and assigns the schema itself as the value of the special variable.  This)14 W
8280 34304 MT
(makes named schemata convenient to use.)SH
8280 36602 MT
(A schema may have any number of)10 W
/Times-Italic SF
24201 XM
(slots)SH
/Times-Roman SF
(, which are simply  attribute-value)
10 W( pairs.  The slot name indicates)11 W
8280 37798 MT
(the attribute name; the slot value \050if there is one\051 indicates its value.  Slot names)
43 W( are)
360 W( keywords, and thus)42 W
8280 38994 MT
(always begin with a colon.  All slots in a schema must have distinct names, but different schemata may)78 W
8280 40190 MT
(very well have slots with the same name.)SH
8280 42488 MT
(Each slot may contain only one value.  A value is the actual data item stored in the schema, and may)
3 W( be of)2 W
8280 43684 MT
(any Lisp type.  KR provides functions to add, delete, and retrieve the value from a given slot in a schema.)SH
8280 45982 MT
(The printed representation of)
97 W( a schema shows the schema name followed by slot/value pairs, each on a)98 W
8280 47178 MT
(separate line.  The whole schema is surrounded by curly braces.  For example,)SH
8 /Courier AF
10200 48343 MT
({#k<fido>)SH
11160 49208 MT
(:owner =  #k<john>)SH
11160 50073 MT
(:color =  #k<brown>)SH
11160 50938 MT
(:age =  5)SH
10200 51803 MT
(})SH
11 /Times-Roman AF
8280 54101 MT
(The schema is named FIDO and)
46 W( contains three slots named)45 W
10 /Courier AF
35127 XM
(:owner)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
39322 XM
(:color)SH
11 /Times-Roman AF
(, and)45 W
10 /Courier AF
45425 XM
(:age)SH
11 /Times-Roman AF
(. The)
365 W( slot)45 W
10 /Courier AF
52680 XM
(:age)SH
11 /Times-Roman AF
8280 55297 MT
(contains one value, the integer 5.)SH
8280 57595 MT
(The default printed name of a schema is of the)
106 W( form)107 W
9 SS 
32569 XM
(#K<NAME>)SH
11 SS 
(, where)107 W
/Times-Italic SF
41060 XM
(name)SH
/Times-Roman SF
43824 XM
(is the actual name of the)107 W
8280 58791 MT
(schema. This)
501 W( representation makes it very easy to distinguish KR schemata)
113 W( from other objects.  Note,)112 W
8280 59987 MT
(however, that this convention is only used when printing,)
152 W( and is not used when typing the name of a)153 W
8280 61183 MT
(schema.)SH
8280 63481 MT
(In order to illustrate the main features of the system, we will repeatedly use)
41 W( a few schemata.  We present)40 W
8280 64677 MT
(the definition of those schemata at this point and will later refer to them as needed.  These)
SH( schemata might)1 W
8280 65873 MT
(be part of some graphical package, and are used here)
3 W( purely for explanation purposes.  In practice, there is)2 W
8280 67069 MT
(no need to define such schemata)
122 W( in a Garnet application, since the Opal component of Garnet \050see the)123 W
8280 68265 MT
(Opal manual\051 already provides a complete graphical object system.)SH
8280 70563 MT
(The following KR code is the complete definition of the example schemata:)SH
ES
%%Page: 106 5
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 106)
SH( KR)830 W
41010 XM
(Basic Concepts)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050create-instance 'MY-GRAPHICAL-OBJECT NIL)SH
9000 8564 MT
(\050:color :blue\051\051)SH
8040 10294 MT
(\050create-instance 'BOX-OBJECT MY-GRAPHICAL-OBJECT)SH
9000 11159 MT
(\050:thickness 1\051\051)SH
8040 12889 MT
(\050create-instance 'RECTANGLE-1 BOX-OBJECT)SH
9000 13754 MT
(\050:x 10\051)SH
9000 14619 MT
(\050:y 20\051\051)SH
8040 16349 MT
(\050create-instance 'RECTANGLE-2 BOX-OBJECT)SH
9000 17214 MT
(\050:x 34\051)SH
9000 18079 MT
(\050:y \050o-formula \050+ \050gvl :left-obj :y\051 15\051\051\051)SH
9000 18944 MT
(\050:left-obj RECTANGLE-1\051\051)SH
11 /Times-Roman AF
6120 21242 MT
(The exact)
65 W( meaning of the expressions above will become clear after we describe the functional interface)64 W
6120 22438 MT
(of the system.)
474 W( Briefly,)
1225 W( however, the example can be summarized as follows.  The schema)475 W
9 SS 
6120 23634 MT
(MY-GRAPHICAL-OBJECT)SH
11 SS 
17160 XM
(is at the top of a hierarchy of graphical objects.  The schema)265 W
9 SS 
47420 XM
(BOX-OBJECT)SH
11 SS 
6120 24830 MT
(represents an intermediate level)
238 W( in the hierarchy, and describes the general features of all graphical)239 W
6120 26026 MT
(objects which are rectangular boxes.)340 W
9 SS 
24743 XM
(BOX-OBJECT)SH
11 SS 
30858 XM
(is placed below)339 W
9 SS 
38992 XM
(MY-GRAPHICAL-OBJECT)SH
11 SS 
50106 XM
(in the)339 W
6120 27222 MT
(hierarchy, and its)10 W
10 /Courier AF
14030 XM
(:is-a)SH
11 /Times-Roman AF
17315 XM
(slot points to the schema)10 W
9 SS 
28518 XM
(MY-GRAPHICAL-OBJECT)SH
11 SS 
(. This)
295 W( is done automatically)
10 W( by)11 W
6120 28418 MT
(the macro create-instance.)SH
6120 30716 MT
(Finally, two rectangles \050)122 W
9 SS 
(RECTANGLE-1)SH
11 SS 
23675 XM
(and)SH
9 SS 
25660 XM
(RECTANGLE-2)SH
11 SS 
(\051 are created and placed)
122 W( below)121 W
9 SS 
46168 XM
(BOX-OBJECT)SH
11 SS 
52064 XM
(in)SH
6120 31912 MT
(the hierarchy.)421 W
9 SS 
13979 XM
(RECTANGLE-1)SH
11 SS 
20775 XM
(defines the values of the two)
421 W( slots)422 W
10 /Courier AF
38907 XM
(:x)SH
11 /Times-Roman AF
40804 XM
(and)SH
10 /Courier AF
43089 XM
(:y)SH
11 /Times-Roman AF
44986 XM
(directly, whereas)422 W
9 SS 
6120 33108 MT
(RECTANGLE-2)SH
11 SS 
12552 XM
(uses a formula)
57 W( for its)56 W
10 /Courier AF
22395 XM
(:y)SH
11 /Times-Roman AF
23926 XM
(slot. The)
387 W( formula states that the value of)56 W
10 /Courier AF
42698 XM
(:y)SH
11 /Times-Roman AF
44229 XM
(is constrained to be)56 W
6120 34304 MT
(the)SH
10 /Courier AF
7798 XM
(:y)SH
11 /Times-Roman AF
9332 XM
(value of another schema plus 15.)
59 W( The)
395 W( other schema can be located by following the)60 W
10 /Courier AF
47520 XM
(:left-obj)SH
11 /Times-Roman AF
6120 35500 MT
(slot of)SH
9 SS 
9176 XM
(RECTANGLE-2)SH
11 SS 
(, as specified in the formula, and initially corresponds to)SH
9 SS 
40326 XM
(RECTANGLE-1)SH
11 SS 
(.)SH
6120 37798 MT
(Figure 3-1)
254 W( shows the four schemata after the definitions above have been executed.  Relations are)253 W
6120 38994 MT
(indicated by an arrow going from a schema to the ones to which it is related.)SH
46800 50 6120 41145 UL
75 100 0 6570 80192 GB 
%%BeginDocument: kr/schemata.ps
%!PS-Adobe-2.0
%%Title: SCHEMATA FIGURE
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: May 1, 1992, 7:21 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 282 540 510
%%%Pages: 1
%%EndComments


/ArcDict 22 dict def
ArcDict /mtrx matrix put
/DrawArc
   {
        ArcDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        newpath
          x y translate
          xrad yrad scale
          % Fill the arc
          newpath
            0 0 moveto  0 0 1 startangle endangle arc  closepath
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          % Draw the border
          newpath
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-halftone line-red line-green line-blue line-color-p
            line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.6419753 0.6419753 scale

%
% Begin new window
%
0 -327 translate
gsave
0 1009 729 355 ClipToRectangle
0 0 translate
gsave
460.0 714.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
122.0 714.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
15 721 710 76 14 0 false 0 0 0 false 0 0 0 false (RECTANGLE-1) 12 /Courier DrawText
497 743 732 109 14 0 false 0 0 0 false 0 0 0 false (:is-a BOX-OBJECT) 12 /Courier DrawText
497 729 718 31 14 0 false 0 0 0 false 0 0 0 false (:x 34) 12 /Courier DrawText
497 715 704 190 14 0 false 0 0 0 false 0 0 0 false (:y \050+ \050gvl :left-obj :y\051 15\051) 12 /Courier DrawText
497 701 690 143 14 0 false 0 0 0 false 0 0 0 false (:left-obj RECTANGLE-1) 12 /Courier DrawText
160 736 725 109 14 0 false 0 0 0 false 0 0 0 false (:is-a BOX-OBJECT) 12 /Courier DrawText
160 722 711 31 14 0 false 0 0 0 false 0 0 0 false (:x 10) 12 /Courier DrawText
160 708 697 31 14 0 false 0 0 0 false 0 0 0 false (:y 20) 12 /Courier DrawText
350 722 711 76 14 0 false 0 0 0 false 0 0 0 false (RECTANGLE-2) 12 /Courier DrawText
299.0 962.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
332 983 972 80 14 0 false 0 0 0 false 0 0 0 false (:color :blue) 12 /Courier DrawText
332 969 958 270 14 0 false 0 0 0 false 0 0 0 false (:update-demon 'Graphical-Object-Changed) 12 /Courier DrawText
332 955 944 137 14 0 false 0 0 0 false 0 0 0 false (:is-a-inv BOX-OBJECT) 12 /Courier DrawText
131 969 958 133 14 0 false 0 0 0 false 0 0 0 false (MY-GRAPHICAL-OBJECT) 12 /Courier DrawText
299.0 834.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
333 855 844 151 14 0 false 0 0 0 false 0 0 0 false (:is-a GRAPHICAL-OBJECT) 12 /Courier DrawText
333 841 830 80 14 0 false 0 0 0 false 0 0 0 false (:thickness 1) 12 /Courier DrawText
333 827 816 227 14 0 false 0 0 0 false 0 0 0 false (:is-a-inv RECTANGLE-1 RECTANGLE-2) 12 /Courier DrawText
193 841 830 70 14 0 false 0 0 0 false 0 0 0 false (BOX-OBJECT) 12 /Courier DrawText
0 0 0 0 true 0 0 [] 1 259 808 142 745 DrawLine
257 812 268 813 261 804 257 812 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 334 803 436 743 DrawLine
331 799 325 808 337 807 331 799 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 299 921 299 870 DrawLine
294 921 299 931 304 921 294 921 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 331 871 423 941 DrawLine
334 867 323 865 328 875 334 867 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
360.0 684.0 225.0 25.0 180 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawArc
0 0 0 0 true 0 0 [] 1 138 680 139 679 DrawLine
134 676 131 687 142 684 134 676 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 214 751 429 813 DrawLine
215 746 204 748 213 756 215 746 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 476 756 507 813 DrawLine
480 754 471 747 472 758 480 754 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
grestore

grestore

0 1009 729 355 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 72 282 540 510

%%EndDocument
 GE /Times-Bold SF
6120 60794 MT
(Figure 3-1:)SH
/Times-Roman SF
11893 XM
(The resulting network of schemata)SH
46800 50 6120 62746 UL
6120 64844 MT
(Asking the system to print out the current status of schema)104 W
9 SS 
33386 XM
(RECTANGLE-2)SH
11 SS 
39866 XM
(would produce the following)105 W
6120 66040 MT
(output:)SH
8 /Courier AF
8040 67205 MT
({#k<RECTANGLE-2>)SH
9000 68070 MT
(:IS-A =  #k<BOX-OBJECT>)SH
9000 68935 MT
(:LEFT-OBJ =  #k<RECTANGLE-1>)SH
9000 69800 MT
(:Y =  #k<F2289>\050NIL . NIL\051)SH
9000 70665 MT
(:X =  34)SH
8040 71530 MT
(})SH
ES
%%Page: 107 6
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.2)
SH( Inheritance)1800 W
51386 XM
(Page 107)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(Note that slot)122 W
10 /Courier AF
14849 XM
(:y)SH
11 /Times-Roman AF
16446 XM
(contains a formula, which is printed)
122 W( as "#k<F2289>\050NIL . NIL\051".  This is simply an)121 W
8280 9151 MT
(internal representation for the formula and will yield the correct value of)SH
10 /Courier AF
40472 XM
(:y)SH
11 /Times-Roman AF
41947 XM
(when needed.)SH
14 /Times-Bold AF
8280 12969 MT
(3.2. Inheritance)SH
11 /Times-Roman AF
8280 15179 MT
(The primary function of values is)
8 W( to provide information about the object represented by a schema.  In the)9 W
8280 16375 MT
(previous example, for)
58 W( instance, asking the system for the)57 W
10 /Courier AF
34118 XM
(:x)SH
11 /Times-Roman AF
35650 XM
(value of)57 W
9 SS 
39612 XM
(RECTANGLE-1)SH
11 SS 
46044 XM
(would simply return)57 W
8280 17571 MT
(the value)SH
10 /Courier AF
12556 XM
(10)SH
11 /Times-Roman AF
(.)SH
8280 19869 MT
(Values can also perform another)
112 W( function, however: They can establish)113 W
/Times-Italic SF
41017 XM
(connections between schemata)113 W
/Times-Roman SF
(.)SH
8280 21065 MT
(Consider the)13 W
10 /Courier AF
14172 XM
(:left-obj)SH
11 /Times-Roman AF
19860 XM
(slot in the example above: if we interpret)13 W
9 SS 
38292 XM
(RECTANGLE-1)SH
11 SS 
44679 XM
(as a schema name, then)12 W
8280 22261 MT
(the slot)
356 W( tells us that the schema)357 W
9 SS 
24741 XM
(RECTANGLE-2)SH
11 SS 
31473 XM
(is somehow related to the schema)357 W
9 SS 
48705 XM
(RECTANGLE-1)SH
11 SS 
(.)SH
8280 23457 MT
(Graphically, this will mean that the position of)374 W
9 SS 
32078 XM
(RECTANGLE-2)SH
11 SS 
38826 XM
(is partially determined by that of)373 W
9 SS 
8280 24653 MT
(RECTANGLE-1)SH
11 SS 
(.)SH
8280 26951 MT
(KR also makes it possible to use values to)
134 W( perform)135 W
/Times-Italic SF
32230 XM
(inheritance)SH
/Times-Roman SF
(, i.e., to control the way information is)135 W
8280 28147 MT
(inherited by a particular schema from other schemata to which it is connected.  Inheritance)
249 W( allows)248 W
8280 29343 MT
(information to be arranged in a)
111 W( hierarchical fashion, with lower-level schemata inheriting most of their)112 W
8280 30539 MT
(general features from higher-level nodes and possibly)
123 W( providing local refinements or modifications.  A)122 W
8280 31735 MT
(connection that enables inheritance of values is called an)226 W
/Times-Italic SF
35573 XM
(inheritance relation)226 W
/Times-Roman SF
(. Inheritance)
727 W( relations)226 W
8280 32931 MT
(always contain a list of values; in many cases, this is a list of only one value.)SH
8280 35229 MT
(The most common example of inheritance is provided by the)2 W
10 /Courier AF
35365 XM
(:is-a)SH
11 /Times-Roman AF
38641 XM
(relation. If)
277 W( schema A is connected to)1 W
9 SS 
22766 36087 MT
(1)SH
11 SS 
8280 36450 MT
(schema B by the)SH
10 /Courier AF
15856 XM
(:is-a)SH
11 /Times-Roman AF
19131 XM
(relation,)SH
23491 XM
(then values that are not present in A may be inherited from B.)SH
8280 38748 MT
(Consider the schema)384 W
9 SS 
18871 XM
(RECTANGLE-1)SH
11 SS 
25630 XM
(in our example.  If we were to ask "What is)
384 W( the color of)385 W
9 SS 
8280 39944 MT
(RECTANGLE-1)SH
11 SS 
(?", we would not be able to find the answer by just)
56 W( looking at the schema itself.  But since)55 W
8280 41140 MT
(we stated that)58 W
9 SS 
14777 XM
(RECTANGLE-1)SH
11 SS 
21210 XM
(is a box object, which is itself)
58 W( a graphical object, the value can be inherited)59 W
8280 42336 MT
(from the schema)243 W
9 SS 
16614 XM
(MY-GRAPHICAL-OBJECT)SH
11 SS 
27632 XM
(through two levels of)243 W
10 /Courier AF
38257 XM
(:is-a)SH
11 /Times-Roman AF
(. The)
759 W( answer would thus be)242 W
8280 43532 MT
(")SH
9 SS 
(RECTANGLE-1)SH
11 SS 
15159 XM
(is blue."  Inheritance is possible in this case because the slot)55 W
10 /Courier AF
42510 XM
(:is-a)SH
11 /Times-Roman AF
45841 XM
(is pre-defined by the)56 W
8280 44728 MT
(system as a relation.)SH
10800 50 8280 70172 UL
7 SS 
9180 71673 MT
(1)SH
9 SS 
9530 72000 MT
(In other words, if schema B appears as a value in the)SH
10 /Courier AF
28755 XM
(:is-a)SH
9 /Times-Roman AF
31980 XM
(slot of schema A.)SH
ES
%%Page: 108 7
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 108)
SH( KR)830 W
34956 XM
(Object-Oriented Programming)
SH( Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(4. Object-Oriented Programming)SH
11 /Times-Roman AF
6120 10524 MT
(This section describes the object-oriented programming component of KR.)
59 W( This)
727 W( component entails two)58 W
6120 11720 MT
(concepts: the)
275 W( concept of message sending, and the concept of prototype/instance.)SH
14 /Times-Bold AF
6120 15538 MT
(4.1. Objects)SH
11 /Times-Roman AF
6120 16734 MT
(The fundamental data structure in KR is the)210 W
/Times-Italic SF
27350 XM
(schema)SH
/Times-Roman SF
(, which is)
210 W( equivalently referred to as an)211 W
/Times-Italic SF
49957 XM
(object)SH
/Times-Roman SF
(.)SH
6120 17930 MT
(Objects consist of data \050represented by values in slots\051 and methods \050represented)
379 W( by procedural)378 W
6120 19126 MT
(attachments, again stored as values in slots\051.  Methods)
57 W( are similar to functions, except that a method can)58 W
6120 20322 MT
(do something)
80 W( different depending on the object that it is called on.  A procedural attachment is invoked)79 W
6120 21518 MT
(by "sending a message" to an object; this means that a method by)
133 W( the appropriate name is sought and)134 W
6120 22714 MT
(executed. Different)
459 W( objects often provide different methods by the same name, and thus respond to the)92 W
6120 23910 MT
(same message by performing different actions.)SH
6120 26208 MT
(The data)
62 W( and methods associated with an object can be either stored within the object or inherited.  This)63 W
6120 27404 MT
(allows the behavior of objects to be built up from that of other objects.  The object-oriented component)
12 W( of)11 W
6120 28600 MT
(KR allows some combination of methods, since a method is allowed to)
32 W( invoke the corresponding method)33 W
6120 29796 MT
(from an ancestor schema and to explicitly)
141 W( refer to the object which is handling the message.  Method)140 W
6120 30992 MT
(combination, however, is not as developed as)
81 W( in full-fledged object-oriented programming systems such)82 W
6120 32188 MT
(as CLOS [Bobrow et al. 89].)SH
14 /Times-Bold AF
6120 36006 MT
(4.2. Prototypes vs. Classes)SH
11 /Times-Roman AF
6120 37202 MT
(The notion of)117 W
/Times-Italic SF
13126 XM
(prototype)SH
/Times-Roman SF
18126 XM
(in KR is superficially)
117 W( similar to that of)116 W
/Times-Italic SF
36351 XM
(class)SH
/Times-Roman SF
38942 XM
(in conventional object-oriented)116 W
6120 38398 MT
(programming languages,)
32 W( since a prototype object can be used to partially determine the behavior of other)33 W
6120 39594 MT
(objects \050its)105 W
/Times-Italic SF
11402 XM
(instances)SH
/Times-Roman SF
(\051. A)
485 W( prototype, however,)
105 W( plays a less restricting role than a class.  Unlike classes,)104 W
6120 40790 MT
(prototypes simply provide a place from which the values of certain slots may be inherited.  The number)72 W
6120 41986 MT
(and types of slots which actually)
36 W( appear in an instance is not in any way restricted by the prototype.  The)35 W
6120 43182 MT
(same is true for methods, which are simply represented as values in a slot.)SH
6120 45480 MT
(Prototypes in KR serve two specific functions: they)
128 W( provide an initialization method, and they provide)129 W
6120 46676 MT
(default constraints.  When a)
18 W( KR schema is created via the function)17 W
10 /Courier AF
35925 XM
(create-instance)SH
11 /Times-Roman AF
(, and its prototype)17 W
6120 47872 MT
(has an)134 W
10 /Courier AF
9442 XM
(:initialize)SH
11 /Times-Roman AF
16451 XM
(method, the method is invoked on the instance)
134 W( itself.  This results in a uniform)135 W
6120 49068 MT
(mechanism for handling object-dependent initialization tasks.)SH
14 /Times-Bold AF
6120 52886 MT
(4.3. Inheritance of Formulas)SH
11 /Times-Roman AF
6120 54082 MT
(If a prototype provides)
9 W( a constraint for a certain slot, and the slot is not explicitly redefined in an instance,)8 W
6120 55278 MT
(the formula)
165 W( which implements the constraint is copied down and installed in the instance itself.  The)166 W
6120 56474 MT
(formula, however, is not actually copied down until)
119 W( a value is requested for that slot \050e.g., when)118 W
10 /Courier AF
50593 XM
(gv)SH
11 /Times-Roman AF
52186 XM
(is)SH
6120 57670 MT
(used\051. This)
413 W( is a convenient mechanism through which a prototype)
69 W( may partially determine the behavior)70 W
6120 58866 MT
(of its instances.  Note that this behavior can be overridden both at instance-creation time \050by)
109 W( explicitly)108 W
6120 60062 MT
(specifying values for the instance\051 and at any later point in time.)SH
ES
%%Page: 109 8
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 5.2)
SH( Formulas)1800 W
51386 XM
(Page 109)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(5. Constraint Maintenance)SH
11 /Times-Roman AF
8280 10524 MT
(This section describes the)
366 W( constraint maintenance component of KR.  The purpose of constraint)367 W
8280 11720 MT
(maintenance is to ensure that changes to)
48 W( a schema are automatically propagated to other schemata which)47 W
8280 12916 MT
(depend on it.)SH
14 /Times-Bold AF
8280 16734 MT
(5.1. Value Propagation)SH
11 /Times-Roman AF
8280 18944 MT
(The KR constraint system offers two distinct mechanisms to cause changes)
225 W( in a part of network to)226 W
8280 20140 MT
(propagate to other parts of the network.  The first mechanism,)253 W
/Times-Italic SF
38583 XM
(value propagation)252 W
/Times-Roman SF
(, ensures that the)252 W
8280 21336 MT
(network is kept in a consistent state after a change.  The second mechanism,)109 W
/Times-Italic SF
43588 XM
(demon invocation)109 W
/Times-Roman SF
(, allows)110 W
8280 22532 MT
(certain actions to be triggered when parts)
109 W( of a network are modified.  Demons are described in section)108 W
8280 23728 MT
(8.9.)SH
8280 26026 MT
(Value propagation is based on the notion of)76 W
/Times-Italic SF
28378 XM
(dependency)SH
/Times-Roman SF
33919 XM
(of a value on another.  Value)
76 W( dependencies are)77 W
8280 27222 MT
(embodied in formulas.  Whenever a value in a slot is)
118 W( changed, all slots whose values depend on it are)117 W
8280 28418 MT
(immediately invalidated, although not necessarily re-evaluated.  This strategy, known as)
56 W( lazy evaluation,)57 W
8280 29614 MT
(does not immediately recompute)
117 W( the values in the dependent slots, and thus it typically does less work)116 W
8280 30810 MT
(than an eager re-evaluation strategy.  The system simply guarantees that correct values are)
112 W( recomputed)113 W
8280 32006 MT
(when actually needed.)SH
14 /Times-Bold AF
8280 35824 MT
(5.2. Formulas)SH
11 /Times-Roman AF
8280 38034 MT
(Formulas represent one-directional connections between a)57 W
/Times-Italic SF
34522 XM
(dependent value)57 W
/Times-Roman SF
42088 XM
(and any number)
57 W( of)56 W
/Times-Italic SF
50866 XM
(depended)SH
8280 39230 MT
(values)SH
/Times-Roman SF
(. Formulas)
471 W( specify an expression which computes)
98 W( the dependent value based upon the depended)99 W
8280 40426 MT
(values, as well as)
22 W( a permanent dependency which causes the dependent value to be recomputed whenever)21 W
8280 41622 MT
(any of the other values change.)SH
8280 43920 MT
(Formulas can contain arbitrary Lisp expressions, which generally reference at)
329 W( least one particular)330 W
8280 45116 MT
(depended value.  The Lisp expression is used to recompute the value of the formula whenever a change)
9 W( in)8 W
8280 46312 MT
(one of the depended values makes it necessary.)SH
8280 48610 MT
(Formulas are not recomputed immediately when one of the depended values changes.  This reduces the)90 W
8280 49806 MT
(amount of unnecessary computation.  Moreover, formulas are not recomputed every time their)
114 W( value is)113 W
8280 51002 MT
(accessed. Each)
601 W( formula, instead, keeps a cache of the last value it)
163 W( computed.  Unless the formula is)164 W
8280 52198 MT
(marked invalid, and thus needs to be recomputed,)
23 W( the cached value is simply reused.  This factor causes a)22 W
8280 53394 MT
(dramatic improvement in the performance of the constraint maintenance system, since under)
171 W( ordinary)172 W
8280 54590 MT
(circumstances the rate of change is low and most changes are local in nature.)SH
8280 56888 MT
(Figure 5-1, part)32 W
/Times-Bold SF
15524 XM
(\050a\051)SH
/Times-Roman SF
(, shows an example of)
32 W( a formula installed on slot)31 W
10 /Courier AF
38963 XM
(:y)SH
11 /Times-Roman AF
40469 XM
(of schema)31 W
9 SS 
45295 XM
(POINT-2)SH
11 SS 
(. The)
337 W( formula)31 W
8280 58084 MT
(depends on two)
7 W( values, i.e., the value of slots)8 W
10 /Courier AF
28543 XM
(:y1)SH
11 /Times-Roman AF
30626 XM
(and)SH
10 /Courier AF
32497 XM
(:y2)SH
11 /Times-Roman AF
34580 XM
(in schema)8 W
9 SS 
39300 XM
(POINT-1)SH
11 SS 
(. The)
291 W( formula specifies that)8 W
8280 59280 MT
(slot)SH
10 /Courier AF
10243 XM
(:y)SH
11 /Times-Roman AF
11815 XM
(is constrained to be the sum of the two values divided by 2, i.e., the average of the two values.)97 W
8280 60476 MT
(Figure 5-1, part)66 W
/Times-Bold SF
15626 XM
(\050b\051)SH
/Times-Roman SF
(, shows the internal)
66 W( state of the formula in a steady-state situation where the formula)67 W
8280 61672 MT
(contains a valid cached value.  Under these circumstances, any)
137 W( request for the value of slot)136 W
10 /Courier AF
50719 XM
(:y)SH
11 /Times-Roman AF
52330 XM
(would)SH
8280 62868 MT
(simply return the cached value, without recomputing the formula.)SH
8280 65166 MT
(Parts)SH
/Times-Bold SF
10862 XM
(\050c\051)SH
/Times-Roman SF
12464 XM
(and)SH
/Times-Bold SF
14434 XM
(\050d\051)SH
/Times-Roman SF
16160 XM
(show the effects of changes to the depended values.)
107 W( Changes)
490 W( are illustrated by small)108 W
8280 66362 MT
(rectangles surrounding the modified information.  The first change is to slot)56 W
10 /Courier AF
42587 XM
(:y1)SH
11 /Times-Roman AF
44718 XM
(and causes the)
56 W( value in)55 W
8280 67558 MT
(the formula to be marked invalid.)
49 W( Note)
375 W( that the formula is not actually recomputed at this point, and the)50 W
8280 68754 MT
(cached value is left untouched.  The second change is to)
33 W( slot)32 W
10 /Courier AF
35523 XM
(:y2)SH
11 /Times-Roman AF
37630 XM
(and does not cause any action to occur,)32 W
8280 69950 MT
(since the formula is already marked invalid.)SH
ES
%%Page: 110 9
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 110)
SH( KR)830 W
37622 XM
(Constraint Maintenance)
SH( Chapter)
1550 W( 5)SH
46800 50 6120 4486 UL
46800 50 6120 8155 UL
11 SS 
75 100 0 6570 46602 GB 
%%BeginDocument: kr/formulas.ps
%!PS-Adobe-2.0
%%Title: FORMULAS FIGURE
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: Apr 28, 1992, 11:04 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 289 540 502
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.7892074 0.7892074 scale

%
% Begin new window
%
0 -276 translate
gsave
0 821 593 270 ClipToRectangle
0 0 translate
gsave
55 781 770 48 14 0 false 0 0 0 false 0 0 0 false (POINT-1) 12 /Courier DrawText
124.0 775.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
147 790 779 38 14 0 false 0 0 0 false 0 0 0 false (:y1 10) 12 /Courier DrawText
147 773 762 38 14 0 false 0 0 0 false 0 0 0 false (:y2 40) 12 /Courier DrawText
26 677 666 48 14 0 false 0 0 0 false 0 0 0 false (POINT-1) 12 /Courier DrawText
37.0 646.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
60 661 650 38 14 0 false 0 0 0 false 0 0 0 false (:y1 10) 12 /Courier DrawText
60 644 633 38 14 0 false 0 0 0 false 0 0 0 false (:y2 40) 12 /Courier DrawText
37.0 589.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
56 595 584 11 14 0 false 0 0 0 false 0 0 0 false (:y) 12 /Courier DrawText
78 605 594 61 14 0 false 0 0 0 false 0 0 0 false (CACHED 25) 12 /Courier DrawText
78 582 571 69 14 0 false 0 0 0 false 0 0 0 false (VALID  yes) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 76 582 68 588 DrawLine
0 0 0 0 false 0 0 [] 1 76 594 68 588 DrawLine
313.0 589.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
332 595 584 11 14 0 false 0 0 0 false 0 0 0 false (:y) 12 /Courier DrawText
354 605 594 61 14 0 false 0 0 0 false 0 0 0 false (CACHED 25) 12 /Courier DrawText
354 582 571 62 14 0 false 0 0 0 false 0 0 0 false (VALID  no) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 352 582 344 588 DrawLine
0 0 0 0 false 0 0 [] 1 352 594 344 588 DrawLine
451.0 646.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
474 661 650 31 14 0 false 0 0 0 false 0 0 0 false (:y1 0) 12 /Courier DrawText
474 644 633 38 14 0 false 0 0 0 false 0 0 0 false (:y2 60) 12 /Courier DrawText
26 621 610 48 14 0 false 0 0 0 false 0 0 0 false (POINT-2) 12 /Courier DrawText
451.0 589.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
470 595 584 11 14 0 false 0 0 0 false 0 0 0 false (:y) 12 /Courier DrawText
492 605 594 61 14 0 false 0 0 0 false 0 0 0 false (CACHED 30) 12 /Courier DrawText
492 582 571 69 14 0 false 0 0 0 false 0 0 0 false (VALID  yes) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 490 582 482 588 DrawLine
0 0 0 0 false 0 0 [] 1 490 594 482 588 DrawLine
535 583 34 19 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRectangle
535 608 34 19 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRectangle
175.0 589.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
194 595 584 11 14 0 false 0 0 0 false 0 0 0 false (:y) 12 /Courier DrawText
216 605 594 61 14 0 false 0 0 0 false 0 0 0 false (CACHED 25) 12 /Courier DrawText
216 582 571 62 14 0 false 0 0 0 false 0 0 0 false (VALID  no) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 214 582 206 588 DrawLine
0 0 0 0 false 0 0 [] 1 214 594 206 588 DrawLine
255 584 34 19 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRectangle
175.0 646.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
198 661 650 31 14 0 false 0 0 0 false 0 0 0 false (:y1 0) 12 /Courier DrawText
198 644 633 38 14 0 false 0 0 0 false 0 0 0 false (:y2 40) 12 /Courier DrawText
193 663 47 19 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRectangle
313.0 646.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
336 661 650 31 14 0 false 0 0 0 false 0 0 0 false (:y1 0) 12 /Courier DrawText
336 644 633 38 14 0 false 0 0 0 false 0 0 0 false (:y2 60) 12 /Courier DrawText
332 647 47 19 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRectangle
53 736 725 48 14 0 false 0 0 0 false 0 0 0 false (POINT-2) 12 /Courier DrawText
122.0 730.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
145 745 734 101 14 0 false 0 0 0 false 0 0 0 false (:parent POINT-1) 12 /Courier DrawText
145 728 717 435 14 0 false 0 0 0 false 0 0 0 false (:y \050formula '\050floor \050+ \050gvl :parent :y1\051 \050gvl :parent :y2\051\051 2\051\051) 12 /Courier DrawText
16 761 746 24 20 0 false 0 0 0 true 0 0 0 false (\050a\051) 18 /Courier-Bold DrawText
490 698 683 24 20 0 false 0 0 0 true 0 0 0 false (\050e\051) 18 /Courier-Bold DrawText
345 698 683 24 20 0 false 0 0 0 true 0 0 0 false (\050d\051) 18 /Courier-Bold DrawText
212 698 683 24 20 0 false 0 0 0 true 0 0 0 false (\050c\051) 18 /Courier-Bold DrawText
69 698 683 24 20 0 false 0 0 0 true 0 0 0 false (\050b\051) 18 /Courier-Bold DrawText
grestore

grestore

0 821 593 270 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier 
%%BoundingBox: 72 289 540 502

%%EndDocument
 GE /Times-Bold SF
6120 26679 MT
(Figure 5-1:)SH
/Times-Roman SF
11893 XM
(Successive changes in depended values)SH
46800 50 6120 28631 UL
6120 30729 MT
(Finally, part)102 W
/Times-Bold SF
11977 XM
(\050e\051)SH
/Times-Roman SF
13574 XM
(shows what happens when the value)
102 W( in slot)103 W
10 /Courier AF
33639 XM
(:y)SH
11 /Times-Roman AF
35217 XM
(is eventually needed.  The value of the)103 W
6120 31925 MT
(formula is recomputed and)
14 W( again cached locally; the cache is marked as valid.  The system is then back to)13 W
6120 33121 MT
(steady state.  Note)
124 W( that the formula was recomputed only once, when needed, rather than eagerly after)125 W
6120 34317 MT
(each value changed.)SH
12 /Times-Bold AF
6120 38001 MT
(5.2.1. Circular Dependencies)SH
11 /Times-Roman AF
6120 39197 MT
(Constraints may involve circular chains of dependency.  Slot)
134 W( A, for instance, might depend on slot B,)133 W
6120 40393 MT
(which in turn depends on slot A; see section 9.1 for an example of a situation where)
135 W( this arises fairly)136 W
6120 41589 MT
(naturally. Circular)
399 W( dependencies)
62 W( may also be used to provide a limited emulation of two-way constraint)61 W
6120 42785 MT
(maintenance.)SH
6120 45083 MT
(KR is able to deal with circular dependencies)
219 W( without any trouble.  This is handled during formula)220 W
6120 46279 MT
(evaluation; if a formula is evaluated and requests)
23 W( a value which depends of the formula itself, the cycle is)22 W
6120 47475 MT
(broken and the cached value of the formula is used)
15 W( instead.  This algorithm guarantees that the network is)16 W
6120 48671 MT
(left in a)
91 W( consistent state, even though the final result may of course depend on where evaluation started)90 W
6120 49867 MT
(from.)SH
12 /Times-Bold AF
6120 53551 MT
(5.2.2. Dependency Paths)SH
11 /Times-Roman AF
6120 54747 MT
(Typical formulas contain embedded references to other values and schemata.  The)
39 W( formula in Figure 5-1,)40 W
6120 55943 MT
(for example, contains an indirect reference to schema)102 W
9 SS 
30725 XM
(POINT-1)SH
11 SS 
34502 XM
(through the contents of the)102 W
10 /Courier AF
47079 XM
(:other)SH
11 /Times-Roman AF
51055 XM
(slot.)SH
6120 57139 MT
(Such references are known as dependency paths.)
35 W( Whenever)
346 W( a formula is evaluated, its dependency paths)36 W
6120 58335 MT
(are used to recompute the updated value.)SH
6120 60633 MT
(It is)
26 W( possible for a dependency path to become temporarily unavailable.  This would happen, for instance,)25 W
6120 61829 MT
(if schema)48 W
9 SS 
10736 XM
(POINT-1)SH
11 SS 
14459 XM
(in Figure 5-1 was deleted, or if)
48 W( slot)49 W
10 /Courier AF
30578 XM
(:other)SH
11 /Times-Roman AF
34502 XM
(in schema)49 W
9 SS 
39304 XM
(POINT-2)SH
11 SS 
43028 XM
(was temporarily set to)49 W
9 SS 
6120 63025 MT
(NIL)SH
11 SS 
(. KR)
767 W( handles such situations automatically.  If a formula needs to be evaluated but one)
246 W( of its)245 W
6120 64221 MT
(dependency paths is broken, the current cached value of the formula is simply reused.  This makes it)153 W
6120 65417 MT
(completely safe to modify schemata that)
102 W( happen to be involved in a dependency path, since the system)101 W
6120 66613 MT
(handles the situation gracefully.)SH
ES
%%Page: 111 10
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.1)
SH( Schema)
1800 W( Manipulation)SH
51386 XM
(Page 111)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(6. Functional Interface: Common Functions)SH
11 /Times-Roman AF
8280 10524 MT
(This section contains a)
79 W( list of the more common functions and macros exported by the KR interface.  It)80 W
8280 11720 MT
(includes the functionality that most Garnet users are likely to)
160 W( need and covers schema representation,)159 W
8280 12916 MT
(object-oriented programming, and constraint maintenance.  Section 8 describes parts)
115 W( of the system that)116 W
8280 14112 MT
(are less commonly used.)SH
8280 16410 MT
(All functions)
54 W( and variables are defined and exported by the KR package.  The easiest way to make them)53 W
8280 17606 MT
(accessible to an application program is to execute the following line:)SH
8 /Courier AF
10200 18771 MT
(\050use-package "KR"\051)SH
11 /Times-Roman AF
8280 21069 MT
(Throughout this and the following section, we will)
70 W( use the schemata defined in section 3.1 as examples.)71 W
8280 22265 MT
(All examples assume the initial state described there.)SH
14 /Times-Bold AF
8280 26083 MT
(6.1. Schema Manipulation)SH
11 /Times-Roman AF
8280 28293 MT
(This group includes functions that create, modify, and delete whole schemata.)SH
/Courier SF
10920 31566 MT
(kr:Create-Instance)SH
/Times-Italic SF
23460 XM
(object-name prototype)SH
/Courier SF
34047 XM
(&rest)SH
/Times-Italic SF
38007 XM
(slot-definitions)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 33864 MT
(This macro)
11 W( creates an instance of the)10 W
/Times-Italic SF
24934 XM
(prototype)SH
/Times-Roman SF
29435 XM
(with certain slots filled in; if)10 W
/Times-Italic SF
42267 XM
(prototype)SH
/Times-Roman SF
46768 XM
(is)SH
9 SS 
47787 XM
(NIL)SH
11 SS 
(, the instance)10 W
8280 35060 MT
(will have)
33 W( no prototype.  The instance is named)34 W
/Times-Italic SF
29419 XM
(object-name)SH
/Times-Roman SF
(. If)343 W
/Times-Italic SF
36789 XM
(object-name)SH
/Times-Roman SF
42534 XM
(is)SH
9 SS 
43577 XM
(NIL)SH
11 SS 
(, an unnamed object is)34 W
8280 36256 MT
(created and returned.  If)35 W
/Times-Italic SF
19263 XM
(object-name)SH
/Times-Roman SF
25008 XM
(is a symbol, a special variable by that name is created and bound to)34 W
8280 37452 MT
(the new object.)SH
8280 39750 MT
(The)SH
/Times-Italic SF
10513 XM
(slot-definitions)SH
/Times-Roman SF
(, if present, are used to create initial slots and values for the object.  Each slot)248 W
8280 40946 MT
(definition should be a list whose)
45 W( first element is the name of a slot, and whose second element is a value)44 W
8280 42142 MT
(for that slot.)SH
8280 44440 MT
(In addition to this basic slot-filling behavior, this)
24 W( macro also performs three operations that are connected)25 W
8280 45636 MT
(to inheritance)
93 W( and constraint maintenance.  First of all, create-instance links the newly created object to)92 W
8280 46832 MT
(the)SH
/Times-Italic SF
9899 XM
(prototype)SH
/Times-Roman SF
14390 XM
(via the)SH
10 /Courier AF
17628 XM
(:is-a)SH
11 /Times-Roman AF
20903 XM
(link, thus making it an instance.)SH
8280 49130 MT
(Second, if the)10 W
/Times-Italic SF
14664 XM
(prototype)SH
/Times-Roman SF
19165 XM
(contains any slot with a formula,)
10 W( and the)11 W
/Times-Italic SF
37425 XM
(slot-definitions)SH
/Times-Roman SF
44313 XM
(do not redefine that slot,)11 W
8280 50326 MT
(create-instance copies)
418 W( the formula down into the instance.  This means that the)417 W
/Times-Italic SF
48646 XM
(prototype)SH
/Times-Roman SF
53554 XM
(can)SH
8280 51522 MT
(conveniently provide default formulas for any slot that is not explicitly defined by its instances.)SH
8280 53820 MT
(Third, if either)
43 W( the)44 W
/Times-Italic SF
16793 XM
(prototype)SH
/Times-Roman SF
21328 XM
(or the object itself defines the)44 W
10 /Courier AF
34910 XM
(:initialize)SH
11 /Times-Roman AF
41829 XM
(method, create-instance sends)44 W
8280 55016 MT
(the newly created object the)102 W
10 /Courier AF
21403 XM
(:initialize)SH
11 /Times-Roman AF
28380 XM
(message. This)
479 W( is)
102 W( done after all other operations have been)101 W
8280 56212 MT
(completed, and provides an automatic way to perform object-dependent initializations.)SH
8280 58510 MT
(Example:)SH
8 /Courier AF
10200 59675 MT
(\050create-instance 'RECTANGLE-4 BOX-OBJECT \050:x 14\051 \050:y 15\051\051)SH
9 /Times-Roman AF
50835 61610 MT
(2)SH
11 SS 
8280 61973 MT
(The following example demonstrates the use of the)SH
10 /Courier AF
31068 XM
(:initialize)SH
11 /Times-Roman AF
37943 XM
(method at the prototype level)SH
51285 XM
(:)SH
10800 50 8280 69158 UL
7 SS 
9180 70659 MT
(2)SH
9 SS 
9530 70986 MT
(Defining methods on Garnet objects is seldom necessary in practice,)
223 W( since real Opal prototypes already have built-in)224 W
10 /Courier AF
8280 72000 MT
(:initialize)SH
9 /Times-Roman AF
15105 XM
(methods.)SH
ES
%%Page: 112 11
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 112)
SH( KR)830 W
30677 XM
(Functional Interface: Common Functions)
SH( Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050define-method :initialize BOX-OBJECT \050schema\051)SH
9480 8564 MT
(\050s-value schema :color :RED\051)SH
9480 9429 MT
(\050format t "~S initialized~%" schema\051\051)SH
8040 11159 MT
(\050create-instance 'RECTANGLE-4 BOX-OBJECT \050:x 14\051 \050:y 15\051\051)SH
/Times-Italic SF
8040 12024 MT
(;; prints out:)SH
/Courier SF
8040 12889 MT
(#k<RECTANGLE-4> initialized)SH
11 /Times-Roman AF
6120 15187 MT
(Create-instance understands)
152 W( the)151 W
/Times-Bold SF
20837 XM
(:override)SH
/Times-Roman SF
25599 XM
(keyword and the)151 W
/Times-Bold SF
33657 XM
(:name-prefix)SH
/Times-Roman SF
40191 XM
(keyword; see 8.13 for more)151 W
6120 16383 MT
(details. The)
483 W( uniform declaration syntax with the)104 W
/Times-Bold SF
28611 XM
(:declare)SH
/Times-Roman SF
32776 XM
(keyword is used to)
104 W( define "local only slots",)105 W
6120 17579 MT
(constant slots, and many others \050see section 8.2\051.)SH
/Courier SF
8760 20852 MT
(kr:PS)SH
/Times-Italic SF
12720 XM
(schema)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 23150 MT
(This function)
6 W( prints the contents of the)5 W
/Times-Italic SF
23479 XM
(schema)SH
/Times-Roman SF
(. In)
285 W( its simplest form, described here, the function is called)5 W
6120 24346 MT
(with the)152 W
/Times-Italic SF
10274 XM
(schema)SH
/Times-Roman SF
13999 XM
(as its)
152 W( sole argument, and prints out the contents of the schema in a standard format.)153 W
6120 25542 MT
(Optional arguments also allow you to control precisely what is printed out; the more complicated form is)38 W
6120 26738 MT
(described in section 8.14.1.)SH
6120 29036 MT
(The following example shows the simple form of)SH
10 /Courier AF
28116 XM
(ps)SH
11 /Times-Roman AF
(:)SH
8 /Courier AF
8040 30201 MT
(\050ps RECTANGLE-1\051)SH
/Times-Italic SF
8040 31066 MT
(;; prints out:)SH
/Courier SF
8040 31931 MT
({#k<RECTANGLE-1>)SH
9000 32796 MT
(:Y =  20)SH
9000 33661 MT
(:X =  10)SH
9000 34526 MT
(:IS-A =  #k<BOX-OBJECT>)SH
9000 35391 MT
(})SH
11 SS 
8760 39089 MT
(kr:Schema-P)SH
/Times-Italic SF
16680 XM
(thing)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 41387 MT
(This predicate returns)12 W
9 SS 
16021 XM
(T)SH
11 SS 
16858 XM
(if)SH
/Times-Italic SF
17818 XM
(thing)SH
/Times-Roman SF
20368 XM
(is a valid KR schema,)13 W
9 SS 
30331 XM
(NIL)SH
11 SS 
32119 XM
(otherwise. It)
301 W( returns)13 W
9 SS 
41548 XM
(NIL)SH
11 SS 
43336 XM
(if)SH
/Times-Italic SF
44296 XM
(thing)SH
/Times-Roman SF
46846 XM
(is a destroyed)13 W
6120 42583 MT
(schema. It)
275 W( also returns)SH
9 SS 
16566 XM
(NIL)SH
11 SS 
18341 XM
(if)SH
/Times-Italic SF
19288 XM
(thing)SH
/Times-Roman SF
21825 XM
(is a formula.)SH
8 /Courier AF
8040 43748 MT
(\050schema-p RECTANGLE-1\051 ==> T)SH
8040 44613 MT
(\050schema-p 'random\051 ==> NIL)SH
11 SS 
8760 48311 MT
(kr:Is-A-P)SH
/Times-Italic SF
15360 XM
(schema thing)385 W
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 50609 MT
(This predicate returns)178 W
9 SS 
16519 XM
(T)SH
11 SS 
17522 XM
(if)SH
/Times-Italic SF
18647 XM
(schema)SH
/Times-Roman SF
22398 XM
(is related to)178 W
/Times-Italic SF
28339 XM
(thing)SH
/Times-Roman SF
31053 XM
(\050another schema\051 via the)177 W
10 /Courier AF
42877 XM
(:is-a)SH
11 /Times-Roman AF
46329 XM
(relation, either)177 W
6120 51805 MT
(directly or through an inheritance chain.  It returns)SH
9 SS 
28600 XM
(NIL)SH
11 SS 
30375 XM
(otherwise.)SH
6120 54103 MT
(Note that)153 W
/Times-Italic SF
10764 XM
(thing)SH
/Times-Roman SF
13455 XM
(may have the special value)154 W
9 SS 
26350 XM
(T)SH
11 SS 
(, which is used as a "super-class" indicator; in this case,)154 W
10 /Courier AF
6120 55299 MT
(is-a-p)SH
11 /Times-Roman AF
9995 XM
(returns)SH
9 SS 
13324 XM
(T)SH
11 SS 
14149 XM
(if)SH
/Times-Italic SF
15096 XM
(schema)SH
/Times-Roman SF
18669 XM
(is any schema.  If the)SH
/Times-Italic SF
28290 XM
(schema)SH
/Times-Roman SF
31863 XM
(is identical to the)SH
/Times-Italic SF
39685 XM
(thing)SH
/Times-Roman SF
(,)SH
10 /Courier AF
42497 XM
(is-a-p)SH
11 /Times-Roman AF
46372 XM
(also returns)SH
9 SS 
51748 XM
(T)SH
11 SS 
(.)SH
6120 56495 MT
(Examples:)SH
8 /Courier AF
8040 57660 MT
(\050is-a-p RECTANGLE-1 BOX-OBJECT\051 ==> T)SH
8040 58525 MT
(\050is-a-p RECTANGLE-1 MY-GRAPHICAL-OBJECT\051 ==> T)SH
8040 59390 MT
(\050is-a-p RECTANGLE-1 RECTANGLE-2\051 ==> NIL)SH
8040 60255 MT
(\050is-a-p RECTANGLE-1 T\051 ==> T)SH
14 /Times-Bold AF
6120 64073 MT
(6.2. Slot and Value Manipulation Functions)SH
11 /Times-Roman AF
6120 66283 MT
(This group includes the most commonly used KR functions, i.e., the)
2 W( ones that retrieve or modify the value)1 W
6120 67479 MT
(in a slot.  This section presents)
80 W( KR value manipulation functions that deal with constraints.  A different)81 W
6120 68675 MT
(set of primitive functions, which do not deal with constraints, is described in Section 8.)SH
ES
%%Page: 113 12
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.2)
SH( Slot)
1800 W( and Value Manipulation Functions)SH
51386 XM
(Page 113)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(6.2.1. Getting Values with G-Value and GV)SH
11 /Times-Roman AF
8280 9200 MT
(When called outside of a formula,)39 W
10 /Courier AF
23755 XM
(g-value)SH
11 /Times-Roman AF
28269 XM
(and)SH
10 /Courier AF
30171 XM
(gv)SH
11 /Times-Roman AF
31684 XM
(behave identically.  When used inside a formula, the)38 W
8280 10396 MT
(function)SH
10 /Courier AF
12276 XM
(gv)SH
11 /Times-Roman AF
13806 XM
(not only returns the value of a slot, but also establishes a dependency for the formula on the)56 W
8280 11592 MT
(slot. This)
275 W( special property of)SH
10 /Courier AF
21447 XM
(gv)SH
11 /Times-Roman AF
22922 XM
(is discussed in section 6.2.4.)SH
8280 13890 MT
(Novice Garnet users only need to learn about)35 W
10 /Courier AF
28718 XM
(gv)SH
11 /Times-Roman AF
(, but)34 W
10 /Courier AF
32217 XM
(g-value)SH
11 /Times-Roman AF
36726 XM
(is supplied for the rare case in which you)34 W
8280 15086 MT
(want to retrieve a slot value from inside a formula without establishing a dependency.)SH
/Courier SF
10920 16678 MT
(kr:Gv)SH
/Times-Italic SF
14880 XM
(object)SH
/Courier SF
18228 XM
(&rest)SH
/Times-Italic SF
22188 XM
(slot-names)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
10920 18906 MT
(kr:G-Value)SH
/Times-Italic SF
18180 XM
(object)SH
/Courier SF
21528 XM
(&rest)SH
/Times-Italic SF
25488 XM
(slot-names)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 21204 MT
(These macros return the value in a slot of an object.  If the)
69 W( slot is empty or not present, they return)70 W
9 SS 
53305 XM
(NIL)SH
11 SS 
(.)SH
8280 22400 MT
(Inheritance may be used when looking for a value.)103 W
10 /Courier AF
32125 XM
(G-value)SH
11 /Times-Roman AF
36703 XM
(and)SH
10 /Courier AF
38668 XM
(gv)SH
11 /Times-Roman AF
40245 XM
(handle constraints properly:  If a)102 W
8280 23596 MT
(formula is currently installed)
81 W( in the slot, the value is computed \050if needed\051 and returned.)82 W
10 /Courier AF
48811 XM
(G-value)SH
11 /Times-Roman AF
53368 XM
(will)SH
8280 24792 MT
(work in place of)SH
10 /Courier AF
15732 XM
(gv)SH
11 /Times-Roman AF
17207 XM
(in any of the following examples:)SH
8 /Courier AF
10200 25957 MT
(\050gv RECTANGLE-1 :is-a\051 ==> #k<BOX-OBJECT>)SH
10200 26822 MT
(\050gv RECTANGLE-1 :thickness\051 ==> 1)SH
/Times-Italic SF
27480 XM
(; inherited)SH
/Courier SF
10200 27687 MT
(\050gv RECTANGLE-1 :color\051 ==> :BLUE)SH
10200 28552 MT
(\050gv RECTANGLE-2 :y\051 ==> 35)SH
/Times-Italic SF
27480 XM
(; computed formula)SH
11 /Times-Roman AF
8280 30850 MT
(Although it is common to call)82 W
10 /Courier AF
22218 XM
(g-value)SH
11 /Times-Roman AF
26775 XM
(and)SH
10 /Courier AF
28720 XM
(gv)SH
11 /Times-Roman AF
30277 XM
(with only one)
82 W( slot name, these macros may actually be)81 W
8280 32046 MT
(given any number of)26 W
/Times-Italic SF
17792 XM
(slot-names)SH
/Times-Roman SF
(. The)
327 W( macros expand into repeated calls to)26 W
10 /Courier AF
41912 XM
(g-value)SH
11 /Times-Roman AF
46413 XM
(and)SH
10 /Courier AF
48302 XM
(gv)SH
11 /Times-Roman AF
(, where)
26 W( each)27 W
8280 33242 MT
(slot is used to retrieve another object.  The given slot in the final object \050which)
100 W( is, in general, different)99 W
8280 34438 MT
(from the)SH
/Times-Italic SF
12312 XM
(object)SH
/Times-Roman SF
(\051 is then accessed.  For example:)SH
8 /Courier AF
10200 35603 MT
(\050gv RECTANGLE-2 :left-obj :x\051)SH
11 /Times-Roman AF
8280 37024 MT
(is equivalent to)SH
8 /Courier AF
10200 38189 MT
(\050gv \050gv RECTANGLE-2 :left-obj\051 :x\051)SH
11 /Times-Roman AF
8280 40487 MT
(Both expressions return the)
7 W( value of the)8 W
10 /Courier AF
26142 XM
(:x)SH
11 /Times-Roman AF
27625 XM
(slot of the object which is contained in the)8 W
10 /Courier AF
46608 XM
(:left-obj)SH
11 /Times-Roman AF
52291 XM
(slot of)8 W
9 SS 
8280 41683 MT
(RECTANGLE-2)SH
11 SS 
(. One)
379 W( can think of the slot)52 W
10 /Courier AF
26741 XM
(:left-obj)SH
11 /Times-Roman AF
32468 XM
(as providing the name of the place from which)
52 W( the)51 W
8280 42879 MT
(next slot can be accessed.  Such a slot is often called a)135 W
/Times-Italic SF
34165 XM
(link)SH
/Times-Roman SF
(, since it provides a link to another object)136 W
8280 44075 MT
(which can be used to compute values.)SH
12 /Times-Bold AF
8280 47759 MT
(6.2.2. Setting Values with S-Value)SH
11 /Courier AF
10920 51043 MT
(kr:S-Value)SH
/Times-Italic SF
18180 XM
(object slot)SH
/Courier SF
23393 XM
([)SH
/Times-Italic SF
(more-slots)SH
/Courier SF
(])SH
/Times-Italic SF
30017 XM
(value)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 53341 MT
(This function is used)
7 W( to set a slot with a given value or formula.  The)6 W
/Times-Italic SF
38960 XM
(slot)SH
/Times-Roman SF
40831 XM
(in the)6 W
/Times-Italic SF
43593 XM
(object)SH
/Times-Roman SF
46562 XM
(is set to contain the)6 W
/Times-Italic SF
8280 54537 MT
(value)SH
/Times-Roman SF
(. Like)
399 W( with)62 W
10 /Courier AF
16257 XM
(g-value)SH
11 /Times-Roman AF
20794 XM
(and)SH
10 /Courier AF
22719 XM
(gv)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24531 XM
(s-value)SH
11 /Times-Roman AF
29068 XM
(can be given multiple slots in argument list, when the)
62 W( slot)63 W
8280 55733 MT
(to be set is several levels away from)135 W
/Times-Italic SF
25548 XM
(object)SH
/Times-Roman SF
(. In)
545 W( the normal case,)135 W
/Times-Italic SF
38514 XM
(value)SH
/Times-Roman SF
41305 XM
(is an ordinary LISP value and)134 W
8280 56929 MT
(simply supersedes any previous value in the)
203 W( slot.  If)204 W
/Times-Italic SF
33379 XM
(value)SH
/Times-Roman SF
36240 XM
(is a formula \050i.e.  the result of a call to)204 W
10 /Courier AF
8280 58125 MT
(o-formula)SH
11 /Times-Roman AF
13999 XM
(or)SH
10 /Courier AF
15234 XM
(formula)SH
11 /Times-Roman AF
(\051, the formula is installed in the)44 W
/Times-Italic SF
33796 XM
(slot)SH
/Times-Roman SF
35705 XM
(and internal bookkeeping information is set)44 W
8280 59321 MT
(up appropriately.)SH
8280 61619 MT
(If the)96 W
/Times-Italic SF
11098 XM
(slot)SH
/Times-Roman SF
13059 XM
(already contains a formula, the following two cases arise.)
96 W( If)469 W
/Times-Italic SF
40965 XM
(value)SH
/Times-Roman SF
43719 XM
(is also a formula, the old)97 W
8280 62815 MT
(formula is replaced and any dependencies are removed.)
38 W( If)350 W
/Times-Italic SF
34645 XM
(value)SH
/Times-Roman SF
37339 XM
(is not a formula, the old formula is kept)37 W
8280 64011 MT
(in place, but the new)20 W
/Times-Italic SF
17788 XM
(value)SH
/Times-Roman SF
20465 XM
(is used as its new, temporary)
20 W( cached value.  This means that the)21 W
/Times-Italic SF
49110 XM
(slot)SH
/Times-Roman SF
50996 XM
(will keep)21 W
8280 65207 MT
(the)SH
/Times-Italic SF
10056 XM
(value)SH
/Times-Roman SF
12870 XM
(until such time as the old formula)
157 W( needs to be re-evaluated \050because some of the values on)156 W
8280 66403 MT
(which it depends are modified\051.)SH
10 /Courier AF
8280 68701 MT
(S-value)SH
11 /Times-Roman AF
12755 XM
(returns the new value of the)SH
/Times-Italic SF
25277 XM
(slot)SH
/Times-Roman SF
(.)SH
8280 70999 MT
(Note that a)62 W
/Times-Bold SF
13567 XM
(setf)SH
/Times-Roman SF
15552 XM
(form is defined for)62 W
10 /Courier AF
24352 XM
(gv)SH
11 /Times-Roman AF
25889 XM
(and)SH
10 /Courier AF
27814 XM
(g-value)SH
11 /Times-Roman AF
(, and expands into)63 W
10 /Courier AF
40545 XM
(s-value)SH
11 /Times-Roman AF
(. This)
401 W( allows a variety)63 W
ES
%%Page: 114 13
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 114)
SH( KR)830 W
30677 XM
(Functional Interface: Common Functions)
SH( Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(of LISP constructs to be used in combination with)SH
10 /Courier AF
28455 XM
(gv)SH
11 /Times-Roman AF
29930 XM
(and)SH
10 /Courier AF
31793 XM
(g-value)SH
11 /Times-Roman AF
(, such as the idiom)SH
8 /Courier AF
8040 9120 MT
(\050incf \050gv object slot\051\051)SH
11 /Times-Roman AF
6120 10541 MT
(which increments the value of a slot in the object.  For example,)SH
8 /Times-Italic AF
8040 11754 MT
(;; Change value in depended slot from 20 to 21)SH
/Courier SF
8040 12619 MT
(\050incf \050gv RECTANGLE-1 :y\051\051)SH
/Times-Italic SF
8040 13484 MT
(;; The constraint is propagated to RECTANGLE-2:)SH
/Courier SF
8040 14349 MT
(\050gv RECTANGLE-2 :y\051 ==> 36)SH
/Times-Italic SF
25320 XM
(; recomputed)SH
11 /Times-Roman AF
6120 16647 MT
(Constraint propagation is fully enforced during this operation, just as it would be in the equivalent)240 W
6120 17843 MT
(expression)SH
8 /Courier AF
8040 19008 MT
(\050s-value RECTANGLE-1 :y \0501+ \050gv RECTANGLE-1 :y\051\051\051)SH
12 /Times-Bold AF
6120 22692 MT
(6.2.3. Formula and O-Formula)SH
11 /Courier AF
8760 25976 MT
(kr:O-Formula)SH
/Times-Italic SF
17340 XM
(form)SH
/Courier SF
20078 XM
(&optional)SH
/Times-Italic SF
26678 XM
(initial-value)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 28274 MT
(Given a)149 W
/Times-Italic SF
10144 XM
(form)SH
/Times-Roman SF
(, this macro returns a formula \050formulas are internally represented by special structures\051.)149 W
6120 29470 MT
(The)SH
/Times-Italic SF
8105 XM
(form)SH
/Times-Roman SF
10458 XM
(typically consists of Lisp expressions and)SH
10 /Courier AF
29034 XM
(gv)SH
11 /Times-Roman AF
30509 XM
(or)SH
10 /Courier AF
31700 XM
(gvl)SH
11 /Times-Roman AF
33775 XM
(references \050see below\051.)SH
6120 30666 MT
(Examples:)SH
8 /Courier AF
8040 31831 MT
(\050o-formula \050gvl :ABOVE-GADGET :x\051\051)SH
8040 32696 MT
(\050o-formula \050min \050gvl :ABOVE-GADGET :x\051)SH
15720 33561 MT
(\050+ \050gvl :OTHER-GADGET :width\051 10\051\051\051)SH
11 /Times-Roman AF
6120 34982 MT
(The first example creates a formula which causes the slot)
57 W( on which it is installed to have the same value)56 W
6120 36178 MT
(as slot)100 W
10 /Courier AF
9376 XM
(:x)SH
11 /Times-Roman AF
10951 XM
(of the object contained in slot)100 W
9 SS 
24871 XM
(:ABOVE-GADGET)SH
11 SS 
32596 XM
(of the)
100 W( current object.  The second formula is)101 W
6120 37374 MT
(more complex and constrains the slot on which it is installed to have as its value the minimum of two)117 W
6120 38570 MT
(values. One)
391 W( value is computed as before, and the other is computed by adding)
58 W( 10 to the)59 W
10 /Courier AF
46146 XM
(:width)SH
11 /Times-Roman AF
50080 XM
(slot of)59 W
6120 39766 MT
(the object contained in slot)SH
9 SS 
18249 XM
(:OTHER-GADGET)SH
11 SS 
25774 XM
(of the current object.)SH
6120 42064 MT
(The)SH
/Times-Italic SF
8153 XM
(form)SH
/Times-Roman SF
10554 XM
(can also be an existing formula, rather than a Lisp)
48 W( expression.  In this case, the new formula is)47 W
6120 43260 MT
(linked to the existing formula, and inherits the expression from it.  No local state is)
117 W( shared by the two)118 W
6120 44456 MT
(formulas. This)
399 W( form of)
62 W( the call should be used as often as possible, since inherited formulas are smaller)61 W
6120 45652 MT
(and more efficient)
57 W( than top-level formulas.  An illustration of this case is given by the second call in the)58 W
6120 46848 MT
(following example, which creates a new formula that inherits its expression from the first one:)SH
8 /Courier AF
8040 48013 MT
(\050setf f \050o-formula \050+ \050gvl :ABOVE :y\051)SH
18600 48878 MT
(\050floor \050gvl :ABOVE :height\051 2\051\051\051\051)SH
8040 49743 MT
(\050setf g \050o-formula f\051\051)SH
11 /Times-Roman AF
6120 52041 MT
(If an)53 W
/Times-Italic SF
8546 XM
(initial-value)SH
/Times-Roman SF
14251 XM
(is specified, it is used as the initial cached value for the formula.  This cached value is)52 W
6120 53237 MT
(recorded in the formula but marked invalid, and thus it is never used)
88 W( under normal circumstances.  The)89 W
6120 54433 MT
(initial value is only used if the formula)
36 W( is part of a circular dependency, or if one of its dependency paths)35 W
6120 55629 MT
(is invalid.  Most applications need not be concerned about this feature.)SH
6120 57927 MT
(A reader macro has been defined to abbreviate the definition of o-formulas.)
371 W( Instead)
1018 W( of typing)372 W
10 /Courier AF
6120 59123 MT
(\050o-formula \050...\051\051)297 W
11 /Times-Roman AF
(, you could type)297 W
10 /Courier AF
25167 XM
(#f\050...\051)SH
11 /Times-Roman AF
(, which expands into a call to)296 W
10 /Courier AF
44575 XM
(o-formula)SH
11 /Times-Roman AF
(. For)867 W
6120 60319 MT
(example, one may write:)SH
8 /Courier AF
9480 61484 MT
(\050s-value a :left #f\050gvl :top\051\051)SH
11 /Times-Roman AF
6120 62905 MT
(instead of the equivalent expression)SH
8 /Courier AF
9480 64070 MT
(\050s-value a :left \050o-formula \050gvl :top\051\051\051)SH
11 SS 
8760 67768 MT
(kr:Formula)SH
/Times-Italic SF
16020 XM
(form)SH
/Courier SF
18758 XM
(&optional)SH
/Times-Italic SF
25358 XM
(initial-value)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 70066 MT
(Given a)30 W
/Times-Italic SF
9906 XM
(form)SH
/Times-Roman SF
(, this function returns)
30 W( a formula.  It is similar to)31 W
10 /Courier AF
33495 XM
(o-formula)SH
11 /Times-Roman AF
(, except that the code in)31 W
/Times-Italic SF
49802 XM
(form)SH
/Times-Roman SF
52186 XM
(is)SH
6120 71262 MT
(not compiled until run-time, when the)SH
10 /Courier AF
23077 XM
(formula)SH
11 /Times-Roman AF
27552 XM
(call is actually executed.)SH
ES
%%Page: 115 14
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.3)
SH( Object-Oriented)
1800 W( Programming)SH
51386 XM
(Page 115)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(Code that)
54 W( can be compiled early should use)53 W
10 /Courier AF
28133 XM
(o-formula)SH
11 /Times-Roman AF
(, which yields more efficient formula evaluation)53 W
8280 9151 MT
(and reduces the amount of storage.)96 W
10 /Courier AF
24834 XM
(Formula)SH
11 /Times-Roman AF
29405 XM
(might be required when local variables are used in)97 W
/Times-Italic SF
52727 XM
(form)SH
/Times-Roman SF
(,)SH
8280 10347 MT
(and are not set until run-time.)
37 W( See)
348 W( the "Hints and Caveats" section of the Tutorial for more discussion of)36 W
8280 11543 MT
(when a formula created with)SH
10 /Courier AF
21137 XM
(formula)SH
11 /Times-Roman AF
25612 XM
(might be needed.)SH
/Courier SF
10920 14816 MT
(kr:Formula-P)SH
/Times-Italic SF
19500 XM
(thing)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 17114 MT
(A predicate that returns)273 W
9 SS 
20001 XM
(T)SH
11 SS 
21100 XM
(if the)274 W
/Times-Italic SF
24214 XM
(thing)SH
/Times-Roman SF
27025 XM
(\050any Lisp object\051 is a formula created with)274 W
10 /Courier AF
48215 XM
(o-formula)SH
11 /Times-Roman AF
54164 XM
(or)SH
10 /Courier AF
8280 18310 MT
(formula)SH
11 /Times-Roman AF
(,)SH
9 SS 
13030 XM
(NIL)SH
11 SS 
14805 XM
(otherwise.)SH
12 /Times-Bold AF
8280 21994 MT
(6.2.4. GV and GVL in Formulas)SH
11 /Courier AF
10920 25278 MT
(kr:Gv)SH
/Times-Italic SF
14880 XM
(object)SH
/Courier SF
18228 XM
(&rest)SH
/Times-Italic SF
22188 XM
(slot-names)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 27576 MT
(This macro, which we saw in section 6.2.1, serves a special purpose when)
173 W( used within formulas.  In)172 W
8280 28772 MT
(addition to)
38 W( returning a value like)39 W
10 /Courier AF
23177 XM
(g-value)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
27966 XM
(gv)SH
11 /Times-Roman AF
29480 XM
(records the dependency path and ensures that the formula)39 W
8280 29968 MT
(in which it is embedded is recomputed whenever the dependency path or the value changes.)SH
8280 32266 MT
(Note that the)80 W
/Times-Italic SF
14477 XM
(object)SH
/Times-Roman SF
17520 XM
(can be any object, not just the one on which the formula containing)80 W
10 /Courier AF
48435 XM
(gv)SH
11 /Times-Roman AF
49989 XM
(is installed.)79 W
8280 33462 MT
(Specifying the reserved name)66 W
10 /Courier AF
21860 XM
(:self)SH
11 /Times-Roman AF
25201 XM
(for)SH
/Times-Italic SF
26824 XM
(object)SH
/Times-Roman SF
29853 XM
(ensures that the path)
66 W( starts from the object on which the)67 W
8280 34658 MT
(formula is installed.  This can be achieved more simply via)SH
10 /Courier AF
34552 XM
(gvl)SH
11 /Times-Roman AF
(, as explained below.)SH
8280 36956 MT
(The following examples show how to use)SH
10 /Courier AF
26885 XM
(gv)SH
11 /Times-Roman AF
28360 XM
(within formulas:)SH
8 /Courier AF
10200 38121 MT
(\050o-formula \050gv RECTANGLE-1 :y\051\051)SH
10200 38986 MT
(\050o-formula \050+ \050gv :self :x\051 15\051\051)SH
10200 39851 MT
(\050o-formula \050equal \050gv :self :other :other :color\051)SH
18840 40716 MT
(\050gv :self :color\051\051\051)SH
11 /Times-Roman AF
8280 43879 MT
(As a special case, the expression)51 W
10 /Courier AF
23215 XM
(\050gv :self\051)50 W
11 /Times-Roman AF
29590 XM
(\050without any slot name\051 may be used within a formula to)50 W
8280 45075 MT
(refer to the object)
54 W( to which the formula is attached.  This is sometimes useful for formulas which need a)55 W
8280 46271 MT
(way to explicitly reference the object on which they are currently installed.)SH
/Courier SF
10920 49544 MT
(kr:Gvl)SH
/Times-Italic SF
15540 XM
(slot)SH
/Courier SF
17790 XM
(&rest)SH
/Times-Italic SF
21750 XM
(more-slots)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 51842 MT
(This is a)
13 W( useful shorthand notation for)12 W
10 /Courier AF
25383 XM
(\050gv :self)12 W
/Times-Italic SF
31407 XM
(slot more-slots)12 W
/Courier SF
(\051)SH
11 /Times-Roman AF
(. It)
299 W( may only be used within formulas,)12 W
8280 53038 MT
(since it looks for)183 W
/Times-Italic SF
16650 XM
(slot)SH
/Times-Roman SF
18698 XM
(in the object on which the surrounding formula is installed.  For example, the)183 W
8280 54234 MT
(expression)SH
10 /Courier AF
13312 XM
(\050gvl :color\051)53 W
11 /Times-Roman AF
20893 XM
(returns the current value of the)53 W
10 /Courier AF
35015 XM
(:color)SH
11 /Times-Roman AF
38942 XM
(slot in the object which contains the)52 W
8280 55430 MT
(formula, and is equivalent to the expression)SH
10 /Courier AF
27770 XM
(\050gv :self :color\051)SH
11 /Times-Roman AF
(.)SH
14 /Times-Bold AF
8280 59248 MT
(6.3. Object-Oriented Programming)SH
11 /Times-Roman AF
8280 61458 MT
(This group includes functions which support objected-oriented programming within KR.)SH
/Courier SF
10920 64731 MT
(kr:Define-Method)SH
/Times-Italic SF
22140 XM
(slot-name object arg-list)SH
/Courier SF
33616 XM
(&rest)SH
/Times-Italic SF
37576 XM
(body)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 67029 MT
(This macro defines a method named)132 W
/Times-Italic SF
25322 XM
(slot-name)SH
/Times-Roman SF
30068 XM
(for the)133 W
/Times-Italic SF
33510 XM
(object)SH
/Times-Roman SF
(. While)541 W
/Times-Italic SF
40385 XM
(object)SH
/Times-Roman SF
43481 XM
(can be any object, and in)133 W
8280 68225 MT
(particular any instance, it)
14 W( is customary to define methods at the level of prototypes; this allows prototypes)13 W
8280 69421 MT
(to provide methods for all their instances.)SH
8280 71719 MT
(The method is defined as a)
28 W( function whose argument list is)29 W
/Times-Italic SF
34775 XM
(arg-list)SH
/Times-Roman SF
38319 XM
(and whose body is given by the)29 W
/Times-Italic SF
52667 XM
(body)SH
/Times-Roman SF
(.)SH
ES
%%Page: 116 15
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 116)
SH( KR)830 W
30677 XM
(Functional Interface: Common Functions)
SH( Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(The method is installed on slot)12 W
/Times-Italic SF
20004 XM
(slot-name)SH
/Times-Roman SF
(, which is created if needed.  In order to facilitate debugging,)
12 W( the)11 W
6120 9151 MT
(function which implements the method is given a meaningful name)
331 W( formed by concatenating the)332 W
/Times-Italic SF
6120 10347 MT
(slot-name)SH
/Times-Roman SF
(, the string "-METHOD-", and the name of the)SH
/Times-Italic SF
31241 XM
(object)SH
/Times-Roman SF
(. Example:)275 W
8 /Courier AF
8040 11512 MT
(\050define-method :print BOX-OBJECT \050object\051)SH
9000 12377 MT
(\050format t "A rectangle at \050~D,~D\051.~%")SH
9960 13242 MT
(\050gv object :x\051 \050gv object :y\051\051\051)SH
11 /Times-Roman AF
6120 14663 MT
(After this, the)42 W
10 /Courier AF
12600 XM
(:print)SH
11 /Times-Roman AF
16517 XM
(method can be inherited by any instance)
42 W( of)41 W
9 SS 
36033 XM
(BOX-OBJECT)SH
11 SS 
(. Sending)
357 W( the message to)41 W
9 SS 
6120 15859 MT
(RECTANGLE-2)SH
11 SS 
(, for example, would cause the following to happen:)SH
8 /Courier AF
8040 17024 MT
(\050kr-send RECTANGLE-2 :print RECTANGLE-2\051)SH
/Times-Italic SF
8040 17889 MT
(;; prints out:)SH
/Courier SF
8040 18754 MT
(A rectangle at \05034,35\051.)SH
11 /Times-Roman AF
6120 20175 MT
(The generated name of the)SH
10 /Courier AF
18121 XM
(:print)SH
11 /Times-Roman AF
21996 XM
(method, in this example, would be)SH
9 SS 
37456 XM
(PRINT-METHOD-BOX-OBJECT)SH
11 SS 
(.)SH
/Courier SF
8760 23448 MT
(kr:KR-Send)SH
/Times-Italic SF
16020 XM
(object slot)385 W
/Courier SF
21618 XM
(&rest)SH
/Times-Italic SF
25578 XM
(arguments)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 25746 MT
(This macro implements the primitive level of message sending.  The)118 W
/Times-Italic SF
37846 XM
(slot)SH
/Times-Roman SF
39829 XM
(in)SH
/Times-Italic SF
41078 XM
(object)SH
/Times-Roman SF
44160 XM
(should yield a Lisp)119 W
6120 26942 MT
(function object; the function is then called with the arguments specified in)170 W
/Times-Italic SF
41092 XM
(arguments)SH
/Times-Roman SF
(. Note)
614 W( that the)169 W
6120 28138 MT
(function may be local to the)SH
/Times-Italic SF
18706 XM
(object)SH
/Times-Roman SF
(, or it may be inherited.)SH
6120 30436 MT
(If the)
85 W( function, i.e., the value of the expression)86 W
/Courier SF
27694 XM
(\050g-value object slot\051)86 W
/Times-Roman SF
(, is)86 W
9 SS 
43457 XM
(NIL)SH
11 SS 
(, nothing happens)86 W
6120 31632 MT
(and)SH
10 /Courier AF
8185 XM
(kr-send)SH
11 /Times-Roman AF
12862 XM
(simply returns)202 W
9 SS 
19866 XM
(NIL)SH
11 SS 
(. Otherwise,)
679 W( the function is invoked and the value\050s\051 it returns are)201 W
6120 32828 MT
(returned by)SH
10 /Courier AF
11434 XM
(kr-send)SH
11 /Times-Roman AF
(.)SH
/Courier SF
8760 36101 MT
(kr:Call-Prototype-Method &rest)SH
/Times-Italic SF
29220 XM
(arguments)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 38399 MT
(This macro can be used inside an)
3 W( object's method to invoke the method attached to the object's prototype.)4 W
6120 39595 MT
(It can only be used inside object methods.  If a prototype of the current object \050i.e, the)
11 W( one which supplied)10 W
6120 40791 MT
(the method currently being executed\051 also defines a method by)
36 W( the same name, the prototype's method is)37 W
6120 41987 MT
(invoked with)SH
/Times-Italic SF
12170 XM
(arguments)SH
/Times-Roman SF
17089 XM
(as the list of arguments.  For example,)SH
8 /Courier AF
8040 43152 MT
(\050define-method :notify A \050object level\051)SH
9000 44017 MT
(;; Execute object-specific code:)SH
9000 44882 MT
(;; ...)SH
9000 45747 MT
(;; Now invoke :notify method from prototype, if any:)SH
9000 46612 MT
(\050call-prototype-method object level\051\051\051\051)SH
8040 48342 MT
(\050kr-send A :notify A 10\051)SH
11 /Times-Roman AF
6120 49763 MT
(First of all,)46 W
10 /Courier AF
11392 XM
(kr-send)SH
11 /Times-Roman AF
15913 XM
(invokes the method defined locally by object)46 W
9 SS 
36306 XM
(A)SH
11 SS 
(. Since)
367 W( the method itself contains a)46 W
6120 50959 MT
(call to)203 W
10 /Courier AF
9521 XM
(call-prototype-method)SH
11 /Times-Roman AF
(, the hierarchy is searched for a prototype of object)204 W
9 SS 
46852 XM
(A)SH
11 SS 
47981 XM
(which also)204 W
6120 52155 MT
(defines the)SH
10 /Courier AF
11190 XM
(:notify)SH
11 /Times-Roman AF
15665 XM
(method. If)
275 W( one exists, that method is invoked.)SH
6120 54453 MT
(A method is free to supply a prototype)
103 W( method with any parameters it wants; this can be accomplished)102 W
6120 55649 MT
(simply by using different values in the call to)127 W
10 /Courier AF
27458 XM
(call-prototype-method)SH
11 /Times-Roman AF
(. In)
531 W( the example above, for)128 W
6120 56845 MT
(instance, we could)
411 W( have written)410 W
10 /Courier AF
22344 XM
(\050call-prototype-method object \050+ level 1\051\051)410 W
11 /Times-Roman AF
(. It)
1095 W( is)410 W
6120 58041 MT
(customary, however, to invoke)235 W
10 /Courier AF
20928 XM
(call-prototype-method)SH
11 /Times-Roman AF
34038 XM
(with exactly the same parameters)
235 W( as the)236 W
6120 59237 MT
(original call.)SH
6120 61535 MT
(Note that the name of the original object)
679 W( and the message name are not specified in)678 W
10 /Courier AF
6120 62731 MT
(call-prototype-method)SH
11 /Times-Roman AF
(. KR)
275 W( automatically provides the right values.)SH
/Courier SF
8760 66004 MT
(kr:Apply-Prototype-Method &rest)SH
/Times-Italic SF
29880 XM
(args)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 68302 MT
(The macro)344 W
10 /Courier AF
11816 XM
(apply-prototype-method)SH
11 /Times-Roman AF
25635 XM
(is similar to)344 W
10 /Courier AF
32138 XM
(call-prototype-method)SH
11 /Times-Roman AF
(, but the method)344 W
6120 69498 MT
(defined by the prototype is invoked using)116 W
10 /Courier AF
25477 XM
(apply)SH
11 /Times-Roman AF
28868 XM
(rather than)116 W
10 /Courier AF
34108 XM
(funcall)SH
11 /Times-Roman AF
(. This)
506 W( macro may be useful for)115 W
6120 70694 MT
(methods that take)SH
10 /Courier AF
14155 XM
(&rest)SH
11 /Times-Roman AF
17430 XM
(arguments.)SH
ES
%%Page: 117 16
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.4)
SH( Reader)
1800 W( Macros)SH
51386 XM
(Page 117)SH
46800 50 8280 4486 UL
11 /Courier AF
10920 10232 MT
(kr:Method-Trace)SH
/Times-Italic SF
21480 XM
(object message-name)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 12530 MT
(This macro can be used to trace method execution.  Trace information is printed)
12 W( every time an instance of)13 W
8280 13726 MT
(the)SH
/Times-Italic SF
9908 XM
(object)SH
/Times-Roman SF
12880 XM
(is sent the message named)9 W
/Times-Italic SF
24808 XM
(message-name)SH
/Times-Roman SF
(. Since)
293 W( this expands into a call to the primitive macro)8 W
/Times-Bold SF
8280 14922 MT
(trace)SH
/Times-Roman SF
(, the Lisp expression)SH
/Times-Bold SF
20039 XM
(\050untrace\051)SH
/Times-Roman SF
24650 XM
(may be used later to eliminate trace information.)SH
8280 16118 MT
(Example:)SH
8 /Courier AF
10200 17283 MT
(\050method-trace BOX-OBJECT :print\051)SH
14 /Times-Bold AF
8280 21101 MT
(6.4. Reader Macros)SH
11 /Times-Roman AF
8280 22297 MT
(A reader macro is defined by default for the)99 W
10 /Courier AF
28747 XM
(#k<...>)SH
11 /Times-Roman AF
33322 XM
(notation, which is produced by the functions)100 W
10 /Courier AF
53880 XM
(ps)SH
11 /Times-Roman AF
8280 23493 MT
(and)SH
10 /Courier AF
10151 XM
(gv)SH
11 /Times-Roman AF
11634 XM
(when the variable)8 W
10 /Courier AF
19751 XM
(kr::*print-as-structure*)SH
11 /Times-Roman AF
34434 XM
(is non-NIL.  This macro allows objects written)8 W
8280 24689 MT
(with the)127 W
10 /Courier AF
12384 XM
(#k)SH
11 /Times-Roman AF
13986 XM
(notation to be read back in as a KR object.  If necessary, this feature may be disabled by)128 W
8280 25885 MT
(recompiling KR after pushing the keyword)SH
10 /Courier AF
27464 XM
(:no-kr-reader)SH
11 /Times-Roman AF
35539 XM
(onto the)SH
10 /Courier AF
39389 XM
(*features*)SH
11 /Times-Roman AF
45664 XM
(list.)SH
8280 28183 MT
(A second reader macro is defined for convenience, as discussed previously.  This reader macro allows)125 W
8280 29379 MT
(o-formulas to be entered using the)1 W
10 /Courier AF
23620 XM
(#f\050\051)SH
11 /Times-Roman AF
26296 XM
(notation, which expands into a call to)1 W
10 /Courier AF
43045 XM
(o-formula)SH
11 /Times-Roman AF
(. For)
279 W( example,)2 W
8280 30575 MT
(one may write:)SH
8 /Courier AF
11640 31740 MT
(\050s-value a :left #f\050gvl :top\051\051)SH
11 /Times-Roman AF
8280 33161 MT
(instead of the equivalent expression)SH
8 /Courier AF
11640 34326 MT
(\050s-value a :left \050o-formula \050gvl :top\051\051\051)SH
ES
%%Page: 118 17
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 118)
SH( KR)830 W
35983 XM
(The Type-Checking System)
SH( Chapter)
1550 W( 7)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(7. The Type-Checking System)SH
11 /Times-Roman AF
6120 10524 MT
(KR supports complete type-checking for slots.  Any slot in any)
72 W( object can be declared of a certain type.)71 W
6120 11720 MT
(Slots can be declared with one of the pre-defined types Garnet provides, which cover)
258 W( most of the)259 W
6120 12916 MT
(commonly occurring situations, or new types may be created as)
90 W( needed using the macro)89 W
10 /Courier AF
46320 XM
(def-kr-type)SH
11 /Times-Roman AF
6120 14112 MT
(\050see section 7.1\051.  Type expressions use the same syntax)
164 W( as in the Common Lisp type system.  Type)165 W
6120 15308 MT
(declarations are inherited, so it is generally not necessary to specify types for the slots)
155 W( of an instance)154 W
6120 16504 MT
(\050unless, of course, the instance is to behave differently from the prototype\051.)SH
6120 18802 MT
(Every time the value of a typed slot changes, KR checks that the new value is compatible with)
202 W( the)203 W
6120 19998 MT
(declared type of the slot.  If not, a continuable)
17 W( error is generated.  More specifically, the type of a value is)16 W
6120 21194 MT
(checked against the type specification for a slot under the following circumstances:)SH
/Symbol SF
8089 22772 MT
(\267)SH
/Times-Roman SF
8870 XM
(when the)
61 W( slot is first created using)62 W
10 /Courier AF
24608 XM
(create-instance)SH
11 /Times-Roman AF
(: if a value is specified and the value)62 W
8870 23968 MT
(is of the wrong type, an error is generated;)SH
/Symbol SF
8089 25862 MT
(\267)SH
/Times-Roman SF
8870 XM
(when a slot is set to a certain value using)SH
10 /Courier AF
27138 XM
(s-value)SH
11 /Times-Roman AF
(;)SH
/Symbol SF
8089 27756 MT
(\267)SH
/Times-Roman SF
8870 XM
(when the value in a slot is computed by a formula, and the formula is evaluated;)SH
/Symbol SF
8089 29650 MT
(\267)SH
/Times-Roman SF
8870 XM
(when the type of a slot that already contains a value is changed using)SH
10 /Courier AF
39538 XM
(s-type)SH
11 /Times-Roman AF
43413 XM
(\050see below\051.)SH
6120 31948 MT
(This mechanism ensures that potential problems are detected immediately;)
239 W( without type-checking, it)238 W
6120 33144 MT
(would be possible for a bad value in a slot to cause hard-to-track errors later on.  For example, if a slot in)28 W
6120 34340 MT
(an object is supposed)
26 W( to contain an integer value, a formula in another object would typically assume that)25 W
6120 35536 MT
(the value is correct, and compute an expression such as)51 W
10 /Courier AF
31217 XM
(\050+ 10 \050gv obj :left\051\051)52 W
11 /Times-Roman AF
(. If)
379 W( the value in the)52 W
6120 36732 MT
(slot)SH
10 /Courier AF
8082 XM
(:left)SH
11 /Times-Roman AF
11454 XM
(is incorrectly set to NIL, however, this would)
97 W( not cause an error until much later, when the)96 W
6120 37928 MT
(formula is actually recomputed and the operator + is given a null value.  When type-checking)
41 W( is enabled,)42 W
6120 39124 MT
(on the other hand, the user would)
112 W( see an error immediately when the value is set to NIL, because NIL)111 W
6120 40320 MT
(does not meet the "integer" declaration.)SH
6120 42618 MT
(The KR type-checking mechanism is independent of the lisp type system.  Even if a type)
49 W( is defined with)50 W
6120 43814 MT
(lisp's)SH
10 /Courier AF
8872 XM
(deftype)SH
11 /Times-Roman AF
(, another corresponding type must be defined with)
93 W( KR's)92 W
10 /Courier AF
38895 XM
(def-kr-type)SH
11 /Times-Roman AF
(. The)
459 W( two types)92 W
6120 45010 MT
(may have the same)
102 W( name.  The important thing is that the new type must be registered with KR's type)103 W
6120 46206 MT
(system.)SH
6120 48504 MT
(Type-checking may be turned off completely, for maximum performance in finished systems, by setting)73 W
6120 49700 MT
(the variable)23 W
10 /Courier AF
11602 XM
(kr::*types-enabled*)SH
11 /Times-Roman AF
23300 XM
(to NIL.  However, the performance)
23 W( overhead associated with type-)24 W
6120 50896 MT
(checking is small, and)
97 W( we recommend that you always keep type-checking enabled.  This ensures early)96 W
6120 52092 MT
(detection of problems that might otherwise be difficult to track down.)SH
14 /Times-Bold AF
6120 55910 MT
(7.1. Creating Types)SH
11 /Times-Roman AF
6120 57106 MT
(New types may be declared as needed with the macro)132 W
10 /Courier AF
31322 XM
(def-kr-type)SH
11 /Times-Roman AF
(, which is exported from the)
132 W( KR)133 W
6120 58302 MT
(package. The)
275 W( syntax of the macro is as follows:)SH
/Courier SF
8760 61575 MT
(kr:Def-KR-Type)SH
/Times-Italic SF
18660 XM
(name-or-type)SH
/Courier SF
25244 XM
(&optional)SH
/Times-Italic SF
31844 XM
(args body doc-string)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 63873 MT
(This macro defines a new type for KR's type-checking mechanism.  Every)
56 W( type used in slot declarations)55 W
6120 65069 MT
(must have been defined with)181 W
10 /Courier AF
19946 XM
(def-kr-type)SH
11 /Times-Roman AF
(. However,)
637 W( Garnet already)
181 W( predefines the most common)182 W
6120 66265 MT
(types, so you do not have to worry about those.)SH
6120 68563 MT
(The macro may be called in two different styles,)
139 W( one named, one unnamed.  The first style is used to)138 W
6120 69759 MT
(define types that have a name; you may then use either the name)
SH( or the corresponding expression in actual)1 W
6120 70955 MT
(type declarations.  The second style simply defines a type expression, which)
13 W( is not named and hence must)12 W
ES
%%Page: 119 18
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 7.2)
SH( Declaring)
1800 W( the Type of a Slot)SH
51386 XM
(Page 119)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(be used verbatim in type declarations.  Here are examples of the two styles:)SH
8 /Courier AF
11160 10557 MT
(\050def-kr-type my-type \050\051 '\050or keyword null\051\051)SH
11160 12287 MT
(\050def-kr-type '\050or keyword null\051\051)SH
11 /Times-Roman AF
8280 14585 MT
(The first style uses the same syntax as)
49 W( Lisp's)50 W
10 /Courier AF
28794 XM
(deftype)SH
11 /Times-Roman AF
(; the)50 W
/Times-Italic SF
35294 XM
(body)SH
/Times-Roman SF
37757 XM
(should be a type expression acceptable)50 W
8280 15781 MT
(to)SH
10 /Courier AF
9487 XM
(deftype)SH
11 /Times-Roman AF
(, and is used for typechecking when the name is used.)
76 W( In)
426 W( the current implementation of the)75 W
9 SS 
33962 16639 MT
(3)SH
11 SS 
8280 17002 MT
(type system, the)179 W
/Times-Italic SF
16211 XM
(args)SH
/Times-Roman SF
18621 XM
(parameter should always be NIL.)178 W
35318 XM
(With either example above you could then)178 W
8280 18198 MT
(specify some object's type to be)72 W
10 /Courier AF
23131 XM
('\050or keyword null\051)73 W
11 /Times-Roman AF
(. With)
421 W( the first style, however, you could also)73 W
8280 19394 MT
(specify the type to be)SH
10 /Courier AF
17963 XM
('my-type)SH
11 /Times-Roman AF
(, which may be more convenient and easier to maintain in the long run.)SH
8280 20590 MT
(The named style also allows a)37 W
/Times-Italic SF
22003 XM
(doc-string)SH
/Times-Roman SF
26836 XM
(to be specified.  This is a human-readable documentation string)36 W
8280 21786 MT
(that is associated with the type, and is useful for debugging purposes.  For example, the)
83 W( first call above)84 W
8280 22982 MT
(could be written as:)SH
8 /Courier AF
11160 25584 MT
(\050def-kr-type my-type \050\051 '\050or keyword null\051)SH
12600 26449 MT
("Either NIL or a keyword"\051)SH
14 /Times-Bold AF
8280 30267 MT
(7.2. Declaring the Type of a Slot)SH
11 /Times-Roman AF
8280 31463 MT
(Types are associated with slots either statically or dynamically.)
15 W( The)
303 W( former mechanism is by far the most)14 W
8280 32659 MT
(common, and is done at object creation time using the)167 W
9 SS 
33994 XM
(:DECLARE)SH
11 SS 
38837 XM
(option in)168 W
10 /Courier AF
43391 XM
(create-instance)SH
11 /Times-Roman AF
(. For)611 W
8280 33855 MT
(example, consider the following code:)SH
8 /Courier AF
10200 36457 MT
(\050create-instance 'R1 opal:rectangle)SH
11160 37322 MT
(:declare \050:type \050integer :left :top\051)SH
18840 38187 MT
(\050\050integer 0\051 :width :height\051)SH
18840 39052 MT
(\050\050or keyword null\051 :link-name\051\051)SH
11160 39917 MT
(\050:link-name :PARENT\051)SH
11160 40782 MT
(\050:left 10\051 \050:height \050+ 15 \050o-formula \050gvl :width\051\051\051\051\051)SH
11 /Times-Roman AF
8280 43080 MT
(The example declares that the values contained in slots)71 W
10 /Courier AF
33386 XM
(:left)SH
11 /Times-Roman AF
36732 XM
(and)SH
10 /Courier AF
38665 XM
(:top)SH
11 /Times-Roman AF
41410 XM
(must be integers, the values in)70 W
8280 44276 MT
(slots)SH
10 /Courier AF
10594 XM
(:width)SH
11 /Times-Roman AF
14490 XM
(and)SH
10 /Courier AF
16374 XM
(:height)SH
11 /Times-Roman AF
20870 XM
(must be positive integers, and the value in slot)22 W
10 /Courier AF
41722 XM
(:link-name)SH
11 /Times-Roman AF
48019 XM
(must be either a)22 W
8280 45472 MT
(keyword or NIL.  Note)
154 W( that this declaration is legal, as the type)153 W
10 /Courier AF
38284 XM
(\050or keyword null\051)153 W
11 /Times-Roman AF
49218 XM
(was declared)153 W
8280 46668 MT
(above using)295 W
10 /Courier AF
14430 XM
(def-kr-type)SH
11 /Times-Roman AF
(. Note)
865 W( also that the declarations for slots)295 W
10 /Courier AF
41954 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
45800 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
49046 XM
(:width)SH
11 /Times-Roman AF
(, and)296 W
10 /Courier AF
8280 47864 MT
(:height)SH
11 /Times-Roman AF
12755 XM
(are, in fact, not necessary, as they would normally be inherited from the prototype.)SH
8280 50162 MT
(Types can)
23 W( also be associated with slots dynamically, i.e., after object creation time.  This is done with the)22 W
8280 51358 MT
(function)SH
/Courier SF
10920 52950 MT
(kr:S-Type)SH
/Times-Italic SF
17520 XM
(object slot type)SH
/Courier SF
24840 XM
(&optional \050)SH
/Times-Italic SF
(check-p)SH
/Courier SF
36178 XM
(T\051)SH
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 55248 MT
(This function changes the type declaration)
186 W( for the)187 W
/Times-Italic SF
31885 XM
(slot)SH
/Times-Roman SF
33937 XM
(in the)187 W
/Times-Italic SF
37061 XM
(object)SH
/Times-Roman SF
40211 XM
(to the given)187 W
/Times-Italic SF
46241 XM
(type)SH
/Times-Roman SF
(. If)649 W
/Times-Italic SF
50466 XM
(check-p)SH
/Times-Roman SF
54346 XM
(is)SH
8280 56444 MT
(non-NIL \050the default\051, the function signals a continuable error)
87 W( if the value currently in the)86 W
/Times-Italic SF
49346 XM
(slot)SH
/Times-Roman SF
51297 XM
(does not)86 W
8280 57640 MT
(satisfy the new type.  Setting)93 W
/Times-Italic SF
21823 XM
(check-p)SH
/Times-Roman SF
25609 XM
(to NIL disables the error; note that this should only)
93 W( be used with)94 W
8280 58836 MT
(caution, as it may leave the system in an inconsistent state \050i.e., the)127 W
/Times-Italic SF
39656 XM
(slot)SH
/Times-Roman SF
41648 XM
(may in fact contain)
127 W( an illegal)126 W
8280 60032 MT
(value\051. The)
275 W( function returns the)SH
/Times-Italic SF
22727 XM
(type)SH
/Times-Roman SF
24834 XM
(it was given.)SH
8280 62330 MT
(The type associated with a slot can be retrieved by the function)SH
/Courier SF
10920 63922 MT
(kr:G-Type)SH
/Times-Italic SF
17520 XM
(object slot)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 65517 MT
(If a type is associated with)
178 W( the slot, it is returned \050more precisely, if the type is named, the name is)179 W
8280 66713 MT
(returned; otherwise, the type expression is returned\051.  If there is no type, the function returns NIL.)SH
10800 50 8280 69158 UL
7 SS 
9180 70659 MT
(3)SH
9 SS 
9530 70986 MT
(The presence of the)63 W
/Times-Italic SF
17082 XM
(args)SH
/Times-Roman SF
18970 XM
(parameter is to maintain consistency of syntax with the standard lisp function)64 W
10 /Courier AF
47838 XM
(deftype)SH
9 /Times-Roman AF
(. If)
353 W( you)64 W
8280 72000 MT
(need to pass a parameter to your predicate, then define the predicate using)SH
10 /Courier AF
35180 XM
(satisfies)SH
9 /Times-Roman AF
(.)SH
ES
%%Page: 120 19
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 120)
SH( KR)830 W
35983 XM
(The Type-Checking System)
SH( Chapter)
1550 W( 7)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(7.3. Type Documentation Strings)SH
11 /Times-Roman AF
6120 9334 MT
(Given a type \050for example,)
106 W( something returned by)105 W
10 /Courier AF
29231 XM
(g-type)SH
11 /Times-Roman AF
(\051, its associated documentation string can be)105 W
6120 10530 MT
(retrieved using:)SH
/Courier SF
8760 12122 MT
(kr:Get-Type-Documentation)SH
/Times-Italic SF
25920 XM
(type)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 14420 MT
(This function returns the human-readable type documentation string, or NIL if there is none.)SH
6120 16718 MT
(Given a type, it is also possible to modify its string documentation, using the function:)SH
/Courier SF
8760 18310 MT
(kr:Set-Type-Documentation)SH
/Times-Italic SF
25920 XM
(type doc-string)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 20608 MT
(This function associates the)43 W
/Times-Italic SF
18756 XM
(doc-string)SH
/Times-Roman SF
23596 XM
(with the)43 W
/Times-Italic SF
27532 XM
(type)SH
/Times-Roman SF
(. When)
361 W( an)
43 W( error message which concerns the type is)44 W
6120 21804 MT
(printed, the documentation string is printed in addition to the raw type.)SH
14 /Times-Bold AF
6120 25622 MT
(7.4. Retrieving the Predicate Expression)SH
11 /Times-Roman AF
6120 26818 MT
(When types are named,)95 W
10 /Courier AF
17096 XM
(g-type)SH
11 /Times-Roman AF
21065 XM
(returns just the name of the type, rather than its associated expression.)94 W
6120 28014 MT
(Sometimes it is useful)
45 W( to retrieve the predicate of the type associated with the type name.  The following)46 W
6120 29210 MT
(function serves this purpose:)SH
/Courier SF
8760 30802 MT
(kr:Get-Type-Definition)SH
/Times-Italic SF
23940 XM
(type-name)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 33100 MT
(Given a symbol which names a KR)
96 W( type \050i.e., a named type defined with)95 W
10 /Courier AF
39683 XM
(def-kr-type)SH
11 /Times-Roman AF
(\051, this function)95 W
6120 34296 MT
(returns the)
49 W( type expression that was used to define the type.  If no such expression is found, the function)50 W
6120 35492 MT
(returns NIL.)SH
14 /Times-Bold AF
6120 39310 MT
(7.5. Explicit Type-Checking)SH
11 /Times-Roman AF
6120 40506 MT
(In addition to KR's)
73 W( built-in type checking, which happens when the value in a slot is changed, it is also)72 W
6120 41702 MT
(possible to check whether a value is of the right type for a slot.  This can be done with the function:)SH
/Courier SF
8760 43294 MT
(kr:Check-Slot-Type)SH
/Times-Italic SF
21300 XM
(object slot value)SH
/Courier SF
29170 XM
(&optional \050)SH
/Times-Italic SF
(error-p)SH
/Courier SF
40328 XM
(T\051)SH
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 45592 MT
(The function checks whether the given)1 W
/Times-Italic SF
23474 XM
(value)SH
/Times-Roman SF
26132 XM
(is of the right type for the)1 W
/Times-Italic SF
37657 XM
(slot)SH
/Times-Roman SF
39524 XM
(in the)2 W
/Times-Italic SF
42278 XM
(object)SH
/Times-Roman SF
(. If)
279 W( not, it raises a)2 W
6120 46788 MT
(continuable error, unless)87 W
/Times-Italic SF
17499 XM
(error-p)SH
/Times-Roman SF
21099 XM
(is set to NIL; in this case, it returns a)
87 W( string which describes the error.)86 W
6120 47984 MT
(This function is called automatically by KR any time a slot is modified, so)
70 W( you normally do not have to)71 W
6120 49180 MT
(call it explicitly.)SH
14 /Times-Bold AF
6120 52998 MT
(7.6. Temporarily Disabling Types)SH
11 /Times-Roman AF
6120 54194 MT
(It is possible to execute a piece of code with type-checking temporarily disabled, using the macro)SH
/Courier SF
8760 55786 MT
(kr:With-Types-Disabled &body)SH
/Times-Italic SF
27900 XM
(body)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 57381 MT
(This macro is)
189 W( similar to others, such as)188 W
10 /Courier AF
25071 XM
(with-constants-disabled)SH
11 /Times-Roman AF
(. During)
651 W( the execution of the)188 W
/Times-Italic SF
6120 58577 MT
(body)SH
/Times-Roman SF
(, type-checking is disabled, and no errors are given if a value does)
34 W( not meet the type specification of)35 W
6120 59773 MT
(its slot.  Just as with)98 W
10 /Courier AF
15846 XM
(with-constants-disabled)SH
11 /Times-Roman AF
(, this macro should only be used with caution, as it)97 W
6120 60969 MT
(may leave the system in an inconsistent state.)SH
14 /Times-Bold AF
6120 64787 MT
(7.7. System-Defined Types)SH
11 /Times-Roman AF
6120 65983 MT
(The following type predicate can be used to declare types:)SH
/Courier SF
8760 67575 MT
(kr:Is-A-P)SH
/Times-Italic SF
15360 XM
(prototype)SH
/Courier SF
42271 XM
([)SH
/Times-Italic SF
(Type Predicate)SH
/Courier SF
(])SH
/Times-Roman SF
6120 69170 MT
(This is a type predicate, NOT a function or macro; it can only be used within type specifiers.  This)185 W
6120 70366 MT
(predicate declares that the value in a slot should be)
238 W( an instance of the)237 W
/Times-Italic SF
40113 XM
(prototype)SH
/Times-Roman SF
(, either directly or)237 W
6120 71562 MT
(indirectly. The)
305 W( predicate is true of all objects for)
15 W( which a call to the function)16 W
10 /Courier AF
40486 XM
(kr:is-a)SH
11 /Times-Roman AF
44977 XM
(would return true.)16 W
ES
%%Page: 121 20
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 7.7)
SH( System-Defined)
1800 W( Types)SH
51386 XM
(Page 121)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(For example, the following definition can be used as the type of all rectangles:)SH
8 /Courier AF
10200 10557 MT
(\050def-kr-type rect-type \050\051 '\050is-a-p opal:rectangle\051\051)SH
11 /Times-Roman AF
8280 13615 MT
(Garnet defines a number of types, which cover the types of the most commonly used slots.  This is the list)9 W
8280 14811 MT
(of pre-defined basic types:)SH
9 SS 
10780 16762 MT
(T)SH
11 SS 
11605 XM
(- Any value satisfies this type.)SH
9 SS 
10780 18457 MT
(KR-BOOLEAN)SH
11 SS 
17006 XM
(- Same as)101 W
10 /Courier AF
21860 XM
(T)SH
11 /Times-Roman AF
(, but specifically intended for)
101 W( slots which take a NIL or non-NIL value,)102 W
11880 19653 MT
(often used as boolean variables.)SH
9 SS 
10780 21348 MT
(NULL)SH
11 SS 
13455 XM
(- Only the value NIL satisfies this type.)SH
9 SS 
10780 23043 MT
(STRING)SH
11 SS 
14305 XM
(- Strings satisfy this type.)SH
9 SS 
10780 24738 MT
(KEYWORD)SH
11 SS 
15655 XM
(- All Lisp keywords satisfy this type.)SH
9 SS 
10780 26433 MT
(INTEGER)SH
11 SS 
14905 XM
(- All integers \050fixnums and bignums\051 satisfy this type.)SH
9 SS 
10780 28128 MT
(NUMBER)SH
11 SS 
14905 XM
(- This type includes all numbers: integers, floating point, complex numbers, and fractions.)SH
9 SS 
10780 29823 MT
(LIST)SH
11 SS 
12955 XM
(- Any list satisfies this type.)SH
9 SS 
10780 31518 MT
(CONS)SH
11 SS 
13455 XM
(- Any cons cell \050lists and dotted pairs\051 satisfies this type.)SH
9 SS 
10780 33213 MT
(SCHEMA)SH
11 SS 
14805 XM
(- Any non-destroyed KR object satisfies this type.)SH
8280 36801 MT
(Garnet also defines many non-basic types, which are typically used by many)
212 W( objects throughout the)211 W
8280 37997 MT
(system. The)
329 W( following types do not have a name.)
27 W( They)
331 W( are often used for slots in Opal fonts, line styles,)28 W
8280 39193 MT
(etc. Because)
275 W( they are predefined, you don't need to call)SH
10 /Courier AF
33231 XM
(def-kr-type)SH
11 /Times-Roman AF
40106 XM
(for them.)SH
8 /Courier AF
10920 41496 MT
('\050real 0 1\051)SH
35508 XM
('\050or list string\051)SH
10920 42361 MT
('\050integer 0 1\051)SH
35508 XM
('\050or list \050member t\051\051)SH
10920 43226 MT
('\050integer 0\051)SH
35508 XM
('\050or list \050satisfies schema-p\051\051)SH
10920 44091 MT
('\050integer 1\051)SH
35508 XM
('\050or string atom\051)SH
10920 44956 MT
('\050integer 2\051)SH
35508 XM
('\050or string \050satisfies schema-p\051\051)SH
10920 45821 MT
('\050member 0 1 2 3\051)SH
35508 XM
('\050or function symbol\051)SH
10920 46686 MT
('\050or null integer\051)SH
35508 XM
('\050or list integer function symbol\051)SH
10920 47551 MT
('\050or null \050integer 0\051\051)SH
35508 XM
('\050or null function symbol\051)SH
10920 48416 MT
('\050or keyword \050integer 0\051\051)SH
35508 XM
('\050or null keyword character\051)SH
10920 49281 MT
('\050or number null\051)SH
35508 XM
('\050or null string\051)SH
10920 50146 MT
('\050member :even-odd :winding\051)SH
35508 XM
('\050or null \050satisfies schema-p\051\051)SH
10920 51011 MT
('\050or \050member :below :left :right\051 list\051)SH
35508 XM
('\050or null string keyword \050satisfies schema-p\051\051)SH
10920 51876 MT
('\050or keyword character list\051)SH
35508 XM
('\050or string keyword \050satisfies schema-p\051\051)SH
ES
%%Page: 122 21
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 122)
SH( KR)830 W
35983 XM
(The Type-Checking System)
SH( Chapter)
1550 W( 7)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(The following non-basic types are named, and have associated)
318 W( documentation strings.  Users can)317 W
6120 9151 MT
(reference these types)
2 W( anywhere in Garnet programs.  To access each type's own documentation string, use)3 W
10 /Courier AF
6120 10347 MT
(get-type-documentation)SH
11 /Times-Roman AF
(.)SH
9 SS 
8620 12298 MT
(KNOWN-AS-TYPE)SH
11 SS 
16345 XM
(- a keyword \050this type is used in the)SH
10 /Courier AF
32322 XM
(:known-as)SH
11 /Times-Roman AF
37997 XM
(slot\051)SH
9 SS 
8620 13993 MT
(AGGREGATE)SH
11 SS 
14395 XM
(- an instance of)SH
10 /Courier AF
21419 XM
(opal:aggregate)SH
9 /Times-Roman AF
8620 15688 MT
(AGGREGATE-OR-NIL)SH
11 SS 
17745 XM
(- either an instance of)SH
10 /Courier AF
27548 XM
(opal:aggregate)SH
11 /Times-Roman AF
36223 XM
(or NIL)SH
9 SS 
8620 17383 MT
(BITMAP)SH
11 SS 
12295 XM
(- an instance of)SH
10 /Courier AF
19319 XM
(opal:bitmap)SH
9 /Times-Roman AF
8620 19078 MT
(BITMAP-OR-NIL)SH
11 SS 
15645 XM
(- either an instance of)SH
10 /Courier AF
25448 XM
(opal:bitmap)SH
11 /Times-Roman AF
32323 XM
(or NIL)SH
9 SS 
8620 20773 MT
(COLOR)SH
11 SS 
11945 XM
(- an instance of)SH
10 /Courier AF
18969 XM
(opal:color)SH
9 /Times-Roman AF
8620 22468 MT
(COLOR-OR-NIL)SH
11 SS 
15295 XM
(- either an instance of)SH
10 /Courier AF
25098 XM
(opal:color)SH
11 /Times-Roman AF
31373 XM
(or NIL)SH
9 SS 
8620 24163 MT
(FONT)SH
11 SS 
11245 XM
(- either an instance of)SH
10 /Courier AF
21048 XM
(opal:font)SH
11 /Times-Roman AF
26723 XM
(or)SH
10 /Courier AF
27914 XM
(opal:font-from-file)SH
9 /Times-Roman AF
8620 25858 MT
(FONT-FAMILY)SH
11 SS 
14995 XM
(- one of)SH
10 /Courier AF
18690 XM
(:fixed)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
22840 XM
(:serif)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
28181 XM
(:sans-serif)SH
9 /Times-Roman AF
8620 27553 MT
(FONT-FACE)SH
11 SS 
13845 XM
(- one of)SH
10 /Courier AF
17540 XM
(:roman)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21690 XM
(:bold)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
25240 XM
(:italic)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
31181 XM
(:bold-italic)SH
9 /Times-Roman AF
8620 29248 MT
(FONT-SIZE)SH
11 SS 
13445 XM
(- one of)SH
10 /Courier AF
17140 XM
(:small)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21290 XM
(:medium)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26040 XM
(:large)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
31381 XM
(:very-large)SH
9 /Times-Roman AF
8620 30943 MT
(FILLING-STYLE)SH
11 SS 
15495 XM
(- an instance of)SH
10 /Courier AF
22519 XM
(opal:filling-style)SH
9 /Times-Roman AF
8620 32638 MT
(FILLING-STYLE-OR-NIL)SH
11 SS 
18845 XM
(- either an instance of opal:filling-style or NIL)SH
9 SS 
8620 34333 MT
(LINE-STYLE)SH
11 SS 
14045 XM
(- an instance of)SH
10 /Courier AF
21069 XM
(opal:line-style)SH
9 /Times-Roman AF
8620 36028 MT
(LINE-STYLE-OR-NIL)SH
11 SS 
17395 XM
(- either an instance of)SH
10 /Courier AF
27198 XM
(opal:line-style)SH
11 /Times-Roman AF
36473 XM
(or NIL)SH
9 SS 
8620 37723 MT
(INTER-WINDOW-TYPE)SH
11 SS 
18345 XM
(- a single)SH
10 /Courier AF
22652 XM
(inter:interactor-window)SH
11 /Times-Roman AF
(, or a list of windows, or T, or NIL.)SH
9 SS 
8620 39418 MT
(WINDOW)SH
11 SS 
12845 XM
(- an instance of)SH
10 /Courier AF
19869 XM
(inter:interactor-window)SH
9 /Times-Roman AF
8620 41113 MT
(WINDOW-OR-NIL)SH
11 SS 
16195 XM
(- either an instance of)SH
10 /Courier AF
25998 XM
(inter:interactor-window)SH
11 /Times-Roman AF
40073 XM
(or NIL)SH
9 SS 
8620 42808 MT
(FILL-STYLE)SH
11 SS 
13895 XM
(- one of)SH
10 /Courier AF
17590 XM
(:solid)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21740 XM
(:stippled)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
28881 XM
(:opaque-stippled)SH
9 /Times-Roman AF
8620 44503 MT
(DRAW-FUNCTION)SH
11 SS 
17008 XM
(- one of)513 W
10 /Courier AF
22242 XM
(:copy, :xor, :no-op, :or, :clear, :set, :copy-)513 W
9720 45699 MT
(inverted, :invert, :and, :equiv, :nand, :nor,)
514 W( :and-inverted, :and-)515 W
9720 46895 MT
(reverse, :or-inverted, :or-reverse)SH
9 /Times-Roman AF
8620 48590 MT
(H-ALIGN)SH
11 SS 
12645 XM
(- one of)SH
10 /Courier AF
16340 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
19890 XM
(:center)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
25831 XM
(:right)SH
9 /Times-Roman AF
8620 50285 MT
(V-ALIGN)SH
11 SS 
12645 XM
(- one of)SH
10 /Courier AF
16340 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
19290 XM
(:center)SH
11 /Times-Roman AF
(, or)SH
10 /Courier AF
25231 XM
(:bottom)SH
9 /Times-Roman AF
8620 51980 MT
(DIRECTION)SH
11 SS 
13745 XM
(- either)SH
10 /Courier AF
17165 XM
(:vertical)SH
11 /Times-Roman AF
22840 XM
(or)SH
10 /Courier AF
24031 XM
(:horizontal)SH
9 /Times-Roman AF
8620 53675 MT
(DIRECTION-OR-NIL)SH
11 SS 
17095 XM
(- either)SH
10 /Courier AF
20515 XM
(:vertical)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26465 XM
(:horizontal)SH
11 /Times-Roman AF
(, or NIL)SH
9 SS 
8620 55370 MT
(ITEMS-TYPE)SH
11 SS 
14145 XM
(- list of items: \050"Label2"...\051)SH
9 SS 
8620 57065 MT
(ACCELERATORS-TYPE)SH
11 SS 
18495 XM
(- list of lists: \050\050#\134r "Alt-r" #\134meta-r\051...\051)SH
9 SS 
8620 58760 MT
(FILENAME-TYPE)SH
11 SS 
15995 XM
(- a string that represents a pathname)SH
9 SS 
8620 60455 MT
(PRIORITY-LEVEL)SH
11 SS 
16195 XM
(- an instance of)SH
10 /Courier AF
23219 XM
(inter:priority-level)SH
ES
%%Page: 123 22
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.1)
SH( Schema)
1800 W( Manipulation)SH
51386 XM
(Page 123)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(8. Functional Interface: Additional Topics)SH
11 /Times-Roman AF
8280 10524 MT
(This section describes features of KR that are seldom needed by casual Garnet)
55 W( users.  These features are)54 W
8280 11720 MT
(useful for large application programs, especially ones)
285 W( which manipulate constraints directly, or for)286 W
8280 12916 MT
(application programs which use the more advanced knowledge representation features of KR.)SH
14 /Times-Bold AF
8280 16734 MT
(8.1. Schema Manipulation)SH
11 /Courier AF
10920 19340 MT
(kr:Create-Schema)SH
/Times-Italic SF
22140 XM
(object-name)SH
/Courier SF
28236 XM
(&rest)SH
/Times-Italic SF
32196 XM
(slot-definitions)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 21638 MT
(This macro creates and returns a new object named)62 W
/Times-Italic SF
31651 XM
(object-name)SH
/Times-Roman SF
(. It)
399 W( is much more primitive than create-)61 W
8280 22834 MT
(instance, since)
146 W( it does not copy down formulas from a prototype and does not call the)147 W
10 /Courier AF
48480 XM
(:initialize)SH
11 /Times-Roman AF
8280 24030 MT
(method.)SH
8280 26328 MT
(If)SH
/Times-Italic SF
9373 XM
(object-name)SH
/Times-Roman SF
15170 XM
(is)SH
9 SS 
16265 XM
(NIL)SH
11 SS 
(, an unnamed object is created and returned.  If)85 W
/Times-Italic SF
39565 XM
(object-name)SH
/Times-Roman SF
45361 XM
(is a symbol, a special)85 W
8280 27524 MT
(variable by that name is created)
38 W( and bound to the new object.  The)39 W
/Times-Italic SF
38296 XM
(slot-definitions)SH
/Times-Roman SF
(, if present, are used to)39 W
8280 28720 MT
(create initial slots and values for the object.  Each)
5 W( slot definition should be a list whose first element is the)4 W
8280 29916 MT
(name of a slot, and whose second element is the value for that slot.)SH
10 /Courier AF
8280 32214 MT
(Create-schema)SH
11 /Times-Roman AF
16426 XM
(understands the)71 W
/Times-Bold SF
23716 XM
(:override)SH
/Times-Roman SF
28398 XM
(keyword and the)71 W
/Times-Bold SF
36216 XM
(:name-prefix)SH
/Times-Roman SF
42670 XM
(keyword; see 8.13 for)
71 W( more)72 W
8280 33410 MT
(details.)SH
8280 35708 MT
(Examples:)SH
8 /Courier AF
10200 36873 MT
(\050create-schema 'RECTANGLE-3 \050:is-a BOX-OBJECT\051 \050:x 70\051\051)SH
10200 37738 MT
(\050create-schema 'RECTANGLE-3 :override \050:y 12\051\051)SH
/Times-Italic SF
33720 XM
(; add a slot)SH
/Courier SF
10200 38603 MT
(\050create-schema NIL \050:is-a MY-GRAPHICAL-OBJECT\051\051)SH
11 SS 
10920 42301 MT
(kr:Create-Prototype)SH
/Times-Italic SF
24120 XM
(object)SH
/Courier SF
27468 XM
(&rest)SH
/Times-Italic SF
31428 XM
(slot-definitions)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 44599 MT
(This macro is slightly more primitive than create-instance.  Unlike)
137 W( create-instance, it does not allow a)136 W
8280 45795 MT
(prototype to be specified directly.  Moreover, it does)
65 W( not automatically send the)66 W
10 /Courier AF
44413 XM
(:initialize)SH
11 /Times-Roman AF
51354 XM
(message)SH
8280 46991 MT
(to the newly created)92 W
/Times-Italic SF
17810 XM
(object)SH
/Times-Roman SF
(. Like)
459 W( create-instance, it copies formulas from any prototype into the newly)92 W
8280 48187 MT
(created)SH
/Times-Italic SF
11729 XM
(object)SH
/Times-Roman SF
(.)SH
8280 50485 MT
(The following two examples are roughly equivalent:)SH
8 /Courier AF
10200 51650 MT
(\050create-instance NIL BOX-OBJECT \050:x 12\051\051)SH
10200 53380 MT
(;;; The hard way to do the same thing)SH
10200 54245 MT
(\050let \050\050a \050create-prototype NIL)SH
15480 55110 MT
(\050:is-a BOX-OBJECT\051 \050:x 12\051\051\051\051)SH
11160 55975 MT
(\050kr-send a :initialize a\051\051)SH
11 /Times-Roman AF
8280 58273 MT
(Most applications)
674 W( will find create-instance much more convenient.  The only case when)675 W
10 /Courier AF
8280 59469 MT
(create-prototype)SH
11 /Times-Roman AF
18210 XM
(should be used is when it is important that the)54 W
10 /Courier AF
39222 XM
(:initialize)SH
11 /Times-Roman AF
46151 XM
(message)SH
/Times-Italic SF
50206 XM
(not)SH
/Times-Roman SF
51941 XM
(be sent)54 W
8280 60665 MT
(to an object at creation time.)SH
10 /Courier AF
8280 62963 MT
(Create-prototype)SH
11 /Times-Roman AF
18254 XM
(also understands)
99 W( the)100 W
/Times-Bold SF
27748 XM
(:override)SH
/Times-Roman SF
32459 XM
(keyword and the)100 W
/Times-Bold SF
40364 XM
(:name-prefix)SH
/Times-Roman SF
46847 XM
(keyword; see 8.13)100 W
8280 64159 MT
(for more details.)SH
/Courier SF
10920 67432 MT
(kr:Destroy-Schema)SH
/Times-Italic SF
22800 XM
(object)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 69730 MT
(Destroys the)10 W
/Times-Italic SF
14104 XM
(object)SH
/Times-Roman SF
(. Returns)295 W
9 SS 
21344 XM
(T)SH
11 SS 
22179 XM
(if the object was destroyed,)10 W
9 SS 
34569 XM
(NIL)SH
11 SS 
36354 XM
(if it did not exist.  This function takes care)10 W
8280 70926 MT
(of properly removing all constraint dependencies)
93 W( to and from the)94 W
/Times-Italic SF
38111 XM
(object)SH
/Times-Roman SF
(. Any)
463 W( formula installed on any)94 W
ES
%%Page: 124 23
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 124)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(slot of the)SH
/Times-Italic SF
10795 XM
(object)SH
/Times-Roman SF
13758 XM
(is also destroyed.)SH
6120 10253 MT
(Usually, Garnet users do not call this function directly.)
25 W( Instead,)
324 W( they use)24 W
/Courier SF
38761 XM
(\050opal:destroy object\051)24 W
/Times-Roman SF
(,)SH
6120 11449 MT
(which performs all necessary clean-up operations and eventually calls)SH
10 /Courier AF
37181 XM
(destroy-schema)SH
11 /Times-Roman AF
(.)SH
/Courier SF
8760 14722 MT
(kr:Destroy-Slot)SH
/Times-Italic SF
19320 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 17020 MT
(Destroys the)85 W
/Times-Italic SF
12094 XM
(slot)SH
/Times-Roman SF
14044 XM
(from the)85 W
/Times-Italic SF
18246 XM
(object)SH
/Times-Roman SF
(. The)
445 W( value previously stored in the slot, if there was one, is lost.  All)86 W
6120 18216 MT
(constraints to and from)19 W
/Times-Italic SF
16644 XM
(object)SH
/Times-Roman SF
19626 XM
(are modified accordingly.  The invalidate demon is run)
19 W( on the slot before it)18 W
6120 19412 MT
(is destroyed, ensuring that any changes)
70 W( caused by this action become visible to formulas that depend on)71 W
6120 20608 MT
(the slot.  Using)35 W
10 /Courier AF
13197 XM
(destroy-slot)SH
11 /Times-Roman AF
20707 XM
(on slots that are declared constant gives a continuable error.)
35 W( Continuing)343 W
6120 21804 MT
(from the error causes the slot to be)
144 W( destroyed anyway.  This behavior can be overridden by using the)145 W
6120 23000 MT
(macro)SH
10 /Courier AF
9143 XM
(with-constants-disabled)SH
11 /Times-Roman AF
(.)SH
/Courier SF
8760 26273 MT
(kr:Name-For-Schema)SH
/Times-Italic SF
21300 XM
(object)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 28571 MT
(Given a)81 W
/Times-Italic SF
10008 XM
(object)SH
/Times-Roman SF
(, this function returns its name as a string.  The special notation)81 W
/Times-Italic SF
41886 XM
(#k<>)SH
/Times-Roman SF
44766 XM
(is never used, i.e.,)81 W
6120 29767 MT
(the name is the actual)
157 W( name of the object.  The return value should never be modified by the calling)158 W
6120 30963 MT
(program.)SH
14 /Times-Bold AF
6120 34781 MT
(8.2. Uniform Declaration Syntax)SH
11 /Times-Roman AF
6120 35977 MT
(One syntax can be used for)
74 W( all kinds of declarations associated with slots in an object.  Declarations are)73 W
6120 37173 MT
(generally specified at object creation time.  In some cases \050notably, in the case of types\051,)
219 W( it is also)220 W
6120 38369 MT
(meaningful to modify declarations after an object has)
156 W( been created; in such cases, a separate function)155 W
6120 39565 MT
(\050such as)SH
10 /Courier AF
9968 XM
(s-type)SH
11 /Times-Roman AF
(\051 is provided.  \050For details on the type-checking mechanism, see Chapter 7.\051)SH
6120 42198 MT
(The general syntax for declarations in)SH
10 /Courier AF
23040 XM
(create-instance)SH
11 /Times-Roman AF
32315 XM
(is as follows:)SH
8 /Courier AF
8040 43363 MT
(\050create-instance instance prototype)SH
9000 44228 MT
([:DECLARE \050\050declaration-1 [slot1 slot2 ...]\051)SH
14280 45093 MT
(\050declaration-2 [slot1 ...]\051)SH
14280 45958 MT
(...\051])SH
9000 46823 MT
([:DECLARE \050\050declaration-3 [slot1 ...]\051)SH
13800 47688 MT
(...\051])SH
9000 48553 MT
(slot-specifiers ...\051)SH
11 /Times-Roman AF
6120 51611 MT
(The keyword)193 W
9 SS 
12615 XM
(:DECLARE)SH
11 SS 
17484 XM
(introduces a list of declarations.  The keyword may appear more than once,)194 W
6120 52807 MT
(which allows separate groups of)
209 W( declarations.  Each group of declarations may contain one or more)208 W
6120 54003 MT
(declarations; if there is only one,)
1 W( a level of parentheses may be omitted.  Each declaration in a list consists)2 W
6120 55199 MT
(of a keyword, which specifies what property)
127 W( is being declared, followed by any number of slot names)126 W
6120 56395 MT
(\050including zero\051.  All slots are declared of the given property.)SH
6120 58693 MT
(Consider the following, rather complex example:)SH
8 /Courier AF
8040 59858 MT
(\050create-instance 'REC A)SH
9000 60723 MT
(:declare \050\050:type \050vector :BOX\051)SH
17160 61588 MT
(\050integer :LEFT :TOP\051)SH
17160 62453 MT
(\050\050or \050satisfies schema-p\051 null\051 :PARENT\051\051)SH
13800 63318 MT
(\050:type \050\050member :yes :no\051 :VALUE\051\051)SH
13800 64183 MT
(\050:update-slots :LEFT :TOP :WIDTH :HEIGHT :VALUE\051\051)SH
9000 65048 MT
(:declare \050:type \050list :IS-A-INV\051\051)SH
9000 66778 MT
(\050:left \050o-formula \050+ \050gvl :parent :left\051 \050floor \050gvl :width\051 2\051\051\051\051)SH
9000 67643 MT
(\050:top 10\051\051)SH
11 /Times-Roman AF
6120 69941 MT
(The first declaration group defines types \050in)
57 W( two separate lists\051 and the list of update-slots for the object.)58 W
6120 71137 MT
(Slot)SH
10 /Courier AF
8213 XM
(:box)SH
11 /Times-Roman AF
10932 XM
(is declared as a Lisp vector; left and top)
44 W( are declared as integers; slot)43 W
10 /Courier AF
42084 XM
(:parent)SH
11 /Times-Roman AF
46602 XM
(must be either)43 W
ES
%%Page: 125 24
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.2)
SH( Uniform)
1800 W( Declaration Syntax)SH
51386 XM
(Page 125)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(null or a valid KR object; and slot)163 W
10 /Courier AF
24800 XM
(:value)SH
11 /Times-Roman AF
28838 XM
(must contain either the value :yes or the value :no.  The)164 W
8280 9151 MT
(second declaration group shows the simplified)
62 W( form, in which only one declaration is used and therefore)61 W
8280 10347 MT
(the outside parentheses are dropped.)SH
8280 12980 MT
(The following keywords can be used to declare different slot properties:)SH
9 SS 
10780 14931 MT
(:CONSTANT)SH
11 SS 
16207 XM
(- The slots that follow are declared constant.  Note that)
102 W( \050in this case only\051 the special)103 W
11880 16127 MT
(value T indicates)
73 W( that the slots in the prototype's)72 W
10 /Courier AF
34191 XM
(:maybe-constant)SH
11 /Times-Roman AF
43538 XM
(slot should be used.  \050See)72 W
11880 17323 MT
(section 8.5.\051)SH
9 SS 
10780 19018 MT
(:IGNORED-SLOTS)SH
11 SS 
18405 XM
(- The slots that follow will not be printed by the function)SH
10 /Courier AF
43703 XM
(ps)SH
11 /Times-Roman AF
(. \050See)
275 W( section 8.14.1.\051)SH
9 SS 
10780 20713 MT
(:LOCAL-ONLY-SLOTS)SH
11 SS 
20230 XM
(- The)
75 W( values that follow should be lists of the form)76 W
/Times-Italic SF
43642 XM
(\050slot-name copy-down-p\051)76 W
/Times-Roman SF
(.)SH
11880 21909 MT
(The)SH
/Times-Italic SF
13923 XM
(slot-name)SH
/Times-Roman SF
18594 XM
(specifies the name of a slot which should be)
58 W( treated as local-only, i.e., should not)57 W
11880 23105 MT
(be inherited by the object's instances.  If)34 W
/Times-Italic SF
30265 XM
(copy-down-p)SH
/Times-Roman SF
36316 XM
(is NIL, the slot)
34 W( will have value NIL in the)35 W
11880 24301 MT
(instances. Otherwise,)
412 W( the value from the object will be copied down when instances are created)68 W
11880 25497 MT
(and marked as local; this prevents further inheritance, even if the value in the prototype)
249 W( is)250 W
11880 26693 MT
(changed. \050See)
275 W( section 8.12.\051)SH
9 SS 
10780 28388 MT
(:MAYBE-CONSTANT)SH
11 SS 
19744 XM
(- Specifies the list of slots that can be made constant)
89 W( in this object's instances)88 W
11880 29584 MT
(simply by specifying the special value T. \050See section 8.5.\051)SH
9 SS 
10780 31279 MT
(:OUTPUT)SH
11 SS 
15089 XM
(- Specifies the list)
234 W( of output slots for the object, i.e., the slots that are computed by)235 W
11880 32475 MT
(formulas and may provide useful output values for communication with other objects.)SH
9 SS 
10780 34170 MT
(:PARAMETERS)SH
11 SS 
17307 XM
(- Specifies the list of parameters for the object, i.e., the slots designed to allow users)52 W
11880 35366 MT
(to customize the appearance or behavior of)
25 W( the object.  This slot is used extensively in the Garnet)26 W
11880 36562 MT
(Gadgets to indicate user-settable slots.)SH
9 SS 
10780 38257 MT
(:SORTED-SLOTS)SH
11 SS 
18001 XM
(- Specifies)
146 W( the list of slots \050in the appropriate order\051 that)145 W
10 /Courier AF
44554 XM
(ps)SH
11 /Times-Roman AF
46174 XM
(should always print)145 W
11880 39453 MT
(first. \050See)
275 W( section 8.14.1.\051)SH
9 SS 
10780 41148 MT
(:TYPE)SH
11 SS 
13555 XM
(- Introduces type declarations for one or more slots.  \050See chapter 7.\051)SH
9 SS 
10780 42843 MT
(:UPDATE-SLOTS)SH
11 SS 
18175 XM
(- The list of)
270 W( update slots for the object, i.e., the slots that should trigger the)271 W
10 /Courier AF
11880 44039 MT
(:invalidate-demon)SH
11 /Times-Roman AF
22355 XM
(when modified.  \050See section 8.9.2.\051)SH
12 /Times-Bold AF
8280 47723 MT
(8.2.1. Declarations in Instances)SH
11 /Times-Roman AF
8280 48919 MT
(Most inherited declarations follow the standard KR scheme, where a)596 W
9 SS 
44693 XM
(:MAYBE-CONSTANT)SH
11 SS 
54164 XM
(or)SH
9 SS 
8280 50115 MT
(:UPDATE-SLOTS)SH
11 SS 
15454 XM
(declaration in an instance will completely override the declaration in the prototype.  One)50 W
8280 51311 MT
(important exception is the)44 W
9 SS 
20188 XM
(:TYPE)SH
11 SS 
23007 XM
(declaration, which is)43 W
/Times-Italic SF
32544 XM
(additive)SH
/Times-Roman SF
36406 XM
(from prototype to instance.  That is, all of)43 W
8280 52507 MT
(the types declared in)
12 W( a prototype will be valid in its instances, along with any new type declarations in the)13 W
8280 53703 MT
(instance. So)
275 W( you do not need to repeat type declarations in the instances of an object.)SH
8280 56001 MT
(For other kinds of declarations besides)217 W
9 SS 
26872 XM
(:TYPE)SH
11 SS 
(, a convenient syntax)
217 W( has been provided for specifying)216 W
8280 57197 MT
(declarations in instances.  If you want all the declarations)
93 W( in a prototype to be inherited by the instance)94 W
8280 58393 MT
(along with several new ones, you could either retype all the declarations in the instance,)
31 W( or you could use)30 W
8280 59589 MT
(the)SH
10 /Courier AF
9899 XM
(T)SH
11 /Times-Roman AF
10774 XM
(and)SH
10 /Courier AF
12637 XM
(:except)SH
11 /Times-Roman AF
17112 XM
(syntax. For)
275 W( example, it is possible to write)SH
8 /Courier AF
10200 60754 MT
(\050create-instance 'REC A)SH
11160 61619 MT
(:declare \050\050:output T :new-slot\051)SH
15960 62484 MT
(\050:parameters T :except :left\051\051\051)SH
11 /Times-Roman AF
8280 63905 MT
(to indicate that object)
194 W( REC's list of output slots includes all the ones declared in object A, plus the)195 W
10 /Courier AF
8280 65101 MT
(:new-slot)SH
11 /Times-Roman AF
(. Also,)
275 W( the list of parameter slots is equal to the one in A, minus the slot)SH
10 /Courier AF
45731 XM
(:left)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 126 25
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 126)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(Declarations made in a prototype can be eliminated with)
69 W( an empty declaration in an instance.  This may)68 W
6120 9151 MT
(be particularly convenient for declarations such as)SH
9 SS 
28507 XM
(:MAYBE-CONSTANT)SH
11 SS 
(. For)
275 W( example, the expression)SH
8 /Courier AF
9000 10316 MT
(:declare \050\050:TYPE\051 \050:MAYBE-CONSTANT\051\051)SH
11 /Times-Roman AF
6120 11737 MT
(in a call to)56 W
10 /Courier AF
11232 XM
(create-instance)SH
11 /Times-Roman AF
20563 XM
(would clear the)56 W
9 SS 
27786 XM
(:MAYBE-CONSTANT)SH
11 SS 
36717 XM
(declarations from the prototype, and)57 W
6120 12933 MT
(eliminate all type declarations.)SH
6120 15566 MT
(However, note that redefining the)10 W
9 SS 
21257 XM
(:CONSTANT)SH
11 SS 
26591 XM
(declaration may not yield the expected results.  When a slot)9 W
6120 16762 MT
(becomes constant in a prototype, that slot will be constant for all instances.  This makes sense)
106 W( because)107 W
6120 17958 MT
(any formulas in the prototype that relied on the constant slot have been eliminated, and cannot be)
11 W( restored)10 W
6120 19154 MT
(in the instance.  See section 8.5 for an elaborate discussion of constant slots.)SH
12 /Times-Bold AF
6120 22838 MT
(8.2.2. Examining Slot Declarations)SH
11 /Times-Roman AF
6120 24034 MT
(The following functions may be used to determine what slot declarations are)
55 W( associated with a particular)56 W
6120 25230 MT
(slot in an object, or)
12 W( to retrieve all slot declarations for an object.  Note that there is no function to alter the)11 W
6120 26426 MT
(declaration on an object after the object has been created,)
18 W( as most properties can only be set meaningfully)19 W
6120 27622 MT
(at object creation time.)SH
/Courier SF
8760 30895 MT
(kr:Get-Declarations)SH
/Times-Italic SF
21960 XM
(object selector)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 33193 MT
(Returns a list of all the slots in the)55 W
/Times-Italic SF
21924 XM
(object)SH
/Times-Roman SF
24942 XM
(that have associated)
55 W( declarations of the type given by)54 W
/Times-Italic SF
49163 XM
(selector)SH
/Times-Roman SF
(,)SH
6120 34389 MT
(which should be one of the keywords listed above.  If)40 W
/Times-Italic SF
30386 XM
(selector)SH
/Times-Roman SF
34183 XM
(is)SH
10 /Courier AF
35232 XM
(:type)SH
11 /Times-Roman AF
(, the return value is a list of lists,)41 W
6120 35585 MT
(such as)SH
8 /Courier AF
8040 36750 MT
(\050\050:left \050or integer null\051\051 \050:top \050or integer null\051\051\051)SH
11 /Times-Roman AF
6120 38171 MT
(If)SH
/Times-Italic SF
7163 XM
(selector)SH
/Times-Roman SF
10956 XM
(is one of other keywords, the function returns)
36 W( a list of all the slots that have the corresponding)35 W
6120 39367 MT
(declaration.)SH
/Courier SF
8760 42640 MT
(kr:Get-Slot-Declarations)SH
/Times-Italic SF
25260 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 44938 MT
(This function returns a list of all the declarations associated with the)4 W
/Times-Italic SF
36472 XM
(slot)SH
/Times-Roman SF
38341 XM
(in the)5 W
/Times-Italic SF
41101 XM
(object)SH
/Times-Roman SF
(. The)
285 W( list consists of)5 W
6120 46134 MT
(keywords, such as)76 W
9 SS 
14656 XM
(:CONSTANT)SH
11 SS 
20057 XM
(and)SH
9 SS 
21996 XM
(:UPDATE-SLOT)SH
11 SS 
(, or \050in the)
76 W( case of type declarations\051 a list of the form)75 W
10 /Courier AF
6120 47330 MT
(\050:type)SH
/Times-Italic SF
10320 XM
(type-specification)SH
/Courier SF
(\051)SH
11 /Times-Roman AF
(.)SH
14 /Times-Bold AF
6120 51148 MT
(8.3. Relations and Slots)SH
11 /Times-Roman AF
6120 53358 MT
(KR supports special slots)
241 W( called)242 W
/Times-Italic SF
21656 XM
(relations)SH
/Times-Roman SF
(. Relations)
759 W( serve two purposes: allowing inheritance, and)242 W
6120 54554 MT
(automatically creating inverse connections.  In addition to a handful of predefined relations,)
92 W( application)91 W
6120 55750 MT
(programs can create new relations as needed via the function)SH
10 /Courier AF
33178 XM
(create-relation)SH
11 /Times-Roman AF
42453 XM
(\050see below\051.)SH
6120 58048 MT
(Slots such as)102 W
10 /Courier AF
12385 XM
(:is-a)SH
11 /Times-Roman AF
(, which enable knowledge to be inherited from)
102 W( other parts of a network, are called)103 W
/Times-Italic SF
6120 59244 MT
(inheritance relations)29 W
/Times-Roman SF
(. Inheritance)
333 W( along such relations proceeds depth-first)
29 W( and)
332 W( may include any number)28 W
6120 60440 MT
(of steps.  The search terminates if a value is found, or if no other object can be reached.)SH
6120 62738 MT
(Any relation, including user-defined ones, may)
42 W( also be declared to have an inverse relation.  If this is the)43 W
6120 63934 MT
(case, KR automatically generates)
116 W( an inverse link any time the relation is used to connect one object to)115 W
6120 65130 MT
(another. Imagine,)
533 W( for instance, that we defined)129 W
10 /Courier AF
28195 XM
(:part-of)SH
11 /Times-Roman AF
33399 XM
(to be a relation having)129 W
10 /Courier AF
44155 XM
(:has-parts)SH
11 /Times-Roman AF
50559 XM
(as its)130 W
6120 66326 MT
(inverse. Adding)
703 W( object A to)
214 W( the slot)213 W
10 /Courier AF
24052 XM
(:part-of)SH
11 /Times-Roman AF
29340 XM
(of object B would automatically add B to the slot)213 W
10 /Courier AF
6120 67522 MT
(:has-parts)SH
11 /Times-Roman AF
12395 XM
(of object A, thereby creating a reverse link.)SH
6120 69820 MT
(KR automatically maintains)
79 W( all relations and inverse relations, and the application programmer does not)80 W
6120 71016 MT
(have to worry about them.  In the example above, if slot)45 W
10 /Courier AF
31586 XM
(:part-of)SH
11 /Times-Roman AF
36706 XM
(in object B is deleted, the)
45 W( value B is)44 W
ES
%%Page: 127 26
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.3)
SH( Relations)
1800 W( and Slots)SH
51386 XM
(Page 127)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(also removed from)
SH( the slot)1 W
10 /Courier AF
20350 XM
(:has-parts)SH
11 /Times-Roman AF
26626 XM
(of object A. The same would happen is object B is deleted.  This)1 W
8280 9151 MT
(ensures that the state of the system is consistent at any point in)
223 W( time, independent of the particular)222 W
8280 10347 MT
(sequence of operations.)SH
8280 12645 MT
(The following functions handle user-defined relations and slots:)SH
/Courier SF
10920 15918 MT
(kr:Create-Relation)SH
/Times-Italic SF
23460 XM
(name inherits-p)SH
/Courier SF
31055 XM
(&rest)SH
/Times-Italic SF
35015 XM
(inverses)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 18216 MT
(Declares the slot)35 W
/Times-Italic SF
15990 XM
(name)SH
/Times-Roman SF
18682 XM
(to be a relation.  The new relation will have)35 W
/Times-Italic SF
38489 XM
(inverses)SH
/Times-Roman SF
42403 XM
(\050a possibly empty)
35 W( list of slot)36 W
8280 19412 MT
(names\051 as its inverse relations.  If)107 W
/Times-Italic SF
24057 XM
(inherits-p)SH
/Times-Roman SF
28717 XM
(is non-)107 W
9 SS 
(NIL)SH
11 SS 
(,)SH
/Times-Italic SF
34006 XM
(name)SH
/Times-Roman SF
36770 XM
(becomes a relation with inheritance,)
107 W( and)106 W
8280 20608 MT
(values may be inherited through it.)SH
8280 22906 MT
(The following form defines the non-inheritance relation)136 W
10 /Courier AF
34065 XM
(:has-parts)SH
11 /Times-Roman AF
40476 XM
(and its)
136 W( two inverses,)137 W
10 /Courier AF
50280 XM
(:part-of)SH
11 /Times-Roman AF
8280 24102 MT
(and)SH
10 /Courier AF
10143 XM
(:subsystem-of)SH
11 /Times-Roman AF
(:)SH
8 /Courier AF
10200 25267 MT
(\050create-relation :has-parts NIL :part-of :subsystem-of\051)SH
11 SS 
10920 28965 MT
(kr:Relation-P)SH
/Times-Italic SF
20160 XM
(thing)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 31263 MT
(This predicate returns)SH
9 SS 
18145 XM
(NIL)SH
11 SS 
19920 XM
(if)SH
/Times-Italic SF
20867 XM
(thing)SH
/Times-Roman SF
23404 XM
(is not a relation, or a non-)SH
9 SS 
(NIL)SH
11 SS 
36512 XM
(value if it is the name of a relation slot.)SH
8280 32459 MT
(Examples:)SH
8 /Courier AF
10200 33624 MT
(\050relation-p :is-a\051 ==> non-NIL value)SH
10200 34489 MT
(\050relation-p :color\051 ==> NIL)SH
11 SS 
10920 38187 MT
(kr:Has-Slot-P)SH
/Times-Italic SF
20160 XM
(object slot)385 W
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 40485 MT
(A predicate that returns)69 W
9 SS 
19184 XM
(T)SH
11 SS 
20078 XM
(if the)69 W
/Times-Italic SF
22782 XM
(object)SH
/Times-Roman SF
25814 XM
(contains a slot)
69 W( named)68 W
/Times-Italic SF
35864 XM
(slot)SH
/Times-Roman SF
(,)SH
9 SS 
38072 XM
(NIL)SH
11 SS 
39915 XM
(otherwise. Note)
411 W( that)68 W
/Times-Italic SF
49626 XM
(slot)SH
/Times-Roman SF
51559 XM
(must be)68 W
8280 41681 MT
(local to the)SH
/Times-Italic SF
13443 XM
(object)SH
/Times-Roman SF
(; inherited slots are not considered.)SH
8280 42877 MT
(Examples:)SH
8 /Courier AF
10200 44042 MT
(\050has-slot-p RECTANGLE-1 :is-a\051  ==> T)SH
10200 44907 MT
(\050has-slot-p RECTANGLE-1 :thickness\051 ==> NIL)SH
/Times-Italic SF
32280 XM
(; not local)SH
11 /Courier AF
10920 48605 MT
(kr:DoSlots \050)SH
/Times-Italic SF
(slot-var object)SH
/Courier SF
25885 XM
(&optional)SH
/Times-Italic SF
32485 XM
(inherited)SH
/Courier SF
(\051 &rest)SH
/Times-Italic SF
41737 XM
(body)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 50903 MT
(Iterates the)67 W
/Times-Italic SF
13544 XM
(body)SH
/Times-Roman SF
16024 XM
(over all the slots of)
67 W( the)68 W
/Times-Italic SF
26754 XM
(object)SH
/Times-Roman SF
(. The)411 W
/Times-Italic SF
32456 XM
(slot-var)SH
/Times-Roman SF
36221 XM
(is bound to each slot in turn.  The)68 W
/Times-Italic SF
51865 XM
(body)SH
/Times-Roman SF
54346 XM
(is)SH
8280 52099 MT
(executed purely for side effects, and)SH
10 /Courier AF
24495 XM
(doslots)SH
11 /Times-Roman AF
28970 XM
(returns)SH
9 SS 
32299 XM
(NIL)SH
11 SS 
(. Example:)275 W
8 /Courier AF
10200 53264 MT
(\050doslots \050slot RECTANGLE-1\051)SH
11160 54129 MT
(\050format t "Slot ~S has value ~A~%")SH
15000 54994 MT
(slot \050gv RECTANGLE-1 slot\051\051\051)SH
/Times-Italic SF
10200 55859 MT
(;; prints out:)SH
/Courier SF
10200 56724 MT
(Slot :Y has value 20)SH
10200 57589 MT
(Slot :X has value 10)SH
10200 58454 MT
(Slot :IS-A has value #k<BOX-OBJECT>)SH
11 /Times-Roman AF
8280 60752 MT
(By default,)40 W
10 /Courier AF
13523 XM
(doslots)SH
11 /Times-Roman AF
18038 XM
(only iterates over the local)
40 W( slots of)39 W
/Times-Italic SF
33742 XM
(object)SH
/Times-Roman SF
(. But)
353 W( if the)39 W
/Times-Italic SF
41881 XM
(inherited)SH
/Times-Roman SF
46167 XM
(parameter is T, then)39 W
8280 61948 MT
(all slots that have been inherited from the)117 W
/Times-Italic SF
27728 XM
(object)SH
/Times-Roman SF
('s prototype will be iterated over as well.)
117 W( Note:)
511 W( Only)118 W
8280 63144 MT
(those slots)
152 W( that have actually been inherited will be included in the list of inherited slots.  If they are)151 W
8280 64340 MT
(merely defined in the prototype and have not been)46 W
10 /Courier AF
31083 XM
(gv)SH
11 /Times-Roman AF
('d in the instance, then they will)
46 W( not be included in)47 W
8280 65536 MT
(the iteration list.  See the description of the function)30 W
10 /Courier AF
31707 XM
(ps)SH
11 /Times-Roman AF
33212 XM
(in section 8.14.1 for a way to display all)
30 W( the slots)29 W
8280 66732 MT
(that could possibly be inherited by the object.)SH
ES
%%Page: 128 27
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 128)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(8.4. Constraint Maintenance)SH
11 /Times-Roman AF
6120 10348 MT
(These functions are concerned with the constraint maintenance part of KR.)SH
/Courier SF
8760 13621 MT
(kr:Change-Formula)SH
/Times-Italic SF
20640 XM
(object slot)
SH( form)385 W
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 15919 MT
(If the)88 W
/Times-Italic SF
8922 XM
(slot)SH
/Times-Roman SF
10875 XM
(in)SH
/Times-Italic SF
12094 XM
(object)SH
/Times-Roman SF
15145 XM
(contains a formula, the formula is modified to contain the)88 W
/Times-Italic SF
41657 XM
(form)SH
/Times-Roman SF
44099 XM
(as its new function.)89 W
10 /Courier AF
6120 17115 MT
(change-formula)SH
11 /Times-Roman AF
14909 XM
(works properly on any formula, regardless of whether the old function was local)
114 W( or)113 W
6120 18311 MT
(inherited from another formula.  If formula inheritance is involved, this function makes sure that)
84 W( all the)85 W
6120 19507 MT
(links are modified as appropriate.  If the)SH
/Times-Italic SF
24049 XM
(slot)SH
/Times-Roman SF
25914 XM
(does not contain a formula, nothing happens.)SH
6120 21805 MT
(Note that this function cannot)
178 W( be used to install a fixed value on a slot where a formula used to be;)177 W
10 /Courier AF
6120 23001 MT
(change-formula)SH
11 /Times-Roman AF
14795 XM
(only modifies the expression within a formula.)SH
/Courier SF
8760 26274 MT
(kr:Recompute-Formula)SH
/Times-Italic SF
22620 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 28572 MT
(This function can be called to)
102 W( force a formula to be recalculated.  It may be used in situations where a)103 W
6120 29768 MT
(formula depends on values)
21 W( which are outside of KR \050such as application data, for example\051.  The formula)20 W
6120 30964 MT
(stored in the)7 W
/Times-Italic SF
11854 XM
(slot)SH
/Times-Roman SF
13726 XM
(of the)7 W
/Times-Italic SF
16551 XM
(object)SH
/Times-Roman SF
19522 XM
(is recalculated.  Formulas which depend on the)8 W
/Times-Italic SF
40571 XM
(slot)SH
/Times-Roman SF
(, if any, are then marked)8 W
6120 32160 MT
(invalid.)SH
/Courier SF
8760 35433 MT
(kr:Mark-As-Changed)SH
/Times-Italic SF
21300 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 37731 MT
(This function may be used to trigger)
42 W( constraint propagation for a)41 W
/Times-Italic SF
35322 XM
(object)SH
/Times-Roman SF
38326 XM
(whose)SH
/Times-Italic SF
41452 XM
(slot)SH
/Times-Roman SF
43358 XM
(has been modified by)41 W
6120 38927 MT
(means other than)58 W
10 /Courier AF
14083 XM
(s-value)SH
11 /Times-Roman AF
(. Some)
391 W( applications may need to)
58 W( use destructive operations on the value in a)59 W
6120 40123 MT
(slot, and then notify the)
118 W( system that certain values were changed.)117 W
10 /Courier AF
36730 XM
(Mark-as-changed)SH
11 /Times-Roman AF
46122 XM
(is used for this)117 W
6120 41319 MT
(purpose.)SH
/Courier SF
8760 44592 MT
(kr:Copy-Formula)SH
/Times-Italic SF
19320 XM
(formula)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 46890 MT
(This function returns a copy of the given)14 W
/Times-Italic SF
24438 XM
(formula)SH
/Times-Roman SF
(, which should be a formula object.  The copy shares the)15 W
6120 48086 MT
(same prototype with the)SH
/Times-Italic SF
16996 XM
(formula)SH
/Times-Roman SF
(, and its initial value is the current cached value of the)SH
/Times-Italic SF
44519 XM
(formula)SH
/Times-Roman SF
(.)SH
/Courier SF
8760 51359 MT
(kr:Move-Formula)SH
/Times-Italic SF
19320 XM
(from-object from-slot to-object to-slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 53657 MT
(This function takes a)
24 W( formula from a slot in an object and moves it to another slot in another object.  This)23 W
6120 54853 MT
(function is needed because one cannot move a formula from one slot to another)
131 W( simply by storing the)132 W
6120 56049 MT
(formula in some temporary)
609 W( variable \050this creates potentially serious problems with formula)608 W
6120 57245 MT
(dependencies\051.)SH
/Courier SF
8760 60518 MT
(kr::Make-Into-O-Formula)SH
/Times-Italic SF
24600 XM
(formula)SH
/Courier SF
28744 XM
(&optional)SH
/Times-Italic SF
35344 XM
(compile-p)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 62816 MT
(This function modifies formulas created using the function)117 W
10 /Courier AF
33207 XM
(formula)SH
11 /Times-Roman AF
37800 XM
(to behave as if they were created)118 W
6120 64012 MT
(using)SH
10 /Courier AF
8828 XM
(o-formula)SH
11 /Times-Roman AF
(. This)
373 W( is useful for tools like Lapidary)
49 W( that need to construct formulas on the fly.  The)48 W
6120 65208 MT
(converted formulas)
211 W( will be handled properly by functions such as)212 W
10 /Courier AF
37319 XM
(opal:write-gadget)SH
11 /Times-Roman AF
(. It)
699 W( is also)212 W
6120 66404 MT
(possible to specify that the formula's)
74 W( expression be compiled during the transformation.  If)73 W
/Times-Italic SF
47440 XM
(compile-p)SH
/Times-Roman SF
52186 XM
(is)SH
6120 67600 MT
(non-NIL, the)SH
/Times-Italic SF
12137 XM
(formula)SH
/Times-Roman SF
('s expression is compiled in the process.)SH
/Courier SF
8760 70873 MT
(kr:G-Cached-Value)SH
/Times-Italic SF
20640 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
ES
%%Page: 129 28
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.5)
SH( Constant)
1800 W( Formulas)SH
51386 XM
(Page 129)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(This function)
201 W( is similar to)202 W
10 /Courier AF
20932 XM
(gv)SH
11 /Times-Roman AF
22609 XM
(if the)202 W
/Times-Italic SF
25579 XM
(slot)SH
/Times-Roman SF
27646 XM
(contains an ordinary value.  If the)202 W
/Times-Italic SF
44148 XM
(slot)SH
/Times-Roman SF
46215 XM
(contains a formula,)202 W
8280 9151 MT
(however, the)
81 W( cached value of the formula is returned even if the formula is invalid; the formula itself is)80 W
8280 10347 MT
(never re-evaluated.  Only advanced)
170 W( applications may need this function, which in some cases returns)171 W
8280 11543 MT
(out-of-date values and therefore should be used with care.)SH
/Courier SF
10920 14816 MT
(kr:Destroy-Constraint)SH
/Times-Italic SF
25440 XM
(object slot)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 17114 MT
(If the)33 W
/Times-Italic SF
10972 XM
(slot)SH
/Times-Roman SF
12870 XM
(of the)33 W
/Times-Italic SF
15746 XM
(object)SH
/Times-Roman SF
18742 XM
(contains a formula, the constraint)
33 W( is removed and replaced by the current value of)32 W
8280 18310 MT
(the formula.  The formula is discarded)
SH( and all dependencies are updated.  Dependent formulas are notified)1 W
8280 19506 MT
(that the formula has been replaced by the formula's value, even if the actual value)
10 W( does not change.  If the)9 W
/Times-Italic SF
8280 20702 MT
(slot)SH
/Times-Roman SF
10145 XM
(contains an ordinary value, this function has no effect.)SH
8280 23000 MT
(Note that the expression)218 W
/Courier SF
20088 XM
(\050s-value object)
218 W( slot \050gv object slot\051\051)219 W
/Times-Roman SF
46756 XM
(cannot be used to)219 W
8280 24196 MT
(simulate)SH
10 /Courier AF
12395 XM
(destroy-constraint)SH
11 /Times-Roman AF
(. This)
499 W( is because)112 W
10 /Courier AF
31575 XM
(s-value)SH
11 /Times-Roman AF
36162 XM
(does not remove a formula when it sets a)112 W
8280 25392 MT
(slot to an ordinary value, and thus the expression above would simply set the cached value)
22 W( of the formula)23 W
8280 26588 MT
(without removing the formula itself.)SH
/Courier SF
10920 29861 MT
(kr::With-Dependencies-Disabled &body)SH
/Times-Italic SF
35340 XM
(body)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 31456 MT
(This macro can be used to prevent the evaluation)
268 W( of)267 W
10 /Courier AF
33988 XM
(gv)SH
11 /Times-Roman AF
35730 XM
(and)SH
10 /Courier AF
37860 XM
(gvl)SH
11 /Times-Roman AF
40202 XM
(inside formulas from setting up)267 W
8280 32652 MT
(dependencies. Inside)
523 W( the body of the macro,)124 W
10 /Courier AF
29186 XM
(gv)SH
11 /Times-Roman AF
30786 XM
(and)SH
10 /Courier AF
32774 XM
(gvl)SH
11 /Times-Roman AF
34974 XM
(effectively behave \050temporarily\051 exactly like)125 W
10 /Courier AF
8280 33848 MT
(g-value)SH
11 /Times-Roman AF
(. This)
377 W( macro should be used with great care, as it may cause formulas not to be re-evaluated if)51 W
8280 35044 MT
(dependencies are not set up correctly.)SH
14 /Times-Bold AF
8280 38862 MT
(8.5. Constant Formulas)SH
11 /Times-Roman AF
8280 41072 MT
(It is possible to declare that certain slots are constant, and cause)
15 W( all formulas that only depend on constant)16 W
8280 42268 MT
(slots to be eliminated automatically.  The main advantage of)
76 W( this approach is that it reduces storage and)75 W
8280 43464 MT
(execution time.)SH
8280 45762 MT
(A slot in an object can be declared constant at object creation time.  This guarantees that the)
63 W( application)64 W
8280 46958 MT
(program will never change the value of the slot after the object is created.  When a)
65 W( formula is evaluated)64 W
8280 48154 MT
(for the first time, KR checks whether it depends exclusively on)
141 W( constant slots.  If this is the case, the)142 W
8280 49350 MT
(formula is eliminated and its storage is reused.  The slot on which the formula)
115 W( was originally installed)114 W
8280 50546 MT
(takes the value that was computed by the formula.)SH
8280 52844 MT
(A slot can become constant in)
13 W( one of three ways.  First, the slot may be declared constant explicitly.  This)14 W
8280 54040 MT
(is done by)
23 W( listing the name of the slot in the)22 W
10 /Courier AF
28049 XM
(:constant)SH
11 /Times-Roman AF
33746 XM
(slot of an object \050see below for more details\051, or)22 W
8280 55236 MT
(calling)SH
10 /Courier AF
11652 XM
(declare-constant)SH
11 /Times-Roman AF
21630 XM
(on the slot after)
103 W( its object has already been created.  For example, adding)104 W
8280 56432 MT
(the following code)
90 W( to)89 W
10 /Courier AF
18292 XM
(create-instance)SH
11 /Times-Roman AF
27656 XM
(for object)89 W
/Times-Italic SF
32354 XM
(A)SH
/Times-Roman SF
33390 XM
(will cause slots)89 W
10 /Courier AF
40654 XM
(:left)SH
11 /Times-Roman AF
44018 XM
(and)SH
10 /Courier AF
45970 XM
(:top)SH
11 /Times-Roman AF
48734 XM
(to be declared)89 W
8280 57628 MT
(constant in object)144 W
/Times-Italic SF
16747 XM
(A)SH
/Times-Roman SF
(:)SH
10 /Courier AF
18144 XM
(\050:constant '\050:left)
144 W( :top\051\051)889 W
11 /Times-Roman AF
(. Note)
565 W( that it is possible for the value of the)145 W
10 /Courier AF
8280 58824 MT
(:constant)SH
11 /Times-Roman AF
13955 XM
(slot to be computed by a formula, which is evaluated once at object creation time.)SH
8280 61122 MT
(Second, a slot may become constant because it is declared constant in the object's prototype.)
171 W( In)
616 W( the)170 W
8280 62318 MT
(example above, if object)151 W
/Times-Italic SF
19971 XM
(B)SH
/Times-Roman SF
21069 XM
(is created with)151 W
/Times-Italic SF
28211 XM
(A)SH
/Times-Roman SF
29310 XM
(as its prototype, slots)152 W
10 /Courier AF
39483 XM
(:left)SH
11 /Times-Roman AF
42910 XM
(and)SH
10 /Courier AF
44925 XM
(:top)SH
11 /Times-Roman AF
47752 XM
(will be declared)152 W
8280 63514 MT
(constant in)SH
/Times-Italic SF
13352 XM
(B)SH
/Times-Roman SF
(, even if they are not explicitly mentioned in object)SH
/Times-Italic SF
36783 XM
(B)SH
/Times-Roman SF
('s)SH
10 /Courier AF
38524 XM
(:constant)SH
11 /Times-Roman AF
44199 XM
(slot.)SH
8280 65812 MT
(Third, a slot may become constant because it)
74 W( contains a formula which depends exclusively on constant)73 W
8280 67008 MT
(slots. After)
709 W( the formula is removed, the slot on which it was installed is declared constant.)
217 W( Thus,)711 W
ES
%%Page: 130 29
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 130)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
9 SS 
28452 7817 MT
(4)SH
11 SS 
6120 8180 MT
(constants propagate)
78 W( recursively through formulas.)77 W
29606 XM
(If you cannot figure out why a formula is not being)77 W
6120 9376 MT
(eliminated, the function)137 W
10 /Courier AF
17285 XM
(garnet-debug:why-not-constant)SH
11 /Times-Roman AF
35097 XM
(and related functions in the)
137 W( Debugging)138 W
6120 10572 MT
(Tools Reference Manual may be useful.)SH
6120 12870 MT
(To facilitate the creation of the list of constant slots for an)
102 W( object, the syntax of the)101 W
10 /Courier AF
44444 XM
(:constant)SH
11 /Times-Roman AF
50220 XM
(slot is)101 W
6120 14066 MT
(extended as follows.  First, a prototype)
51 W( may specify a list of all the slots that its instances may choose to)52 W
6120 15262 MT
(declare constant.  This is done by specifying a)
282 W( list of slot names in the prototype, using the slot)281 W
10 /Courier AF
6120 16458 MT
(:maybe-constant)SH
11 /Times-Roman AF
(. When)
405 W( this is done in the prototype, an)
65 W( instance may choose to declare all of those)66 W
6120 17654 MT
(slots constants by simply adding the value)86 W
9 SS 
25575 XM
(T)SH
11 SS 
26485 XM
(to its)85 W
10 /Courier AF
29101 XM
(:constant)SH
11 /Times-Roman AF
34861 XM
(slot. Note)
445 W( that)85 W
9 SS 
41954 XM
(T)SH
11 SS 
42864 XM
(does)SH
/Times-Italic SF
45240 XM
(not)SH
/Times-Roman SF
47006 XM
(mean that)85 W
/Times-Italic SF
51758 XM
(all)SH
/Times-Roman SF
6120 18850 MT
(slots are constant; it only means that all slots in the)SH
10 /Courier AF
28823 XM
(:maybe-constant)SH
11 /Times-Roman AF
38098 XM
(list become constant.)SH
6120 21148 MT
(It is also possible for the instance to add)
215 W( more constant slots as necessary.  Consider the following)216 W
6120 22344 MT
(example:)SH
8 /Courier AF
8040 23509 MT
(\050create-instance 'PROTO NIL \050:maybe-constant '\050:left :x1 :x2 :width\051\051\051)SH
8040 24374 MT
(\050create-instance 'INST PROTO \050:constant '\050:top :height T\051\051\051)SH
11 /Times-Roman AF
6120 25795 MT
(No slot is declared)
115 W( constant in the prototype, i.e., object PROTO, because the)114 W
10 /Courier AF
41941 XM
(:maybe-constant)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 26991 MT
(does not act)
76 W( on the object itself.  However, because object INST includes the value)77 W
9 SS 
44018 XM
(T)SH
11 SS 
44920 XM
(in its)77 W
10 /Courier AF
47520 XM
(:constant)SH
11 /Times-Roman AF
6120 28187 MT
(slot, the list of constant slots in the instance is the union of the slots that)
26 W( are declared constant locally and)25 W
6120 29383 MT
(the slots named in the)216 W
10 /Courier AF
17069 XM
(:maybe-constant)SH
11 /Times-Roman AF
26560 XM
(slot of the prototype.  Therefore, the following slots are)217 W
6120 30579 MT
(constant in INST:)SH
10 /Courier AF
14217 XM
(:left, :top, :width, :height, :x1,)SH
11 /Times-Roman AF
34892 XM
(and)SH
10 /Courier AF
36755 XM
(:x2)SH
11 /Times-Roman AF
(.)SH
6120 32877 MT
(The slot)33 W
10 /Courier AF
10036 XM
(:maybe-constant)SH
11 /Times-Roman AF
19344 XM
(is typically used in prototypes to specify the list of all the parameters)
33 W( of the)32 W
6120 34073 MT
(instances, i.e., the slots that an)
138 W( instance may customize to obtain gadgets with the desired appearance.)139 W
6120 35269 MT
(Consider, for example, the prototype of a gadget.  If the application is such that a)
114 W( gadget instance will)113 W
6120 36465 MT
(never be changed after)
817 W( it is created, the application programmer may simply specify)818 W
10 /Courier AF
6120 37661 MT
(\050:constant '\050T\051\051)283 W
11 /Times-Roman AF
(. This)
841 W( informs the system that all parameters declared by the creator)
283 W( of the)282 W
6120 38857 MT
(prototype are, in fact, constant, and formulas that depend on them can be)
97 W( eliminated once the gadget is)98 W
6120 40053 MT
(created. All)
275 W( of the standard objects and gadgets supply a)SH
10 /Courier AF
31472 XM
(:maybe-constant)SH
11 /Times-Roman AF
40747 XM
(slot.)SH
6120 42351 MT
(The syntax of the)69 W
10 /Courier AF
14338 XM
(:constant)SH
11 /Times-Roman AF
20082 XM
(slot also allows certain slots that appeared in the)68 W
10 /Courier AF
42231 XM
(:maybe-constant)SH
11 /Times-Roman AF
51574 XM
(list)SH
6120 43547 MT
(to be explicitly excluded from the constant slots in an object.  This can)
154 W( be done by using the marker)155 W
10 /Courier AF
6120 44743 MT
(:except)SH
11 /Times-Roman AF
10735 XM
(in the)140 W
10 /Courier AF
13765 XM
(:constant)SH
11 /Times-Roman AF
19580 XM
(slot. The)
555 W( slots following this)
140 W( marker are removed from the list that was)139 W
6120 45939 MT
(specified by the prototype.  If a slot was not mentioned in the prototype's)94 W
10 /Courier AF
39971 XM
(:maybe-constant)SH
11 /Times-Roman AF
49341 XM
(slot, the)95 W
10 /Courier AF
6120 47135 MT
(:except)SH
11 /Times-Roman AF
10680 XM
(marker has no effect on)
85 W( the slot.  The following is a comprehensive example of the syntax of)84 W
6120 48331 MT
(the)SH
10 /Courier AF
7739 XM
(:constant)SH
11 /Times-Roman AF
13414 XM
(slot:)SH
8 /Courier AF
8040 49496 MT
(\050create-instance 'INST-2 PROTO)SH
9480 50361 MT
(\050:CONSTANT '\050:top :height T :EXCEPT :width :x2\051\051\051)SH
11 /Times-Roman AF
6120 52659 MT
(As a result, these slots are declared constant in object INST-2:)SH
10 /Courier AF
33794 XM
(:left, :top, :height,)SH
11 /Times-Roman AF
46669 XM
(and)SH
10 /Courier AF
48532 XM
(:x1)SH
11 /Times-Roman AF
(.)SH
6120 54957 MT
(It is an error to set slots that have been declared constant.  This can happen in three)
57 W( cases: a slot may be)58 W
6120 56153 MT
(set using)33 W
10 /Courier AF
10342 XM
(s-value)SH
11 /Times-Roman AF
14850 XM
(after having been declared constant, a call to)33 W
10 /Courier AF
34995 XM
(create-instance)SH
11 /Times-Roman AF
44303 XM
(may redefine in the)32 W
6120 57349 MT
(instance a slot that was declared)
SH( constant in the prototype, or)1 W
10 /Courier AF
33190 XM
(destroy-slot)SH
11 /Times-Roman AF
40666 XM
(may be used.  In all cases, a)1 W
6120 58545 MT
(continuable error is signaled.  Note that this behavior can be overridden by wrapping the code in the)162 W
6120 59741 MT
(macro)SH
10 /Courier AF
9143 XM
(with-constants-disabled)SH
11 /Times-Roman AF
23218 XM
(\050see below\051.)SH
/Courier SF
8760 63014 MT
(kr:Declare-Constant)SH
/Times-Italic SF
21960 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 65312 MT
(The function)44 W
10 /Courier AF
12134 XM
(declare-constant)SH
11 /Times-Roman AF
22053 XM
(may be used to declare)
44 W( slots constant in an object after creation time.)45 W
10800 50 6120 68144 UL
7 SS 
7020 69645 MT
(4)SH
9 SS 
7370 69972 MT
(In the most elegant programming style, a minimum number of constants)
63 W( will be declared in an object, and formulas will be)62 W
6120 70986 MT
(allowed to become constant because of their dependencies on the constant slots \050rather)
160 W( than bluntly declaring the formulas)161 W
6120 72000 MT
(constant\051. This)
225 W( is certaintly not a requirement of programming with constants, however.)SH
ES
%%Page: 131 30
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.7)
SH( Tracking)
1800 W( Formula Dependencies)SH
51386 XM
(Page 131)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(The function takes an object and a slot,)
11 W( which is declared constant.  The behavior is the same as if the slot)10 W
8280 9151 MT
(had been declared in the)96 W
10 /Courier AF
19723 XM
(:constant)SH
11 /Times-Roman AF
25494 XM
(slot at instance creation time, although)
96 W( of course the change does)97 W
8280 10347 MT
(not affect formulas which have already been evaluated.  The)104 W
10 /Courier AF
36163 XM
(:constant)SH
11 /Times-Roman AF
41942 XM
(slot of the object is)
104 W( modified)103 W
8280 11543 MT
(accordingly: the new slot)
194 W( is added, and it is removed from the)195 W
10 /Courier AF
38080 XM
(:except)SH
11 /Times-Roman AF
42750 XM
(portion if it was originally)195 W
8280 12739 MT
(declared there.  As a special case, if the second argument is)242 W
9 SS 
37570 XM
(T)SH
11 SS 
38636 XM
(all the slots that appear in the slot)241 W
10 /Courier AF
8280 13935 MT
(:maybe-constant)SH
11 /Times-Roman AF
17807 XM
(\050typically inherited from a prototype\051 are declared)
252 W( constant.  This is similar to)253 W
8280 15131 MT
(specifying T in the)SH
10 /Courier AF
16834 XM
(:constant)SH
11 /Times-Roman AF
22509 XM
(slot at instance creation time.)SH
8280 17429 MT
(If)SH
10 /Courier AF
9804 XM
(declare-constant)SH
11 /Times-Roman AF
20196 XM
(is executed on a slot while constants are disabled \050i.e.,)
517 W( inside of a)516 W
10 /Courier AF
8280 18625 MT
(with-constants-disabled)SH
11 /Times-Roman AF
22355 XM
(body\051, the call will have no effect and the slot will not become constant.)SH
/Courier SF
10920 21898 MT
(kr:With-Constants-Disabled &body)SH
/Times-Italic SF
32700 XM
(body)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 24196 MT
(The macro)418 W
10 /Courier AF
14124 XM
(with-constants-disabled)SH
11 /Times-Roman AF
28617 XM
(may be used to)
418 W( cause all constant declarations to be)419 W
8280 25392 MT
(temporarily ignored.)
181 W( During)
636 W( the execution of the body, no error is given when slots are set that are)180 W
8280 26588 MT
(declared constant.  Additionally, constant declarations have no effect when)318 W
10 /Courier AF
44752 XM
(create-instance)SH
11 /Times-Roman AF
54346 XM
(is)SH
8280 27784 MT
(executed inside this macro.  This macro, therefore, is intended for experienced users only.)SH
8280 30082 MT
(Several functions in the)233 W
10 /Courier AF
19904 XM
(garnet-debug)SH
11 /Times-Roman AF
27612 XM
(package \050loaded)
233 W( with Garnet by default\051 can be helpful in)232 W
8280 31278 MT
(determining which slots in your application)
115 W( should be declared constant for maximum benefit, and can)116 W
8280 32474 MT
(help you determine why some slots are not)
98 W( becoming constant.  These functions are documented in the)97 W
8280 33670 MT
(Debugging Tools Reference Manual, which starts on page 461:)SH
8 /Courier AF
10200 34883 MT
(gd:Record-From-Now)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 36613 MT
(gd:Suggest-Constants)SH
/Times-Italic SF
20280 XM
(object)SH
/Courier SF
22714 XM
(&key)SH
/Times-Italic SF
25114 XM
(max)SH
/Courier SF
26927 XM
(\050)SH
/Times-Italic SF
(recompute-p)SH
/Courier SF
31929 XM
(T\051 \050)SH
/Times-Italic SF
(level)SH
/Courier SF
35838 XM
(1\051)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 38343 MT
(gd:Explain-Formulas)SH
/Times-Italic SF
19800 XM
(aggregate)SH
/Courier SF
23523 XM
(&optional \050)SH
/Times-Italic SF
(limit)SH
/Courier SF
30749 XM
(50\051)SH
/Times-Italic SF
32669 XM
(eliminate-useless-p)SH
/Courier SF
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 40073 MT
(gd:Find-Formulas)SH
/Times-Italic SF
18360 XM
(aggregate)SH
/Courier SF
22083 XM
(&optional \050)SH
/Times-Italic SF
(only-totals-p)SH
/Courier SF
31929 XM
(T\051 \050)SH
/Times-Italic SF
(limit)SH
/Courier SF
35795 XM
(50\051)SH
/Times-Italic SF
37715 XM
(from)SH
/Courier SF
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 41803 MT
(gd:Count-Formulas)SH
/Times-Italic SF
18840 XM
(object)SH
/Courier SF
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 43533 MT
(gd:Why-Not-Constant)SH
/Times-Italic SF
19800 XM
(object slot)200 W
/Courier SF
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
14 /Times-Bold AF
8280 47351 MT
(8.6. Efficient Path Definitions)SH
11 /Times-Roman AF
8280 49561 MT
(The function)49 W
10 /Courier AF
14304 XM
(kr-path)SH
11 /Times-Roman AF
18828 XM
(can be used to improve the efficiency of formula access to slots that are obtained)50 W
8280 50757 MT
(via indirect links.  Inside formula expressions, macros such as)149 W
10 /Courier AF
37324 XM
(gv)SH
11 /Times-Roman AF
38948 XM
(are used to access)
149 W( a slot indirectly,)148 W
8280 51953 MT
(traversing a number of objects until the last slot is obtained.)
97 W( This)
471 W( is sometimes called a)98 W
/Times-Italic SF
48676 XM
(link)SH
/Times-Roman SF
50699 XM
(or a)98 W
/Times-Italic SF
52849 XM
(path)SH
/Times-Roman SF
(.)SH
8280 53149 MT
(For example, the expression)239 W
10 /Courier AF
21913 XM
(\050gvl :parent :parent :left\051)239 W
11 /Times-Roman AF
39344 XM
(will access the)239 W
10 /Courier AF
46750 XM
(:left)SH
11 /Times-Roman AF
50264 XM
(slot in the)238 W
8280 54345 MT
(parent's parent.  If the application program can guarantee that the intermediate path)
69 W( will not change, the)70 W
8280 55541 MT
(function)SH
10 /Courier AF
12221 XM
(kr-path)SH
11 /Times-Roman AF
16696 XM
(provides better performance.  The expression above could be written as:)SH
8 /Courier AF
10200 56706 MT
(\050gv \050kr-path 0 :parent :parent\051 :left\051)SH
11 /Times-Roman AF
8280 58127 MT
(The call to)58 W
10 /Courier AF
13433 XM
(kr-path)SH
11 /Times-Roman AF
17965 XM
(computes the object's parent's parent only once, and stores the result as part of the)57 W
8280 59323 MT
(formula. Subsequent)
413 W( evaluations)
69 W( of the formula only need to access the)70 W
10 /Courier AF
41038 XM
(:left)SH
11 /Times-Roman AF
44383 XM
(slot of the target object.)70 W
8280 60519 MT
(The syntax is:)SH
/Courier SF
10920 63050 MT
(kr:KR-Path)SH
/Times-Italic SF
18180 XM
(path-number)SH
/Courier SF
24522 XM
(&rest)SH
/Times-Italic SF
28482 XM
(slots)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 65784 MT
(The path-number is a 0-based)
288 W( integer which indicates the number of this path within the formula)287 W
8280 66980 MT
(expression. In)
389 W( most cases, a formula contains only one call to)57 W
10 /Courier AF
36518 XM
(kr-path)SH
11 /Times-Roman AF
(, and path-number is)
57 W( 0.  If more)58 W
8280 68176 MT
(than one path appears in a formula expression, different numbers should be used.  For example,)SH
8 /Courier AF
10200 69341 MT
(\050or \050gv \050kr-path 0 :parent :parent\051 :left\051)SH
12120 70206 MT
(\050gv \050kr-path 1 :alternate :parent\051 :left\051\051)SH
11 /Times-Roman AF
8280 71627 MT
(Note that)SH
10 /Courier AF
12618 XM
(kr-path)SH
11 /Times-Roman AF
17093 XM
(can only be used inside a formula expression.)SH
ES
%%Page: 132 31
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 132)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(8.7. Tracking Formula Dependencies)SH
11 /Times-Roman AF
6120 9334 MT
(The function)95 W
10 /Courier AF
12236 XM
(kr::i-depend-on)SH
11 /Times-Roman AF
21606 XM
(can be used to find out all the objects and slots upon which a certain)94 W
6120 10530 MT
(formula depends directly.  The syntax is:)SH
/Courier SF
8760 13061 MT
(kr::I-Depend-On)SH
/Times-Italic SF
19320 XM
(object slot)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 15795 MT
(If the)120 W
/Times-Italic SF
8986 XM
(slot)SH
/Times-Roman SF
10971 XM
(in the)120 W
/Times-Italic SF
13961 XM
(object)SH
/Times-Roman SF
17044 XM
(does not contain a)
120 W( formula, this function returns NIL.  Otherwise, the function)121 W
6120 16991 MT
(returns a list of dotted)
133 W( pairs of the form)132 W
10 /Courier AF
24877 XM
(\050obj . slot\051)132 W
11 /Times-Roman AF
(, which contains all the slots upon which the)132 W
6120 18187 MT
(formula depends.  Note that this is the)
2 W( list of only those slots that are used by the formula directly; if some)3 W
6120 19383 MT
(of those)
185 W( slots contain other formulas,)184 W
10 /Courier AF
23814 XM
(kr::i-depend-on)SH
11 /Times-Roman AF
33273 XM
(does not pursue those additional formulas')184 W
6120 20579 MT
(dependencies.)SH
6120 23212 MT
(Example:)SH
8 /Courier AF
8040 24377 MT
(\050create-instance 'A NIL \050:left 7\051\051)SH
8040 25242 MT
(\050create-instance 'B A \050:left 14\051 \050:top #f\050+ \050gvl :left\051 \050gv a :left\051\051\051\051)SH
8040 26107 MT
(\050gv b :top\051)
SH( ;)
1920 W( set up the dependencies)SH
8040 27837 MT
(\050kr::i-depend-on B :top\051)SH
9960 28702 MT
(==> \050\050B . :LEFT\051 \050A . :LEFT\051\051)SH
14 /Times-Bold AF
6120 32520 MT
(8.8. Formula Meta-Information)SH
11 /Times-Roman AF
6120 33716 MT
(It is possible to associate arbitrary)
124 W( information \050sometimes known as meta-information\051 with formulas,)125 W
6120 34912 MT
(for example for documentation or)
95 W( debugging purposes.  Meta-information is internally represented by a)94 W
6120 36108 MT
(KR object which is)
60 W( associated with the formula; this allows essentially any slot to be added to formulas.)61 W
6120 37304 MT
(Meta-information can be inherited from parent)
25 W( formulas, and is copied appropriately by functions such as)24 W
10 /Courier AF
6120 38500 MT
(copy-formula)SH
11 /Times-Roman AF
(.)SH
6120 40798 MT
(In addition, it is possible to access built-in formula information)
70 W( \050such as the lambda expression that was)71 W
6120 41994 MT
(used to create the formula\051 using exactly)
119 W( the same mechanism that is used to access meta-information.)118 W
6120 43190 MT
(This provides a single, well-documented way to access all information associated with a formula.)SH
12 /Times-Bold AF
6120 46874 MT
(8.8.1. Creating Meta-Information)SH
11 /Times-Roman AF
6120 48070 MT
(Meta-information can be specified statically at formula creation time, and also dynamically for already)118 W
6120 49266 MT
(existing formulas.  Static meta-information is specified by additional parameters)
359 W( to the functions)358 W
10 /Courier AF
6120 50462 MT
(formula)SH
11 /Times-Roman AF
11085 XM
(and)SH
10 /Courier AF
13438 XM
(o-formula)SH
11 /Times-Roman AF
(. The)
1255 W( additional parameters are slot specifications, in the style of)491 W
10 /Courier AF
6120 51658 MT
(create-instance)SH
11 /Times-Roman AF
15484 XM
(\050except that, of course, special)89 W
10 /Courier AF
29580 XM
(create-instance)SH
11 /Times-Roman AF
38944 XM
(keywords such as)88 W
9 SS 
47241 XM
(:DECLARE)SH
11 SS 
52004 XM
(or)SH
9 SS 
6120 52854 MT
(:OVERRIDE)SH
11 SS 
11195 XM
(are not supported\051.  For example, the expression:)SH
8 /Courier AF
8520 54019 MT
(\050o-formula \050gv a :top\051 15)SH
9480 54884 MT
(\050:creator 'GILT\051 \050:date "today"\051\051)SH
11 /Times-Roman AF
6120 56305 MT
(creates a new formula with initial value 15, and two meta-slots named)SH
10 /Courier AF
37247 XM
(:creator)SH
11 /Times-Roman AF
42322 XM
(and)SH
10 /Courier AF
44185 XM
(:date)SH
11 /Times-Roman AF
(.)SH
6120 58603 MT
(Note that in order to specify meta-information statically, one has to specify the)
7 W( default initial value for the)8 W
6120 59799 MT
(formula, which is also an optional parameter.)SH
6120 62097 MT
(Meta-information may also be created dynamically, using the function)SH
/Courier SF
8760 63689 MT
(kr:S-Formula-Value)SH
/Times-Italic SF
21300 XM
(formula slot value)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
6120 65987 MT
(This function sets the value of the meta-slot)63 W
/Times-Italic SF
26176 XM
(slot)SH
/Times-Roman SF
28104 XM
(in the)62 W
/Times-Italic SF
30978 XM
(formula)SH
/Times-Roman SF
34799 XM
(to be the specified)62 W
/Times-Italic SF
43355 XM
(value)SH
/Times-Roman SF
(. If)
399 W( the)62 W
/Times-Italic SF
49436 XM
(formula)SH
/Times-Roman SF
6120 67183 MT
(does not already have an associated meta-object, one is created.)SH
6120 69481 MT
(It is not possible to use this function to alter)
176 W( one of the built-in formula slots, such as the formula's)177 W
6120 70677 MT
(lambda expression or its list of dependencies.)SH
ES
%%Page: 133 32
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.8)
SH( Formula)
1800 W( Meta-Information)SH
51386 XM
(Page 133)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(8.8.2. Accessing Meta-Information)SH
11 /Times-Roman AF
8280 9200 MT
(Meta-information can be retrieved using the function)58 W
10 /Courier AF
32297 XM
(g-formula-value)SH
11 /Times-Roman AF
(. In)
391 W( addition to slots that were)57 W
8280 10396 MT
(specified explicitly,)
104 W( this function also makes it possible to retrieve the values of all the special formula)105 W
8280 11592 MT
(slots, such as the formula's parent or its compiled expression.)SH
/Courier SF
10920 13184 MT
(kr:G-Formula-Value)SH
/Times-Italic SF
23460 XM
(formula slot)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 14779 MT
(The function returns the value of meta-slot)159 W
/Times-Italic SF
28484 XM
(slot)SH
/Times-Roman SF
30508 XM
(for the)159 W
/Times-Italic SF
34002 XM
(formula)SH
/Times-Roman SF
(. If)
593 W( the latter is not a formula,)
159 W( or the)158 W
8280 15975 MT
(meta-slot is not present, the function returns NIL.  If)
200 W( the)201 W
/Times-Italic SF
35439 XM
(formula)SH
/Times-Roman SF
39399 XM
(inherits from some other formula,)201 W
8280 17171 MT
(inheritance is used to find the meta-slot.)SH
8280 18367 MT
(As a convenience,)8 W
/Times-Italic SF
16610 XM
(slot)SH
/Times-Roman SF
18483 XM
(can also be the name of an internal formula slot, i.e., one of the)
8 W( structure slots used)7 W
8280 19563 MT
(by KR when handling formulas.  Such slots should be treated)
84 W( strictly as read-only, and should never be)85 W
8280 20759 MT
(modified by application programs.  The built-in slot names are:)SH
9 SS 
10780 22710 MT
(:DEPENDS-ON)SH
11 SS 
16955 XM
(- returns the object, or list of objects, on which the formula depends.)SH
9 SS 
10780 24405 MT
(:SCHEMA)SH
11 SS 
15055 XM
(- returns the object on which the formula is currently installed.)SH
9 SS 
10780 26100 MT
(:SLOT)SH
11 SS 
13555 XM
(- returns the slot on which the formula is currently installed.)SH
9 SS 
10780 27795 MT
(:CACHED-VALUE)SH
11 SS 
18497 XM
(- returns the current cached value of)
142 W( the formula, whether or not the formula is)141 W
11880 28991 MT
(currently valid.)SH
9 SS 
10780 30686 MT
(:VALID)SH
11 SS 
14105 XM
(- returns T if the formula is currently valid, NIL otherwise.)SH
9 SS 
10780 32381 MT
(:PATH)SH
11 SS 
13655 XM
(- returns the path accessor associated with the formula, if any.)SH
9 SS 
10780 34076 MT
(:IS-A)SH
11 SS 
13055 XM
(- returns the parent formula, or NIL if none exists.)SH
9 SS 
10780 35771 MT
(:FUNCTION)SH
11 SS 
15855 XM
(- returns the compiled formula expression.)SH
9 SS 
10780 37466 MT
(:LAMBDA)SH
11 SS 
15205 XM
(- returns the original formula expression, as a lambda list.)SH
9 SS 
10780 39161 MT
(:IS-A-INV)SH
11 SS 
15073 XM
(- returns the list of formulas that inherit from the)118 W
/Times-Italic SF
37943 XM
(formula)SH
/Times-Roman SF
(, or NIL.  If there)
118 W( is only one)119 W
11880 40357 MT
(such formula, a single value \050not a list\051 is returned.)SH
9 SS 
10780 42052 MT
(:NUMBER)SH
11 SS 
15155 XM
(- returns the internal field which encodes the valid/invalid bit, and the cycle counter.)SH
9 SS 
10780 43747 MT
(:META)SH
11 SS 
13855 XM
(- returns the entire meta-object associated with the formula, or NIL if none exists.)SH
8280 47335 MT
(When the function)9 W
10 /Courier AF
16767 XM
(ps)SH
11 /Times-Roman AF
18250 XM
(is given a formula, it can print associated meta-information.  The latter is printed as)8 W
8280 48531 MT
(an object, immediately after the formula itself.  For example:)SH
8 /Times-Bold AF
10200 49733 MT
(lisp>)SH
/Courier SF
12336 XM
(\050create-instance 'A NIL)SH
14040 50598 MT
(\050:left \050o-formula \050gvl :parent :left\051 100)SH
22680 51463 MT
(;; Supply meta-information here)SH
22680 52328 MT
(\050:name "Funny formula"\051)SH
22680 53193 MT
(\050:creator "Application-1"\051\051\051\051)SH
10200 54058 MT
(#k<A>)SH
/Times-Bold SF
10200 55788 MT
(lisp>)SH
/Courier SF
12336 XM
(\050ps \050get-value A :left\051\051)
SH( ;)
4800 W( prints the following:)SH
10200 56653 MT
({F8)SH
11160 57518 MT
(lambda: \050gvl)
3360 W( :parent :left\051)SH
11160 58383 MT
(cached value:  \050100 . NIL\051)SH
11160 59248 MT
(on schema A, slot :LEFT)SH
11160 60113 MT
(})SH
11160 60978 MT
(---- meta information \050S7\051:)SH
10200 61843 MT
({S7)SH
11160 62708 MT
(:NAME =  "Funny formula")SH
11160 63573 MT
(:CREATOR =  "Application-1")SH
11160 64438 MT
(})SH
ES
%%Page: 134 33
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 134)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(8.9. Demons)SH
11 /Times-Roman AF
6120 10348 MT
(The demon mechanism allows an application program to perform a certain action when a value is)259 W
6120 11544 MT
(modified. This)
445 W( mechanism, which is totally controlled by the application program,)
85 W( is independent from)84 W
6120 12740 MT
(value propagation.  Regular Garnet users do)
84 W( not need to know the contents of this section, since Garnet)85 W
6120 13936 MT
(already defines all appropriate demons.  Garnet applications should never modify)
158 W( the default demons,)157 W
6120 15132 MT
(which are defined by Opal and)
195 W( automatically update the graphical representation of the application's)196 W
6120 16328 MT
(objects.)SH
12 /Times-Bold AF
6120 20012 MT
(8.9.1. Overview of the Demon Mechanism)SH
11 /Times-Roman AF
6120 21208 MT
(A demon is an application-defined procedural attachment to a KR)
169 W( schema.  Demons are user-defined)168 W
6120 22404 MT
(fragments of code which are invoked when certain actions are performed on a schema.  Whenever)
125 W( the)126 W
6120 23600 MT
(value of a slot in a schema is modified \050either directly or as the result of)
68 W( value propagation\051, KR checks)67 W
6120 24796 MT
(whether a demon should be invoked.  This allows application programs to be)
7 W( notified every time a change)8 W
6120 25992 MT
(occurs.)SH
6120 28290 MT
(Two separate demons invoked at different times allow an application program to have fine control)
88 W( over)87 W
6120 29486 MT
(the handling of value changes.  These demons)
366 W( are only invoked on slots that are listed in the)367 W
9 SS 
6120 30682 MT
(:UPDATE-SLOTS)SH
11 SS 
13245 XM
(list of a schema \050see section 8.9.2\051.)SH
6120 32980 MT
(The first demon is the)44 W
/Times-Italic SF
16268 XM
(invalidate demon)43 W
/Times-Roman SF
(. This)
361 W( demon is invoked every time a formula is invalidated.  At)43 W
6120 34176 MT
(the time the demon is invoked, the formula has not yet been re-evaluated,)
132 W( and thus it contains the old)133 W
6120 35372 MT
(cached value.  This demon is contained in the)128 W
10 /Courier AF
27616 XM
(:invalidate-demon)SH
11 /Times-Roman AF
38219 XM
(slot of an)
128 W( object.  This makes it)127 W
6120 36568 MT
(possible for different objects to provide customized demons to handle slot invalidation.)SH
6120 38866 MT
(The second demon is the pre-set demon.  It is invoked immediately before the)
178 W( value in a formula is)179 W
6120 40062 MT
(actually modified, and it is passed the new value.)
45 W( This)
363 W( allows the pre-set demon to record the difference)44 W
6120 41258 MT
(between the old and the new value, if needed.  This)
649 W( demon is stored in the variable)650 W
10 /Courier AF
6120 42454 MT
(kr::*PRE-SET-DEMON*)SH
11 /Times-Roman AF
(. Garnet)
275 W( does not use the pre-set demon.)SH
6120 44752 MT
(The relationship between value propagation and demon invocation is best illustrated by showing the)209 W
6120 45948 MT
(complete sequence of events for the invalidate demon.  This is)
51 W( what happens when)52 W
10 /Courier AF
43523 XM
(s-value)SH
11 /Times-Roman AF
48050 XM
(is called to)52 W
6120 47144 MT
(set slot)SH
/Times-Bold SF
9482 XM
(s)SH
/Times-Roman SF
10185 XM
(of schema S to value)SH
/Times-Bold SF
19624 XM
(v)SH
/Times-Roman SF
(:)SH
8320 48597 MT
(1.)SH
9420 XM
(If slot)SH
/Times-Bold SF
12292 XM
(s)SH
/Times-Roman SF
12995 XM
(already contains value)SH
/Times-Bold SF
23104 XM
(v)SH
/Times-Roman SF
(, nothing happens.)SH
8320 50491 MT
(2.)SH
9420 XM
(Otherwise, if slot)25 W
/Times-Bold SF
17377 XM
(s)SH
/Times-Roman SF
18105 XM
(should trigger demons, the)
25 W( demon is invoked.  The demon is called with)24 W
9420 51687 MT
(schema S in its)SH
/Times-Italic SF
16326 XM
(old)SH
/Times-Roman SF
18007 XM
(state, which means that slot)SH
/Times-Bold SF
30411 XM
(s)SH
/Times-Roman SF
31114 XM
(still contains its old value.)SH
8320 53581 MT
(3.)SH
9420 XM
(The change is recursively propagated.)
89 W( All)
455 W( slots whose value is a formula that depends on)90 W
9420 54777 MT
(slot)SH
/Times-Bold SF
11354 XM
(s)SH
/Times-Roman SF
12126 XM
(are invalidated.  The process is similar to the one described in step 2, but there is no)69 W
9420 55973 MT
(check corresponding)
58 W( to step 1 at this point.  Demons are invoked normally on any slot that)59 W
9420 57169 MT
(is modified during this phase.)SH
8320 59063 MT
(4.)SH
9420 XM
(The value of slot)SH
/Times-Bold SF
17118 XM
(s)SH
/Times-Roman SF
17821 XM
(is finally changed to)SH
/Times-Bold SF
27047 XM
(v)SH
/Times-Roman SF
(.)SH
6120 61361 MT
(Both the invalidate demon and the pre-set demon should be functions of)
197 W( three arguments.  The first)196 W
6120 62557 MT
(argument is the schema which is being modified.  The second)
67 W( argument is the name of the slot which is)68 W
6120 63753 MT
(being modified.  The third argument is always)68 W
9 SS 
27285 XM
(NIL)SH
11 SS 
29128 XM
(for the invalidate demon.)
68 W( For)
410 W( the pre-set demon, the)67 W
6120 64949 MT
(third argument is the new value which is about to be installed in the slot.)
53 W( This)
382 W( allows the pre-set demon)54 W
6120 66145 MT
(to examine both the old value \050which is still in the slot\051 and the new value.)SH
ES
%%Page: 135 34
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.9)
SH( Demons)1800 W
51386 XM
(Page 135)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(8.9.2. The :Update-Slots List)SH
11 /Times-Roman AF
8280 9200 MT
(The KR demons are only invoked on slots that are listed)
246 W( in the)245 W
9 SS 
39246 XM
(:UPDATE-SLOTS)SH
11 SS 
46616 XM
(list of the schema)245 W
8280 10396 MT
(containing them.  For example, Garnet defines a particular demon that)
112 W( is responsible for redrawing the)113 W
8280 11592 MT
(objects in a window as the values of their "interesting" slots change.  These)
245 W( "interesting" slots are)244 W
8280 12788 MT
(declared in each object's)303 W
9 SS 
20668 XM
(:UPDATE-SLOTS)SH
11 SS 
28097 XM
(declaration during)304 W
10 /Courier AF
37013 XM
(create-instance)SH
11 /Times-Roman AF
46592 XM
(\050the declaration is)304 W
8280 13984 MT
(usually inherited from the prototype, so that typical Garnet users will never see this declaration\051.  The)130 W
9 SS 
8280 15180 MT
(:UPDATE-SLOTS)SH
11 SS 
15629 XM
(list contains all the slots in)
224 W( an object that should cause Opal's special demon to be)225 W
8280 16376 MT
(invoked when they are modified.  When an update-slot is modified, Opal's demon will "invalidate" the)101 W
8280 17572 MT
(object, causing it to be redrawn during the next pass of the update algorithm.)SH
2688 50 8280 17772 UL
8280 19870 MT
(The)SH
9 SS 
10358 XM
(:UPDATE-SLOTS)SH
11 SS 
17576 XM
(list can only be)
93 W( set directly at)94 W
10 /Courier AF
31398 XM
(create-instance)SH
11 /Times-Roman AF
40767 XM
(time. That)
463 W( is, after an object is)94 W
8280 21066 MT
(created it is no longer sufficient to modify the value of the)15 W
10 /Courier AF
34364 XM
(:update-slots)SH
11 /Times-Roman AF
42454 XM
(slot to)
15 W( change whether a slot)14 W
8280 22262 MT
(is an update-slot or not.  This is because update-slots are internally represented by a bit associated with)90 W
8280 23458 MT
(the slot, which is set during the)114 W
10 /Courier AF
23072 XM
(create-instance)SH
11 /Times-Roman AF
32461 XM
(call. Instead)
503 W( of setting the)114 W
10 /Courier AF
45027 XM
(:update-slots)SH
11 /Times-Roman AF
53215 XM
(slot,)SH
8280 24654 MT
(you must call the function:)SH
/Courier SF
10920 26246 MT
(kr::Add-Update-Slot)SH
/Times-Italic SF
24120 XM
(object slot)SH
/Courier SF
29333 XM
(&optional \050)SH
/Times-Italic SF
(turn-off)SH
/Courier SF
40615 XM
(NIL\051)SH
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 28544 MT
(If)SH
/Times-Italic SF
9349 XM
(turn-off)SH
/Times-Roman SF
13048 XM
(is NIL \050the default\051, the)62 W
/Times-Italic SF
24049 XM
(slot)SH
/Times-Roman SF
25977 XM
(in the)63 W
/Times-Italic SF
28853 XM
(object)SH
/Times-Roman SF
31879 XM
(is declared as an update-slot; if)63 W
/Times-Italic SF
46185 XM
(turn-off)SH
/Times-Roman SF
49885 XM
(is non-NIL,)63 W
8280 29740 MT
(the slot is no longer an update slot.)
98 W( In)
470 W( addition to setting or resetting the internal bit, the function also)97 W
8280 30936 MT
(modifies the)SH
9 SS 
14024 XM
(:UPDATE-SLOTS)SH
11 SS 
21149 XM
(slot accordingly, by adding or removing the)SH
/Times-Italic SF
40701 XM
(slot)SH
/Times-Roman SF
42566 XM
(from the list.)SH
12 /Times-Bold AF
8280 34620 MT
(8.9.3. Examples of Demons)SH
11 /Times-Roman AF
8280 35816 MT
(The following example shows how to define the invalidate demon for an object, and how the demon)
97 W( is)98 W
8280 37012 MT
(invoked.)SH
8 /Courier AF
10200 38177 MT
(;;; Define an invalidate demon)SH
10200 39042 MT
(;;;)SH
10200 39907 MT
(\050defun inv-demon \050schema slot v\051)SH
11160 40772 MT
(\050declare \050ignore v\051\051)
SH( ;)
1920 W( v is not used)SH
11160 41637 MT
(\050format t)SH
15000 42502 MT
("schema ~s, slot ~s is being invalidated.~%")SH
15000 43367 MT
(schema slot\051\051)SH
10200 45097 MT
(\050create-schema 'A \050:left 10\051)SH
11160 45962 MT
(\050:top \050o-formula \0501+ \050gvl :left\051\051\051\051)SH
11160 46827 MT
(\050:update-slots '\050:top\051\051)SH
11160 47692 MT
(\050:invalidate-demon 'inv-demon\051\051)SH
10200 49422 MT
(\050gv A :top\051  ==> 11)SH
10200 50287 MT
(\050s-value A :left 1\051)SH
10200 51152 MT
(;; prints out:)SH
10200 52017 MT
(schema #k<A>, slot :TOP is being invalidated.)SH
10200 52882 MT
(\050gv A :top\051  ==> 2)SH
12 /Times-Bold AF
8280 56566 MT
(8.9.4. Enabling and Disabling Demons)SH
11 /Courier AF
10920 59850 MT
(kr:With-Demons-Disabled &body)SH
/Times-Italic SF
30720 XM
(body)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 62148 MT
(The)SH
/Times-Italic SF
10464 XM
(body)SH
/Times-Roman SF
13076 XM
(of this macro is executed with demons disabled.)
199 W( Constraints)
672 W( are propagated as usual, but)198 W
8280 63344 MT
(demons are not invoked.)SH
8280 65642 MT
(This macro is often useful when making temporary changes to schemata which have un)
102 W( update demon.)103 W
8280 66838 MT
(This happens, for instance, when a program is changing graphical objects but)
13 W( does not want to display the)12 W
8280 68034 MT
(changes to)
38 W( the user, or when some of the intermediate states would be illegal and would cause an error if)39 W
8280 69230 MT
(demons were to run.  Objects may be freely modified inside)
69 W( the)68 W
/Times-Italic SF
37361 XM
(body)SH
/Times-Roman SF
39842 XM
(of this macro without interference)68 W
8280 70426 MT
(from the demons.)SH
ES
%%Page: 136 35
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 136)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 /Courier AF
8760 10232 MT
(kr:With-Demon-Disabled)SH
/Times-Italic SF
23940 XM
(demon)SH
/Courier SF
27532 XM
(&body)SH
/Times-Italic SF
31492 XM
(body)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 12530 MT
(This is similar to)238 W
10 /Courier AF
14774 XM
(with-demons-disabled)SH
11 /Times-Roman AF
(, except that it allows a specific demon to be disabled.)238 W
6120 13726 MT
(Normally, when)219 W
10 /Courier AF
13981 XM
(with-demons-disabled)SH
11 /Times-Roman AF
26475 XM
(is used, all demons are disabled.  This macro allows)
219 W( all)218 W
6120 14922 MT
(demons except a specific one to execute normally; only the specific demon is disabled.)SH
6120 17220 MT
(The forms in the)25 W
/Times-Italic SF
13796 XM
(body)SH
/Times-Roman SF
16234 XM
(are executed,)
25 W( but the given)26 W
/Times-Italic SF
28457 XM
(demon)SH
/Times-Roman SF
31690 XM
(is not invoked.  For example, the following will)26 W
6120 18416 MT
(selectively disable the invalidate demon provided by object FOO:)SH
8 /Courier AF
8040 19581 MT
(\050with-demon-disabled \050gv FOO :invalidate-demon\051)SH
9000 20446 MT
(\050s-value FOO :left 100\051\051)SH
11 /Times-Roman AF
6120 21867 MT
(While FOO's)
52 W( own demon is not executed, formulas in other objects which depend on FOO's)51 W
10 /Courier AF
48004 XM
(:left)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 23063 MT
(will be invalidated, and the corresponding invalidate demons will be invoked normally.)SH
/Courier SF
8760 26336 MT
(kr:With-Demon-Enabled)SH
/Times-Italic SF
23280 XM
(demon)SH
/Courier SF
26872 XM
(&body)SH
/Times-Italic SF
30832 XM
(body)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 28634 MT
(This macro enables a)
630 W( particular demon if it had been disabled, either explicitly or with)631 W
10 /Courier AF
6120 29830 MT
(with-demons-disabled)SH
11 /Times-Roman AF
(.)SH
14 /Times-Bold AF
6120 33648 MT
(8.10. Multiple Inheritance)SH
11 /Times-Roman AF
6120 35858 MT
(KR supports multiple inheritance:)
41 W( a schema may inherit values from more than one direct ancestor.  This)40 W
6120 37054 MT
(can be)
176 W( accomplished in two ways.  The first way is simply to connect the schema to more than one)177 W
6120 38250 MT
(ancestor schema through a relation.  The relation slot, in other words, may contain a list of slots.)
66 W( When)406 W
6120 39446 MT
(performing inheritance, KR searches each ancestor slot in turn until a value is found.)SH
6120 41744 MT
(The second way to achieve multiple inheritance is by using more than one)
25 W( relation with inheritance.  Any)26 W
6120 42940 MT
(schema may)
11 W( have several slots defined as relations with inheritance; in this case, all relations are searched)10 W
6120 44136 MT
(in turn until a value is found.  The two mechanisms may be combined, of course.)SH
6120 46434 MT
(Application programs should not rely on the order in which KR searches different)
277 W( relations.  The)278 W
6120 47630 MT
(particular order is implementation-dependent.)SH
14 /Times-Bold AF
6120 51448 MT
(8.11. Local Values)SH
11 /Times-Roman AF
6120 53658 MT
(This group contains functions which deal with)
23 W( local values in a slot.  Some of these functions do not treat)22 W
6120 54854 MT
(formulas as special objects, and thus can be used to access formulas stored in a)
187 W( slot \050remember that)188 W
6120 56050 MT
(functions like)SH
10 /Courier AF
12414 XM
(gv)SH
11 /Times-Roman AF
(, for example, return the)SH
/Times-Italic SF
24517 XM
(value)SH
/Times-Roman SF
27174 XM
(of a formula, rather than the formula object itself\051.)SH
/Courier SF
8760 59323 MT
(kr:Get-Value)SH
/Times-Italic SF
17340 XM
(object slot)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 61621 MT
(Returns the value in the)80 W
/Times-Italic SF
17243 XM
(slot)SH
/Times-Roman SF
19188 XM
(from)SH
/Times-Italic SF
21681 XM
(object)SH
/Times-Roman SF
(. If)
435 W( the slot is empty or not present, it)
80 W( returns)79 W
9 SS 
45491 XM
(NIL)SH
11 SS 
(. Inheritance)433 W
6120 62817 MT
(may be used when looking)
144 W( for a value.  Given a slot that contains a formula,)145 W
10 /Courier AF
42282 XM
(get-value)SH
11 /Times-Roman AF
48102 XM
(returns the)145 W
6120 64013 MT
(formula itself, rather than its value.  Therefore, its use is limited to applications)
44 W( that manipulate formulas)43 W
6120 65209 MT
(explicitly.)SH
/Courier SF
8760 68482 MT
(kr:Get-Local-Value)SH
/Times-Italic SF
21300 XM
(object slot)SH
/Courier SF
46028 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
6120 70780 MT
(Returns the value in the)30 W
/Times-Italic SF
16993 XM
(slot)SH
/Times-Roman SF
18888 XM
(from)SH
/Times-Italic SF
21331 XM
(object)SH
/Times-Roman SF
(. If)
335 W( the slot is empty or not)
30 W( present, it returns)31 W
9 SS 
44547 XM
(NIL)SH
11 SS 
(. Inheritance)
337 W( is)31 W
6120 71976 MT
(not used, and only local values are considered.)
32 W( Given)
337 W( a slot that contains a formula,)31 W
10 /Courier AF
43920 XM
(get-local-value)SH
ES
%%Page: 137 36
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.13)
SH( Schema)
1800 W( Creation Options)SH
51386 XM
(Page 137)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(returns the formula itself, rather than the formula's value.  Therefore, use)
176 W( of this macro is limited to)177 W
8280 9151 MT
(applications that manipulate formulas explicitly.)SH
/Courier SF
10920 12424 MT
(kr:G-Local-Value)SH
/Times-Italic SF
22140 XM
(object slot)385 W
/Courier SF
27738 XM
(&rest)SH
/Times-Italic SF
31698 XM
(other-slots)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 14722 MT
(This macro is very similar to)104 W
10 /Courier AF
21858 XM
(g-value)SH
11 /Times-Roman AF
(, except that)
104 W( it only considers local values.  Inheritance is never)103 W
8280 15918 MT
(used when looking for a value.)SH
/Courier SF
10920 19191 MT
(kr:Gv-Local)SH
/Times-Italic SF
18840 XM
(object slot)SH
/Courier SF
24053 XM
(&rest)SH
/Times-Italic SF
28013 XM
(more-slots)SH
/Courier SF
48188 XM
([)SH
/Times-Italic SF
(Macro)SH
/Courier SF
(])SH
/Times-Roman SF
8280 21489 MT
(This macro is similar to)106 W
10 /Courier AF
19535 XM
(gv)SH
11 /Times-Roman AF
(, except that it only considers)
106 W( local values, and it never returns an inherited)107 W
8280 22685 MT
(value.)SH
10 /Courier AF
11589 XM
(Gv-local)SH
11 /Times-Roman AF
16715 XM
(should be used in situations where it is important)
51 W( to only retrieve values that are local)50 W
8280 23881 MT
(to the)SH
/Times-Italic SF
11030 XM
(object)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
8280 27699 MT
(8.12. Local-only Slots)SH
11 /Times-Roman AF
8280 29909 MT
(There are cases when certain slots in an)
47 W( object should not be inherited by any instance of the object.  An)48 W
8280 31105 MT
(example of this situation might)
7 W( be a slot which is used as a unique identifier; clearly, the slot should never)6 W
8280 32301 MT
(be inherited, or else errors will occur.  Such slots are called)SH
/Times-Italic SF
34608 XM
(local-only slots)SH
/Times-Roman SF
(.)SH
8280 34599 MT
(This effect can be achieved in KR by listing the names of all such slots in the prototype object.)
142 W( The)560 W
8280 35795 MT
(names are listed in the)154 W
9 SS 
19160 XM
(:LOCAL-ONLY-SLOTS)SH
11 SS 
28688 XM
(declaration \050the general declaration syntax is discussed in)153 W
8280 36991 MT
(section 8.2\051.)
114 W( This)
505 W( declaration should contain a list of two-element sub-lists.  The first element in each)115 W
8280 38187 MT
(sub-list specifies the name of a local-only slot.  The second element can be)SH
9 SS 
41483 XM
(T)SH
11 SS 
42308 XM
(or)SH
9 SS 
43499 XM
(NIL)SH
11 SS 
(.)SH
8280 40485 MT
(The value)37 W
9 SS 
12996 XM
(NIL)SH
11 SS 
14808 XM
(specifies that the local-only slot is always initialized to)37 W
9 SS 
39552 XM
(NIL)SH
11 SS 
41364 XM
(in any instance which)
37 W( does not)36 W
8280 41681 MT
(define it explicitly.  The value)58 W
9 SS 
22161 XM
(T)SH
11 SS 
(, on the other hand, specifies that the current value of the local-only slot)58 W
8280 42877 MT
(in the)
4 W( prototype will be used to initialize the slot in the instance.  The value, however, is physically copied)3 W
8280 44073 MT
(down into the instance, and thus inheritance is no longer used for that)
3 W( instance. Modifying the value in the)4 W
8280 45269 MT
(prototype, in particular, will)
57 W( have no effect on the instance.  This second option is used more rarely than)56 W
9 SS 
8280 46465 MT
(NIL)SH
11 SS 
(.)SH
8280 48763 MT
(Note that)
134 W( none of the above applies to slots whose value \050in the prototype\051 is a formula.  Slots which)135 W
8280 49959 MT
(contain formulas are always inherited, independent of whether the slot is listed in)SH
10 /Courier AF
44326 XM
(:local-only-slots)SH
11 /Times-Roman AF
(.)SH
14 /Times-Bold AF
8280 53777 MT
(8.13. Schema Creation Options)SH
11 /Times-Roman AF
8280 55987 MT
(Two special keywords can be used in the macros that create schemata.  These)
62 W( options are recognized by)61 W
10 /Courier AF
8280 57183 MT
(create-instance)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
17830 XM
(create-schema)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
28043 XM
(create-prototype)SH
11 /Times-Roman AF
(. They)
275 W( are:)SH
/Courier SF
10920 60456 MT
(:OVERRIDE)SH
47148 XM
([)SH
/Times-Italic SF
(Keyword)SH
/Courier SF
(])SH
/Times-Roman SF
8280 62754 MT
(If the)67 W
/Times-Italic SF
11040 XM
(object-name)SH
/Times-Roman SF
16818 XM
(in one of the object-creating macros names an existing object, that object is)
67 W( normally)68 W
8280 63950 MT
(deleted, together)
120 W( with its instances, and replaced by a brand new object.  The default behavior may be)119 W
8280 65146 MT
(modified by using the keyword)9 W
/Times-Bold SF
22348 XM
(:override)SH
/Times-Roman SF
26968 XM
(as part of the)9 W
/Times-Italic SF
32991 XM
(slot-definitions)SH
/Times-Roman SF
(. This)
295 W( keyword causes the existing)10 W
8280 66342 MT
(object to be modified in place and contain the union of its previous slots)
293 W( and those specified by)292 W
10 /Courier AF
8280 67538 MT
(create-schema)SH
11 /Times-Roman AF
(. Previous)
685 W( slots that are not mentioned in the call retain whatever values they)
205 W( had)206 W
8280 68734 MT
(before the operation.  For example,)SH
8 /Courier AF
10200 69899 MT
(\050create-schema 'RECTANGLE-1 :override \050:color :magenta\051\051)SH
11 /Times-Roman AF
8280 71320 MT
(adds a slot to the object RECTANGLE-1 if it)
163 W( already exists.  Without the)162 W
10 /Courier AF
43093 XM
(:override)SH
11 /Times-Roman AF
48930 XM
(keyword, this)162 W
ES
%%Page: 138 37
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 138)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(would have destroyed the object and created a new one with a single slot.)SH
/Courier SF
8760 11228 MT
(:NAME-PREFIX)SH
/Times-Italic SF
17340 XM
(string)SH
/Courier SF
44988 XM
([)SH
/Times-Italic SF
(Keyword)SH
/Courier SF
(])SH
/Times-Roman SF
6120 13526 MT
(The keyword)10 W
/Times-Bold SF
12248 XM
(:name-prefix)SH
/Times-Roman SF
18641 XM
(may be used to specify a name prefix for unnamed objects.  Unnamed)
10 W( objects)11 W
6120 14722 MT
(are normally named after the object they are an instance of; this option allows a specific)
31 W( string to be used)30 W
6120 15918 MT
(as the name prefix.  The option, if specified, should be immediately followed by a string,)
11 W( which is used as)12 W
6120 17114 MT
(the prefix.  Example:)SH
8 /Courier AF
8040 18279 MT
(\050create-schema NIL :name-prefix "ORANGE")SH
9000 19144 MT
(\050:left 34\051\051 ==> #k<ORANGE-2261>)SH
14 /Times-Bold AF
6120 22962 MT
(8.14. Print Control)SH
11 /Times-Roman AF
6120 25172 MT
(This section describes the slots)
177 W( that control what portions of an object are printed, and how they are)176 W
6120 26368 MT
(printed. The)
339 W( need)
32 W( for fine control over printing arises, for example, when certain slots contain very large)33 W
6120 27564 MT
(data structures that take a long time to print.)SH
6120 29862 MT
(The print control slots are taken from)
24 W( the object which is specified as the)23 W
/Times-Italic SF
38766 XM
(print-control)SH
/Times-Roman SF
44748 XM
(in the complicated)23 W
6120 31058 MT
(form of)SH
10 /Courier AF
9724 XM
(ps)SH
11 /Times-Roman AF
(, described below.  In many cases, the slots are actually inherited by the object being printed.)SH
/Courier SF
8760 34331 MT
(kr:PS)SH
/Times-Italic SF
12720 XM
(object)SH
/Courier SF
16068 XM
(&key)SH
/Times-Italic SF
19368 XM
(types-p all-p)275 W
/Courier SF
25832 XM
(\050)SH
/Times-Italic SF
(control)SH
/Courier SF
30330 XM
(T\051 \050)SH
/Times-Italic SF
(inherit)SH
/Courier SF
36564 XM
(NIL\051)SH
44988 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
19320 35445 MT
(\050)SH
/Times-Italic SF
(indent)SH
/Courier SF
23390 XM
(0\051 \050)SH
/Times-Italic SF
(stream)SH
/Courier SF
29684 XM
(*standard-output*\051)SH
/Times-Roman SF
6120 37743 MT
(This form of)57 W
10 /Courier AF
12126 XM
(ps)SH
11 /Times-Roman AF
13658 XM
(prints the)
57 W( contents of the)58 W
/Times-Italic SF
25098 XM
(object)SH
/Times-Roman SF
(, and allows fine control over what to print and how.  A)58 W
6120 38939 MT
(possible behavior is to print out all slots and all values in)56 W
/Times-Italic SF
32092 XM
(object)SH
/Times-Roman SF
(; this happens when the)56 W
/Times-Italic SF
45660 XM
(control)SH
/Times-Roman SF
49168 XM
(object is)55 W
9 SS 
6120 40135 MT
(NIL)SH
11 SS 
(. It)
627 W( is possible, however, to cause)176 W
10 /Courier AF
24149 XM
(ps)SH
11 /Times-Roman AF
25800 XM
(to ignore certain slots and to specify)
176 W( that others should be)177 W
6120 41331 MT
(printed in a given order.  It is also)
95 W( possible to limit the number of elements printed for list values, thus)94 W
6120 42527 MT
(preventing annoyingly long lists of values.)SH
6120 44825 MT
(The function)9 W
10 /Courier AF
12064 XM
(ps)SH
11 /Times-Roman AF
13548 XM
(can print out type information, if desired.  This can be)
9 W( specified with a non-null value for)10 W
6120 46021 MT
(the new keyword parameter)106 W
/Times-Italic SF
19064 XM
(types-p)SH
/Times-Roman SF
22621 XM
(\050the default value is NIL\051.  Type declarations are)
106 W( printed in square)105 W
6120 47217 MT
(brackets.)SH
6120 49515 MT
(Supplying a)
192 W( non-NIL value for the)193 W
/Times-Italic SF
22795 XM
(all-p)SH
/Times-Roman SF
25341 XM
(parameter will cause)193 W
10 /Courier AF
35295 XM
(ps)SH
11 /Times-Roman AF
36963 XM
(to print out all slots of the)193 W
/Times-Italic SF
49957 XM
(object)SH
/Times-Roman SF
(,)SH
6120 50711 MT
(including slots that do not currently have any value.  The default for)SH
/Times-Italic SF
36362 XM
(all-p)SH
/Times-Roman SF
38715 XM
(is NIL.)SH
6120 53009 MT
(The value of)SH
/Times-Italic SF
11953 XM
(control)SH
/Times-Roman SF
15406 XM
(should be one of four things:)SH
8320 54462 MT
(1.)SH
9 SS 
9420 XM
(NIL)SH
11 SS 
(, which means that the)SH
/Times-Italic SF
21062 XM
(object)SH
/Times-Roman SF
24025 XM
(is printed in its entirety.)SH
8320 56356 MT
(2.)SH
9 SS 
9420 XM
(T)SH
11 SS 
(, the default,)
11 W( which means that the)10 W
/Times-Italic SF
25407 XM
(object)SH
/Times-Roman SF
28380 XM
(itself is used as the control object.  In most cases,)10 W
9420 57552 MT
(the control slots are)
205 W( inherited from an ancestor of the)206 W
/Times-Italic SF
35057 XM
(object)SH
/Times-Roman SF
(. All)
687 W( Opal prototypes, for)206 W
9420 58748 MT
(example, define appropriate slots which reduce the amount of information)
52 W( that is shown by)51 W
10 /Courier AF
9420 59944 MT
(ps)SH
11 /Times-Roman AF
(.)SH
8320 61838 MT
(3.)SH
9420 XM
(an object, which is used directly as the control object.)SH
8320 63732 MT
(4.)SH
9420 XM
(the keyword)118 W
10 /Courier AF
15399 XM
(:default)SH
11 /Times-Roman AF
(, which indicates that the KR-supplied default print control object)119 W
9420 64928 MT
(should be used.  The name of)
82 W( the default print control object is)81 W
9 SS 
38339 XM
(PRINT-SCHEMA-CONTROL)SH
11 SS 
49895 XM
(,)SH
9420 66124 MT
(an object in the KR package.  This default object limits the length of lists that are printed)
15 W( by)16 W
10 /Courier AF
9420 67320 MT
(ps)SH
11 /Times-Roman AF
10895 XM
(to a maximum of ten for ordinary slots, and five for the)SH
10 /Courier AF
35486 XM
(:is-a-inv)SH
11 /Times-Roman AF
41161 XM
(slot.)SH
6120 69618 MT
(If the)142 W
/Times-Italic SF
9030 XM
(inherit)SH
/Times-Roman SF
12381 XM
(option is)142 W
9 SS 
16761 XM
(NIL)SH
11 SS 
18678 XM
(\050the default\051, only local slots are printed.)
142 W( Otherwise,)
558 W( all inheritable values)141 W
6120 70814 MT
(from all prototypes of)242 W
/Times-Italic SF
16986 XM
(object)SH
/Times-Roman SF
20192 XM
(are inherited and printed; inherited values are clearly indicated in the)243 W
ES
%%Page: 139 38
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.14)
SH( Print)
1800 W( Control)SH
51386 XM
(Page 139)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(printout. As)
773 W( discussed in Chapter 4, formulas are not copied down from prototypes until they are)248 W
8280 9151 MT
(requested by)104 W
10 /Courier AF
14352 XM
(gv)SH
11 /Times-Roman AF
15931 XM
(or)SH
10 /Courier AF
17226 XM
(g-value)SH
11 /Times-Roman AF
(. Formulas)
483 W( that have not yet been copied)
104 W( down will not be shown by)105 W
10 /Courier AF
53605 XM
(ps)SH
11 /Times-Roman AF
(,)SH
8280 10347 MT
(unless the)SH
/Times-Italic SF
12924 XM
(inherit)SH
/Times-Roman SF
16133 XM
(parameter is non-)SH
9 SS 
(NIL)SH
11 SS 
(.)SH
8280 12645 MT
(The)SH
10 /Courier AF
10342 XM
(:indent)SH
11 /Times-Roman AF
14894 XM
(option is only)
77 W( used by debugging code which needs to specify an indentation level.  This)76 W
8280 13841 MT
(option is not needed by regular application programs.)SH
10 /Courier AF
8280 16139 MT
(Ps)SH
11 /Times-Roman AF
9832 XM
(prints slots whose value is a formula in)
77 W( a special way.  Besides the name of the formula, the current)78 W
8280 17335 MT
(cached value of the formula is)
17 W( printed in parentheses, followed by)16 W
9 SS 
37783 XM
(T)SH
11 SS 
38624 XM
(if the cache is valid or)16 W
9 SS 
48738 XM
(NIL)SH
11 SS 
50529 XM
(otherwise.)SH
8280 18531 MT
(Example:)SH
8 /Courier AF
10200 19696 MT
(\050create-schema 'A)SH
11160 20561 MT
(\050:left 10\051 \050:right \050o-formula \050+ \050gvl :left\051 25\051\051\051\051)SH
10200 21426 MT
(\050gv A :right\051  ==> 35)SH
10200 23156 MT
(\050ps A\051)SH
/Times-Italic SF
10200 24021 MT
(;; prints out:)SH
/Courier SF
10200 24886 MT
({#k<A>)SH
11160 25751 MT
(:DEPENDED-SLOTS =  \050:LEFT #k<F2285>\051)SH
11160 26616 MT
(:RIGHT =  #k<F2285>\05035 . T\051)SH
11160 27481 MT
(:LEFT =  10)SH
10200 28346 MT
(})SH
10200 29511 MT
(\050s-value A :left 50\051)SH
10200 30376 MT
(\050ps A\051)SH
/Times-Italic SF
10200 31241 MT
(;; prints out:)SH
/Courier SF
10200 32106 MT
({#k<A>)SH
11160 32971 MT
(:DEPENDED-SLOTS =  \050:LEFT #k<F2285>\051)SH
11160 33836 MT
(:RIGHT =  #k<F2285>\05035 . NIL\051)SH
11160 34701 MT
(:LEFT =  50)SH
10200 35566 MT
(})SH
11 /Times-Roman AF
8280 36987 MT
(The cached value is not correct, of course, but it will be recomputed as soon as its)
140 W( value is requested)141 W
8280 38183 MT
(because formula)SH
10 /Courier AF
15792 XM
(F2285)SH
11 /Times-Roman AF
19067 XM
(is marked invalid.)SH
8280 40481 MT
(The function)87 W
10 /Courier AF
14380 XM
(ps)SH
11 /Times-Roman AF
15942 XM
(prints the)
87 W( expression of a formula, when given the formula as argument.  A formula is)86 W
8280 41677 MT
(printed with three pieces of information: the expression, the)
SH( cached value \050which is printed as before\051, and)1 W
8280 42873 MT
(the object and slot on which the formula is installed.)SH
8280 45171 MT
(If)SH
/Times-Italic SF
9287 XM
(stream)SH
/Times-Roman SF
12556 XM
(is specified, it is used for printing to a stream other than standard output.)SH
12 /Times-Bold AF
8280 48855 MT
(8.14.1. Print Control Slots)SH
11 /Times-Roman AF
8280 50051 MT
(If a control object is specified in)
70 W( a call to)69 W
10 /Courier AF
27242 XM
(ps)SH
11 /Times-Roman AF
(, it should contain \050or inherit\051 six special slots.  These slots)69 W
8280 51247 MT
(determine what)SH
10 /Courier AF
15366 XM
(ps)SH
11 /Times-Roman AF
16841 XM
(does. The)
275 W( meaning of the print control slots is as follows:)SH
/Symbol SF
10249 52825 MT
(\267)SH
10 /Courier AF
11030 XM
(:sorted-slots)SH
11 /Times-Roman AF
19106 XM
(contains a list of names of slots that should be printed before all other)
1 W( slots,)2 W
11030 54021 MT
(in the desired order.)SH
/Symbol SF
10249 55915 MT
(\267)SH
10 /Courier AF
11030 XM
(:ignored-slots)SH
11 /Times-Roman AF
19793 XM
(contains a list)
88 W( of names of slots that should not be printed.  A summary)87 W
11030 57111 MT
(printed at the end of the object indicates which slots were ignored.)SH
/Symbol SF
10249 59005 MT
(\267)SH
10 /Courier AF
11030 XM
(:global-limit-values)SH
11 /Times-Roman AF
23655 XM
(contains an integer, the maximum number of elements that)350 W
11030 60201 MT
(should be printed for each list that)
21 W( is a value for a slot.  If a list contains more than that many)20 W
11030 61397 MT
(elements, ellipsis are)
105 W( printed after the given number to indicate that not all elements of the)106 W
11030 62593 MT
(list were actually displayed.)SH
/Symbol SF
10249 64487 MT
(\267)SH
10 /Courier AF
11030 XM
(:limit-values)SH
11 /Times-Roman AF
19209 XM
(allows the same control on a slot-by-slot)
104 W( basis.  It should contain lists of)103 W
11030 65683 MT
(the form)244 W
/Courier SF
15550 XM
(\050slot number\051)244 W
/Times-Roman SF
(. If)
763 W( a slot name appears in one of these lists, the number)245 W
11030 66879 MT
(specified there is used instead of the one specified in)SH
10 /Courier AF
34488 XM
(:global-limit-values)SH
11 /Times-Roman AF
(.)SH
/Symbol SF
10249 68773 MT
(\267)SH
10 /Courier AF
11030 XM
(:print-as-structure)SH
11 /Times-Roman AF
22828 XM
(can be)123 W
9 SS 
26188 XM
(T)SH
11 SS 
(, in which case the #k<>)
123 W( notation is used when printing)122 W
11030 69969 MT
(object names, or)SH
9 SS 
18544 XM
(NIL)SH
11 SS 
(, in which case only pure object names are printed.)SH
/Symbol SF
10249 71863 MT
(\267)SH
10 /Courier AF
11030 XM
(:print-slots)SH
11 /Times-Roman AF
18699 XM
(is a list of the slots that are printed as part)
194 W( of the)195 W
/Times-Italic SF
42639 XM
(#k<>)SH
/Times-Roman SF
45633 XM
(notation. It)
665 W( is)195 W
ES
%%Page: 140 39
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 140)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 SS 
8870 7955 MT
(possible to cause)351 W
10 /Courier AF
17652 XM
(ps)SH
11 /Times-Roman AF
19478 XM
(to print a)
351 W( few slots from each object, inside the)350 W
/Times-Italic SF
43905 XM
(#k<>)SH
/Times-Roman SF
47054 XM
(printed)SH
8870 9151 MT
(representation; this may make)
278 W( it easier to identify different schemata.)279 W
10 /Courier AF
42970 XM
(:print-slots)SH
11 /Times-Roman AF
8870 10347 MT
(should contain a list of the names of)
97 W( the slots which should be printed this way.  Note that)96 W
8870 11543 MT
(this option has no effect if schema names are not being printed with the)SH
/Times-Italic SF
40578 XM
(#k<>)SH
/Times-Roman SF
43377 XM
(notation.)SH
6120 13841 MT
(The following is a rather comprehensive example of fine control over what)SH
10 /Courier AF
39412 XM
(ps)SH
11 /Times-Roman AF
40887 XM
(prints.)SH
8 /Times-Italic AF
8040 15054 MT
(; Use top level of the hierarchy to control printing.)SH
/Courier SF
8040 15919 MT
(\050create-schema 'TOP-OBJECT)SH
9000 16784 MT
(\050:ignored-slots :internal :width\051\051)SH
8040 18514 MT
(\050create-schema 'COLORED-THING \050:color :blue\051 \050:x 10\051)SH
9000 19379 MT
(\050:is-a TOP-OBJECT\051 \050:width 12.5\051 \050:y 20\051)SH
9000 20244 MT
(\050:internal "Some information"\051\051)SH
8040 21974 MT
(\050dotimes \050i 20\051 \050create-instance NIL COLORED-THING\051\051)SH
11 /Times-Roman AF
6120 23395 MT
(Using)SH
10 /Courier AF
9023 XM
(ps)SH
11 /Times-Roman AF
10498 XM
(with a null)SH
/Times-Italic SF
15479 XM
(control)SH
/Times-Roman SF
18932 XM
(prints out the whole contents of the schema:)SH
8 /Courier AF
8040 24560 MT
(\050ps COLORED-THING :control NIL\051)SH
/Times-Italic SF
8040 25425 MT
(;; prints out:)SH
/Courier SF
8040 26590 MT
({#k<COLORED-THING>)SH
9000 27455 MT
(:IS-A-INV =  #k<COLORED-THING-2265>)SH
9960 28320 MT
(#k<COLORED-THING-2266> #k<COLORED-THING-2267>)SH
9960 29185 MT
(#k<COLORED-THING-2268> #k<COLORED-THING-2269>)SH
9960 30050 MT
(#k<COLORED-THING-2270> #k<COLORED-THING-2271>)SH
9960 30915 MT
(#k<COLORED-THING-2272> #k<COLORED-THING-2273>)SH
9960 31780 MT
(#k<COLORED-THING-2274> #k<COLORED-THING-2275>)SH
9960 32645 MT
(#k<COLORED-THING-2276> #k<COLORED-THING-2277>)SH
9960 33510 MT
(#k<COLORED-THING-2278> #k<COLORED-THING-2279>)SH
9960 34375 MT
(#k<COLORED-THING-2280> #k<COLORED-THING-2281>)SH
9960 35240 MT
(#k<COLORED-THING-2282> #k<COLORED-THING-2283>)SH
9960 36105 MT
(#k<COLORED-THING-2284>)SH
9000 36970 MT
(:INTERNAL =  "Some information")SH
9000 37835 MT
(:Y =  20)SH
9000 38700 MT
(:X =  10)SH
9000 39565 MT
(:COLOR =  :BLUE)SH
9000 40430 MT
(:WIDTH =  12.5)SH
9000 41295 MT
(:IS-A =  #k<TOP-OBJECT>)SH
8040 42160 MT
(})SH
11 /Times-Roman AF
6120 43581 MT
(Using the system-supplied default control object reduces the clutter in the)188 W
10 /Courier AF
40905 XM
(:is-a-inv)SH
11 /Times-Roman AF
46768 XM
(slot, and)
188 W( also)189 W
6120 44777 MT
(eliminates printing of schemata with the special #k<> convention:)SH
8 /Courier AF
8040 45942 MT
(\050ps COLORED-THING :control :default\051)SH
8040 46807 MT
({COLORED-THING)SH
9000 47672 MT
(:WIDTH =  12.5)SH
9000 48537 MT
(:IS-A-INV =  COLORED-THING-2265 COLORED-THING-2266)SH
10440 49402 MT
(COLORED-THING-2267 COLORED-THING-2268)SH
10440 50267 MT
(COLORED-THING-2269 ...)SH
9000 51132 MT
(:INTERNAL =  "Some information")SH
9000 51997 MT
(:Y =  20)SH
9000 52862 MT
(:X =  10)SH
9000 53727 MT
(:COLOR =  :BLUE)SH
9000 54592 MT
(:IS-A =  TOP-OBJECT)SH
8040 55457 MT
(})SH
11 /Times-Roman AF
6120 56878 MT
(We can make things even better by using the object itself to inherit the control slots.)
132 W( We)
537 W( add sorting)131 W
6120 58074 MT
(information and a global limit to the number of elements to)
107 W( be printed for each list.  We do this at the)108 W
6120 59270 MT
(highest level in the hierarchy, so that every object can inherit the information:)SH
ES
%%Page: 141 40
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.15)
SH( Control)
1800 W( Variables)SH
51386 XM
(Page 141)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050s-value TOP-OBJECT :global-limit-values 3\051)SH
10200 8564 MT
(\050s-value TOP-OBJECT :sorted-slots)SH
11160 9429 MT
('\050:is-a :color :x :y\051\051)SH
10200 11159 MT
(\050ps COLORED-THING\051)SH
/Times-Italic SF
10200 12024 MT
(;; prints out:)SH
/Courier SF
10200 12889 MT
({COLORED-THING)SH
11160 13754 MT
(:IS-A =  TOP-OBJECT)SH
11160 14619 MT
(:COLOR =  :BLUE)SH
11160 15484 MT
(:X =  10)SH
11160 16349 MT
(:Y =  20)SH
11160 17214 MT
(:IS-A-INV =  COLORED-THING-2265 COLORED-THING-2266)SH
12600 18079 MT
(COLORED-THING-2267 ...)SH
11160 18944 MT
(List of ignored slots:)
SH( WIDTH)
960 W( INTERNAL)SH
10200 19809 MT
(})SH
12 /Times-Bold AF
8280 23493 MT
(8.14.2. Slot Printing Functions)SH
11 /Times-Roman AF
8280 24689 MT
(It is possible to use the)
267 W( basic mechanism used by the function)266 W
10 /Courier AF
38851 XM
(ps)SH
11 /Times-Roman AF
40592 XM
(to print or format objects in a)266 W
8280 25885 MT
(customized way.  This facility is used by applications such as the)110 W
10 /Courier AF
38531 XM
(garnet-debug:Inspector)SH
11 /Times-Roman AF
(, which)111 W
8280 27081 MT
(need full control over how objects are displayed.  This mechanism is supported by the following function.)SH
/Courier SF
10920 28673 MT
(kr::Call-On-PS-Slots)SH
/Times-Italic SF
24780 XM
(object function)275 W
/Courier SF
32284 XM
(&key \050)SH
/Times-Italic SF
(control)SH
/Courier SF
40082 XM
(T\051)SH
/Times-Italic SF
42062 XM
(inherit)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
24780 29787 MT
(\050)SH
/Times-Italic SF
(indent)SH
/Courier SF
28850 XM
(NIL\051)SH
/Times-Italic SF
32150 XM
(types-p all-p)275 W
/Times-Roman SF
8280 32085 MT
(The)SH
/Times-Italic SF
10382 XM
(function)SH
/Times-Roman SF
14380 XM
(is called in turn on each slot that would be printed by)117 W
10 /Courier AF
39430 XM
(ps)SH
11 /Times-Roman AF
(. The)
509 W( keyword arguments)
117 W( have)116 W
8280 33281 MT
(exactly the same meaning as in)SH
10 /Courier AF
22270 XM
(ps)SH
11 /Times-Roman AF
(. The)275 W
/Times-Italic SF
26280 XM
(function)SH
/Times-Roman SF
30161 XM
(should take nine arguments, as follows:)SH
8 /Courier AF
10200 34446 MT
(\050lambda \050object slot formula is-inherited valid real-value types-p bits indent limits\051\051)SH
11 /Times-Roman AF
8280 35867 MT
(When the function is called, the first argument)
177 W( is the object being displayed; the second argument is)178 W
8280 37063 MT
(bound to each slot in the object, in turn.  The)107 W
/Times-Italic SF
29468 XM
(formula)SH
/Times-Roman SF
33334 XM
(is set to)
107 W( NIL \050for slots that contain non-formula)106 W
8280 38259 MT
(values\051, or to the)
85 W( actual formula in the)86 W
/Times-Italic SF
26040 XM
(slot)SH
/Times-Roman SF
(. The)
447 W( parameter)86 W
/Times-Italic SF
35455 XM
(is-inherited)SH
/Times-Roman SF
40888 XM
(is T if the value in the)86 W
/Times-Italic SF
51419 XM
(slot)SH
/Times-Roman SF
53370 XM
(was)SH
8280 39455 MT
(inherited, NIL if the value was defined locally.  The)
41 W( parameter)40 W
/Times-Italic SF
36552 XM
(valid)SH
/Times-Roman SF
39067 XM
(is NIL if the)40 W
/Times-Italic SF
44909 XM
(slot)SH
/Times-Roman SF
46814 XM
(contains a formula)40 W
8280 40651 MT
(whose cached value is invalid; it contains T if the slot contains a valid formula,)
10 W( or any non-formula value.)11 W
8280 41847 MT
(The parameter)51 W
/Times-Italic SF
15038 XM
(real-value)SH
/Times-Roman SF
19884 XM
(is whatever g-value would actually return.  The parameter)51 W
/Times-Italic SF
46119 XM
(types-p)SH
/Times-Roman SF
49621 XM
(is set to T)
51 W( if)50 W
8280 43043 MT
(the)SH
/Times-Italic SF
10051 XM
(function)SH
/Times-Roman SF
14084 XM
(should process type information for the)152 W
/Times-Italic SF
32592 XM
(slot)SH
/Times-Roman SF
(; its value simply reflects the value passed to)153 W
10 /Courier AF
8280 44239 MT
(kr::call-on-ps-slot)SH
11 /Times-Roman AF
(. The)
561 W( parameter)143 W
/Times-Italic SF
27732 XM
(bits)SH
/Times-Roman SF
29739 XM
(contains the internal bitwise representation of the slot's)142 W
8280 45435 MT
(features and type, as an integer.  The parameter)29 W
/Times-Italic SF
29642 XM
(indent)SH
/Times-Roman SF
32696 XM
(is the level of indentation.)
29 W( The)
335 W( parameter)30 W
/Times-Italic SF
51595 XM
(limits)SH
/Times-Roman SF
54346 XM
(is)SH
8280 46631 MT
(a number \050the maximum number of values from the)39 W
/Times-Italic SF
31694 XM
(slot)SH
/Times-Roman SF
33598 XM
(that are to be processed)
39 W( by the)38 W
/Times-Italic SF
47459 XM
(function)SH
/Times-Roman SF
(\051, or NIL)38 W
8280 47827 MT
(if all values in the slot should be processed.)SH
8280 50460 MT
(A similar function is used when only one slot in an object is to be processed:)SH
/Courier SF
10920 52052 MT
(kr::Call-On-One-Slot)SH
/Times-Italic SF
24780 XM
(object slot function)SH
/Courier SF
47148 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
/Times-Roman SF
8280 54350 MT
(This function returns T if the slot exists and the)SH
/Times-Italic SF
29422 XM
(function)SH
/Times-Roman SF
33303 XM
(was called, and NIL otherwise.)SH
14 /Times-Bold AF
8280 58168 MT
(8.15. Control Variables)SH
11 /Times-Roman AF
8280 60378 MT
(The following variable can be set globally to achieve the same effect as)
12 W( the slot)13 W
10 /Courier AF
43680 XM
(:print-as-structure)SH
11 /Times-Roman AF
8280 61574 MT
(described above:)SH
8280 65553 MT
(kr::*PRINT-AS-STRUCTURE*)SH
49948 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
8280 67851 MT
(This variable may be used to determine whether schema names are)
80 W( printed with the notation)79 W
9 SS 
50314 XM
(#K<NAME>)SH
11 SS 
8280 69047 MT
(\050the default\051 or simply as)36 W
9 SS 
19793 XM
(NAME)SH
11 SS 
(. The)
347 W( former notation is more perspicuous,)
36 W( since it makes it immediately)37 W
8280 70243 MT
(clear which objects are KR schemata.  The second notation is more)
85 W( compact, and is obtained by setting)84 W
8280 71439 MT
(kr::*PRINT-AS-STRUCTURE* to)SH
9 SS 
24048 XM
(NIL)SH
11 SS 
(.)SH
ES
%%Page: 142 41
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 142)
SH( KR)830 W
31345 XM
(Functional Interface: Additional Topics)
SH( Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
11 SS 
6120 10938 MT
(In addition to kr::*PRINT-AS-STRUCTURE*, other special variables can be used to control the behavior)14 W
6120 12134 MT
(of the system.  The following variables are)
85 W( used to control what debugging information is printed.  The)84 W
6120 13330 MT
(default settings are such that very little debugging information is printed.)SH
6120 17309 MT
(kr::*PRINT-NEW-INSTANCES*)SH
47788 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 19607 MT
(This variable controls whether a notification is printed when)206 W
10 /Courier AF
34825 XM
(create-schema)SH
11 /Times-Roman AF
43106 XM
(or create-instance are)206 W
6120 20803 MT
(compiled from a file.)
75 W( The)
424 W( message is printed when kr::*PRINT-NEW-INSTANCES* is)74 W
9 SS 
46267 XM
(T)SH
11 SS 
47166 XM
(\050the default\051,)74 W
6120 21999 MT
(and may be useful to determine)
96 W( how far into a file compilation has progressed.  Setting this variable to)97 W
9 SS 
6120 23195 MT
(NIL)SH
11 SS 
7895 XM
(turns off the notification.)SH
6120 27174 MT
(kr::*WARNING-ON-NULL-LINK*)SH
47788 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 29472 MT
(This variable controls whether a notification is printed when a null link is encountered)
271 W( during the)270 W
6120 30668 MT
(evaluation of a formula.  When the variable is)77 W
9 SS 
27277 XM
(NIL)SH
11 SS 
29129 XM
(\050the default\051, the stale value of)
77 W( the formula is simply)78 W
6120 31864 MT
(reused without any warning.  Setting the variable)
58 W( to)57 W
9 SS 
29674 XM
(T)SH
11 SS 
30556 XM
(causes a notification describing the situation to be)57 W
6120 33060 MT
(printed; the formula then returns the stale value, as usual.)SH
6120 37039 MT
(kr::*WARNING-ON-CIRCULARITY*)SH
47788 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 39337 MT
(This variable controls whether a notification is printed when a circularity is detected during formula)201 W
6120 40533 MT
(evaluation. When)
433 W( the variable is)79 W
9 SS 
21346 XM
(NIL)SH
11 SS 
23199 XM
(\050the default\051, no warnings are generated.  Setting the variable to)78 W
9 SS 
52370 XM
(T)SH
11 SS 
6120 41729 MT
(causes a notification describing the situation to be printed.)SH
6120 45708 MT
(kr::*WARNING-ON-CREATE-SCHEMA*)SH
48063 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 48006 MT
(This variable controls whether a notification is printed when)109 W
10 /Courier AF
33952 XM
(create-instance)SH
11 /Times-Roman AF
43337 XM
(creates an object that)110 W
6120 49202 MT
(has the same name as an old object, and the old object is destroyed.  If)13 W
9 SS 
37545 XM
(T)SH
11 SS 
38382 XM
(\050the default\051, then a warning will)12 W
6120 50398 MT
(be printed when an object is redefined.)SH
6120 54377 MT
(kr::*WARNING-ON-EVALUATION*)SH
48063 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 56675 MT
(This variable controls whether)
190 W( a warning is printed whenever a formula is evaluated.  If its value is)191 W
6120 57871 MT
(non-)SH
9 SS 
(NIL)SH
11 SS 
(, then a warning will describe the object, slot, and name of any)
97 W( formula that is evaluated.  This)96 W
6120 59067 MT
(can be useful for debugging.)SH
6120 63046 MT
(kr::*STORE-LAMBDAS*)SH
48063 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 65344 MT
(The variable kr::*STORE-LAMBDAS* \050default)207 W
9 SS 
28576 XM
(T)SH
11 SS 
(\051 may)
207 W( be set to)208 W
9 SS 
36916 XM
(NIL)SH
11 SS 
38899 XM
(to prevent the expression of a)208 W
6120 66540 MT
(formula from being stored in the formula itself.  This produces smaller run-time programs, but)
100 W( because)99 W
6120 67736 MT
(the expression is lost it may be impossible to dump a set of objects to a file using)SH
10 /Courier AF
42052 XM
(opal:write-gadget)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 143 42
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 9.2)
SH( The)
1800 W( Thermometer Example)SH
51386 XM
(Page 143)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(9. An Example)SH
11 /Times-Roman AF
8280 10524 MT
(This section develops a more comprehensive example than the ones so far, and)
61 W( highlights the operations)62 W
8280 11720 MT
(with which most users)
94 W( of the system should be familiar.  Note that this example does not use graphical)93 W
8280 12916 MT
(operations at all; refer to the Opal manual for examples of graphical applications.)SH
8280 15214 MT
(We will first construct a simple example of constraints and show how constraints work.)
124 W( The)
525 W( example)125 W
8280 16410 MT
(uses constraints to compute the equivalence between a temperature expressed in degrees Celsius)
101 W( and in)100 W
8280 17606 MT
(degrees Fahrenheit.  This first part also illustrates how KR deals with circular chains of constraints.)SH
8280 19904 MT
(The second part of the example shows simple)
155 W( object-oriented programming techniques, and illustrates)156 W
8280 21100 MT
(many of the dynamic capabilities of KR.  Note that this example)
68 W( is purely indicative of a certain way to)67 W
8280 22296 MT
(program in KR, and different programming styles would be possible even for such a simple task.)SH
14 /Times-Bold AF
8280 26114 MT
(9.1. The Degrees Schema)SH
11 /Times-Roman AF
8280 28324 MT
(First of all, we will create the)8 W
9 SS 
21532 XM
(DEGREES)SH
11 SS 
25865 XM
(schema as a demonstration of constraints in)
8 W( KR.  This is a schema)9 W
8280 29520 MT
(with two slots, namely,)112 W
10 /Courier AF
19240 XM
(:celsius)SH
11 /Times-Roman AF
24427 XM
(and)SH
10 /Courier AF
26402 XM
(:fahrenheit)SH
11 /Times-Roman AF
(. The)
499 W( schema can be)
112 W( created with the following)111 W
8280 30716 MT
(call to)SH
10 /Courier AF
11274 XM
(create-schema)SH
11 /Times-Roman AF
(:)SH
8 /Courier AF
10200 31881 MT
(\050create-schema 'DEGREES)SH
11160 32746 MT
(\050:fahrenheit \050o-formula \050+ \050* \050gvl :celsius\051 9/5\051 32\051)SH
22680 33611 MT
(32\051\051)SH
11160 34476 MT
(\050:celsius \050o-formula \050* \050- \050gvl :fahrenheit\051 32\051 5/9\051)SH
21240 35341 MT
(0\051\051\051)SH
/Times-Italic SF
10200 36206 MT
(;; and now:)SH
/Courier SF
10200 37071 MT
(\050gv DEGREES :celsius\051)
SH( ==>)
1440 W( 0)SH
10200 37936 MT
(\050gv DEGREES :fahrenheit\051 ==> 32)SH
11 /Times-Roman AF
8280 41099 MT
(Each of the two slots contains a formula.  The)
57 W( formula in the)58 W
10 /Courier AF
36029 XM
(:celsius)SH
11 /Times-Roman AF
41162 XM
(slot, for instance, indicates that)58 W
8280 42295 MT
(the value is computed from the value in the)103 W
10 /Courier AF
28544 XM
(:fahrenheit)SH
11 /Times-Roman AF
35522 XM
(slot, using the appropriate expression.  The)103 W
8280 43491 MT
(initial value, moreover,)
121 W( is 32.  The formula in the)122 W
10 /Courier AF
31463 XM
(:fahrenheit)SH
11 /Times-Roman AF
38460 XM
(slot, similarly, is constrained to be a)122 W
8280 44687 MT
(function of the value in the)SH
10 /Courier AF
20438 XM
(:celsius)SH
11 /Times-Roman AF
25513 XM
(slot and is initialized with the value 0.)SH
8280 46985 MT
(It is clear that this example involves a circular chain of constraints.  The value of)51 W
10 /Courier AF
44925 XM
(:celsius)SH
11 /Times-Roman AF
50051 XM
(depends on)50 W
8280 48181 MT
(the value of)1 W
10 /Courier AF
13750 XM
(:fahrenheit)SH
11 /Times-Roman AF
(, which)
1 W( itself depends on the value of)2 W
10 /Courier AF
37074 XM
(:celsius)SH
11 /Times-Roman AF
(. This)
279 W( circularity, however, is)2 W
8280 49377 MT
(not a problem for KR.  The system)
16 W( is able to detect such circularities and reacts appropriately by stopping)15 W
8280 50573 MT
(value propagation when necessary.)SH
8280 52871 MT
(Consider, for instance, setting the value of the)SH
10 /Courier AF
28808 XM
(:celsius)SH
11 /Times-Roman AF
33883 XM
(slot:)SH
8 /Courier AF
10200 54036 MT
(\050s-value DEGREES :celsius 20\051)SH
10200 54901 MT
(\050gv DEGREES :celsius\051)
SH( ==>)
5760 W( 20)SH
10200 55766 MT
(\050gv DEGREES :fahrenheit\051)
SH( ==>)
4320 W( 68)SH
11 /Times-Roman AF
8280 58064 MT
(As the example)
87 W( shows, KR propagates the change to the)88 W
10 /Courier AF
34175 XM
(:fahrenheit)SH
11 /Times-Roman AF
41138 XM
(slot, which is given the correct)88 W
8280 59260 MT
(value. Similarly,)
477 W( if we modify the value in the)101 W
10 /Courier AF
30126 XM
(:fahrenheit)SH
11 /Times-Roman AF
37101 XM
(slot, we have correct propagation in the)100 W
8280 60456 MT
(opposite direction:)SH
8 /Courier AF
10200 61621 MT
(\050s-value DEGREES :fahrenheit 212\051)SH
10200 62486 MT
(\050gv DEGREES :celsius\051)
SH( ==>)
5760 W( 100)SH
10200 63351 MT
(\050gv DEGREES :fahrenheit\051)
SH( ==>)
4320 W( 212)SH
14 /Times-Bold AF
8280 67169 MT
(9.2. The Thermometer Example)SH
11 /Times-Roman AF
8280 69379 MT
(Let us now build an example of a thermometer from which one can read the temperature in both degrees)48 W
8280 70575 MT
(Celsius and Fahrenheit,)
68 W( and show a more extensive application of constraints.  This example also shows)67 W
8280 71771 MT
(the role of inheritance in object-oriented programming, and a simple method combination.)SH
ES
%%Page: 144 43
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 144)
SH( KR)830 W
42177 XM
(An Example)
SH( Chapter)
1550 W( 9)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(We begin with)74 W
9 SS 
13093 XM
(TEMPERATURE-DEVICE)SH
11 SS 
(, a simple prototype which contains a formula to translate degrees)75 W
6120 9151 MT
(Celsius into Fahrenheit \050the formula is the same)
35 W( we used in the previous example\051 and a)34 W
10 /Courier AF
45711 XM
(:print)SH
11 /Times-Roman AF
49620 XM
(method)SH
6120 10347 MT
(which prints out both values:)SH
8 /Courier AF
8040 11512 MT
(\050create-schema 'TEMPERATURE-DEVICE)SH
9000 12377 MT
(\050:fahrenheit)SH
9960 13242 MT
(\050o-formula \050+ \050* \050gvl :celsius\051 9/5\051 32\051 32\051\051\051)SH
8040 15837 MT
(\050define-method :print TEMPERATURE-DEVICE \050schema\051)SH
9000 16702 MT
(\050format t "Current temperature: ~,1F C \050~,1F F\051~%")SH
12840 17567 MT
(\050gv schema :celsius\051)SH
12840 18432 MT
(\050gv schema :fahrenheit\051\051\051)SH
11 /Times-Roman AF
6120 20730 MT
(We now create two objects to hold the current temperature outdoors and indoors, and we create)
201 W( the)202 W
6120 21926 MT
(schema)SH
9 SS 
9693 XM
(THERMOMETER)SH
11 SS 
(, which will be the basic building block for other thermometers:)SH
8 /Courier AF
8040 23091 MT
(\050create-schema 'OUTSIDE)SH
9000 23956 MT
(\050:celsius 10\051\051)SH
8040 25686 MT
(\050create-schema 'INSIDE)SH
9000 26551 MT
(\050:celsius 21\051\051)SH
8040 28281 MT
(\050create-instance 'THERMOMETER TEMPERATURE-DEVICE)SH
9000 29146 MT
(\050:celsius \050o-formula \050gvl :location :celsius\051\051\051\051)SH
11 /Times-Roman AF
6120 30567 MT
(Note that)22 W
9 SS 
10502 XM
(THERMOMETER)SH
11 SS 
17649 XM
(can act as a prototype,)
22 W( since it provides a formula which constrains the value of)21 W
6120 31763 MT
(the)SH
10 /Courier AF
7935 XM
(:celsius)SH
11 /Times-Roman AF
13206 XM
(slot to follow the value of the)196 W
10 /Courier AF
27807 XM
(:celsius)SH
11 /Times-Roman AF
33078 XM
(slot of a particular)
196 W( location.  Thermometer)197 W
6120 32959 MT
(schemata created as instances)
125 W( of)124 W
9 SS 
21248 XM
(THERMOMETER)SH
11 SS 
28497 XM
(will then simply track the value of temperature at the)124 W
6120 34155 MT
(location with which they)
237 W( are associated.  Note that instances of)238 W
9 SS 
36715 XM
(THERMOMETER)SH
11 SS 
44078 XM
(inherit the)238 W
10 /Courier AF
49320 XM
(:print)SH
11 /Times-Roman AF
6120 35351 MT
(method from)SH
9 SS 
12108 XM
(TEMPERATURE-DEVICE)SH
11 SS 
(.)SH
8 /Courier AF
8040 36516 MT
(\050create-instance 'TH1 THERMOMETER)SH
16200 37381 MT
(\050:location outside\051\051)SH
8040 39111 MT
(\050create-instance 'TH2 THERMOMETER)SH
16200 39976 MT
(\050:location inside\051\051)SH
8040 41706 MT
(\050kr-send TH2 :print TH2\051)SH
/Times-Italic SF
8040 42571 MT
(;; prints out:)SH
/Courier SF
8040 43436 MT
(Current temperature: 21.0 C \05069.8 F\051)SH
8040 45166 MT
(\050kr-send TH1 :print TH1\051)SH
/Times-Italic SF
8040 46031 MT
(;; prints out:)SH
/Courier SF
8040 46896 MT
(Current temperature: 10.0 C \05050.0 F\051)SH
11 /Times-Roman AF
6120 48317 MT
(Since the temperature in the)69 W
9 SS 
19080 XM
(OUTSIDE)SH
11 SS 
23274 XM
(schema is 10, and thermometer)69 W
9 SS 
37608 XM
(TH1)SH
11 SS 
39601 XM
(is associated with)68 W
9 SS 
47840 XM
(OUTSIDE)SH
11 SS 
(, it)68 W
6120 49513 MT
(prints out the current temperature)
257 W( outside.  Changing the slot)258 W
10 /Courier AF
35733 XM
(:location)SH
11 /Times-Roman AF
41666 XM
(of)SH
9 SS 
43115 XM
(TH1)SH
11 SS 
45298 XM
(to)SH
9 SS 
46687 XM
(INSIDE)SH
11 SS 
50170 XM
(would)SH
6120 50709 MT
(automatically change)
117 W( the temperature reading, because of the dependency built into the formula in that)116 W
6120 51905 MT
(slot.)SH
6120 54203 MT
(We now want to specialize the)48 W
9 SS 
20152 XM
(THERMOMETER)SH
11 SS 
27325 XM
(in order to provide)
48 W( a new kind of thermometer that keeps)49 W
6120 55399 MT
(track of minimum and maximum temperature, as well)
35 W( as the current temperature.  We do this by creating)34 W
6120 56595 MT
(an instance,)76 W
9 SS 
11739 XM
(MIN-MAX-THERMOMETER)SH
11 SS 
(, which inherits all the features of)76 W
9 SS 
38600 XM
(THERMOMETER)SH
11 SS 
45802 XM
(and defines two)77 W
6120 57791 MT
(new formulas for computing minimum and maximum temperatures.  Note the initial)
277 W( values in the)276 W
6120 58987 MT
(formulas. Also,)
665 W( we create an instance of)195 W
9 SS 
25882 XM
(MIN-MAX-THERMOMETER)SH
11 SS 
37652 XM
(named)SH
9 SS 
41054 XM
(MIN-MAX)SH
11 SS 
(, and send it)
195 W( the)196 W
10 /Courier AF
6120 60183 MT
(:print)SH
11 /Times-Roman AF
9995 XM
(message.)SH
ES
%%Page: 145 44
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 9.2)
SH( The)
1800 W( Thermometer Example)SH
51386 XM
(Page 145)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050create-instance 'MIN-MAX-THERMOMETER THERMOMETER)SH
11160 8564 MT
(\050:min \050o-formula \050min \050gvl :min\051)SH
21720 9429 MT
(\050gvl :location :celsius\051\051)SH
19320 10294 MT
(100\051\051)SH
11160 11159 MT
(\050:max \050o-formula \050max \050gvl :max\051)SH
21720 12024 MT
(\050gvl :location :celsius\051\051)SH
19320 12889 MT
(-100\051\051\051)SH
10200 14619 MT
(\050create-instance 'MIN-MAX MIN-MAX-THERMOMETER)SH
11640 15484 MT
(\050:location outside\051\051)SH
10200 17214 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 18079 MT
(;; prints out:)SH
/Courier SF
10200 18944 MT
(Current temperature: 10.0 C \05050.0 F\051)SH
11 /Times-Roman AF
8280 20365 MT
(The)SH
10 /Courier AF
10279 XM
(:print)SH
11 /Times-Roman AF
14168 XM
(method inherited from)14 W
9 SS 
24383 XM
(TEMPERATURE-DEVICE)SH
11 SS 
34822 XM
(is not sufficient for our present purpose, since)14 W
8280 21561 MT
(it does not show minimum and maximum temperatures.)
53 W( We)
382 W( thus specialize the)54 W
10 /Courier AF
44230 XM
(:print)SH
11 /Times-Roman AF
48159 XM
(method, but we)54 W
8280 22757 MT
(still use the default)5 W
10 /Courier AF
16916 XM
(:print)SH
11 /Times-Roman AF
20796 XM
(method to print out the current values.  Let us specialize the method,)
5 W( print out)4 W
8280 23953 MT
(the current status, change the temperature outside a few times, and then print out the status again:)SH
8 /Courier AF
10200 25118 MT
(\050define-method :print MIN-MAX-THERMOMETER \050schema\051)SH
11160 25983 MT
(;; print out temperature, as before)SH
11160 26848 MT
(\050call-prototype-method schema\051)SH
11160 27713 MT
(;; print out minimum and maximum readings.)SH
11160 28578 MT
(\050format t "Minimum and maximum: ~,1F  ~,1F~%")SH
15000 29443 MT
(\050gv schema :min\051)SH
15000 30308 MT
(\050gv schema :max\051\051\051)SH
10200 32038 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 32903 MT
(;; prints out:)SH
/Courier SF
10200 33768 MT
(Current temperature: 10.0 C \05050.0 F\051)SH
10200 34633 MT
(Minimum and maximum: 10.0  10.0)SH
10200 36363 MT
(\050s-value OUTSIDE :celsius 14\051)SH
10200 37228 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 38093 MT
(;; prints out:)SH
/Courier SF
10200 38958 MT
(Current temperature: 14.0 C \05057.2 F\051)SH
10200 39823 MT
(Minimum and maximum: 10.0  14.0)SH
10200 41553 MT
(\050s-value OUTSIDE :celsius 12\051)SH
10200 42418 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 43283 MT
(;; prints out:)SH
/Courier SF
10200 44148 MT
(Current temperature: 12.0 C \05053.6 F\051)SH
10200 45013 MT
(Minimum and maximum: 10.0  14.0)SH
11 /Times-Roman AF
8280 46434 MT
(Note that the)63 W
10 /Courier AF
14426 XM
(:fahrenheit)SH
11 /Times-Roman AF
21364 XM
(slot in any of these schemata can be accessed normally,)
63 W( and the constraints)64 W
8280 47630 MT
(keep it up to date at all times:)SH
8 /Courier AF
10200 48843 MT
(\050gv MIN-MAX :fahrenheit\051  ==> 268/5)SH
/Times-Italic SF
27480 XM
(\05053.6\051)SH
11 /Times-Roman AF
8280 51141 MT
(Finally, we can add a)
106 W( method to reset the minimum and maximum temperature, in order to start a new)105 W
8280 52337 MT
(reading. This)
275 W( is shown in the next fragment of code:)SH
8 /Courier AF
10200 53502 MT
(\050define-method :reset MIN-MAX-THERMOMETER \050schema\051)SH
11160 54367 MT
(\050s-value schema :min \050gv schema :celsius\051\051)SH
11160 55232 MT
(\050s-value schema :max \050gv schema :celsius\051\051\051)SH
10200 56962 MT
(\050kr-send MIN-MAX :reset MIN-MAX\051)SH
/Times-Italic SF
26520 XM
(; reset min, max)SH
/Courier SF
10200 58692 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 59557 MT
(;; prints out:)SH
/Courier SF
10200 60422 MT
(Current temperature: 12.0 C \05053.6 F\051)SH
10200 61287 MT
(Minimum and maximum: 12.0  12.0)SH
10200 63017 MT
(\050s-value OUTSIDE :celsius 14\051)SH
10200 64747 MT
(\050kr-send MIN-MAX :print MIN-MAX\051)SH
/Times-Italic SF
10200 65612 MT
(;; prints out:)SH
/Courier SF
10200 66477 MT
(Current temperature: 14.0 C \05057.2 F\051)SH
10200 67342 MT
(Minimum and maximum: 12.0  14.0)SH
11 /Times-Roman AF
8280 69640 MT
(Other choices of programming style would have been possible, ranging from entirely object-oriented)
12 W( \050i.e.,)13 W
8280 70836 MT
(without using constraints at all\051 to entirely demon-based.)SH
ES
%%Page: 146 45
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 146)
SH( KR)830 W
42815 XM
(Summary Chapter)
1550 W( 10)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(10. Summary)SH
11 /Times-Roman AF
6120 10524 MT
(KR provides excellent performance)
365 W( and three powerful paradigms:  object-oriented programming,)364 W
6120 11720 MT
(knowledge representation, and constraint maintenance.  The system is)
26 W( designed for high performance and)27 W
6120 12916 MT
(has a very simple program interface, which makes it easy to learn and easy to use.)SH
6120 15214 MT
(The object-oriented programming component of KR is based on the prototype-instance paradigm,)
69 W( which)68 W
6120 16410 MT
(is more flexible than the class-instance paradigm.  Prototypes are simply objects)
12 W( from which other objects)13 W
6120 17606 MT
(\050called instances\051 may inherit values or methods.  This relationship is completely)
43 W( dynamic, and an object)42 W
6120 18802 MT
(can be made an instance of a different prototype as)
277 W( needed.  Object methods are implemented as)278 W
6120 19998 MT
(procedural attachments which are stored in an object's slots.  Methods are inherited)
143 W( through the usual)142 W
6120 21194 MT
(mechanism.)SH
6120 23492 MT
(The knowledge representation component of KR offers multiple)
128 W( inheritance and user-defined relations.)129 W
6120 24688 MT
(This component)
118 W( provides completely dynamic specification of a network's characteristics:  inheritance,)117 W
6120 25884 MT
(for example, is determined through user-specified relations,)
135 W( which the user may modify at run-time as)136 W
6120 27080 MT
(needed. The)
327 W( performance of this component is very good)
26 W( and compares favorably with that of basic Lisp)25 W
6120 28276 MT
(data structures.  Inheritance, in particular, is efficient enough to)
40 W( provide the basic building block across a)41 W
6120 29472 MT
(wide variety of application programs.)SH
6120 31770 MT
(The constraint maintenance component)
19 W( of KR provides integrated, efficient constraint maintenance and is)18 W
6120 32966 MT
(implemented through formulas, i.e, expressions which)
47 W( compute the value of a slot based on the values in)48 W
6120 34162 MT
(other slots.  Constraint maintenance uses lazy evaluation and)
447 W( value caching to yield excellent)446 W
6120 35358 MT
(performance in a completely transparent way.  Constraint maintenance is totally integrated)
SH( with the rest of)1 W
6120 36554 MT
(the system and can be used even without any knowledge of)
263 W( its internal details.  The same access)262 W
6120 37750 MT
(functions, in particular, work on both regular values and on values which are constrained by formulas.)SH
6120 40048 MT
(In spite of its power, KR is small and simple.  This makes it easy to maintain and extend)
55 W( as needed, and)56 W
6120 41244 MT
(also makes it ideally suited for experimentation on efficient knowledge)
151 W( representation.  The system is)150 W
6120 42440 MT
(entirely written in)
160 W( portable Common Lisp and can run efficiently on any machine which supports the)161 W
6120 43636 MT
(language. These)
555 W( features make KR an attractive foundation for a number of applications which use)
140 W( a)139 W
6120 44832 MT
(combination of frame-based knowledge representation,)
321 W( object-oriented programming, and constraint)322 W
6120 46028 MT
(maintenance.)SH
ES
%%Page: 147 46
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(References)SH
51386 XM
(Page 147)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(References)SH
11 /Times-Roman AF
8280 11279 MT
([Bobrow et al. 89])SH
16530 XM
(Bobrow, D.G.; DeMichiel, L.G.; Gabriel, R.P.; Keene, S.E., Kiczales, G.; and Moon,)SH
16530 12475 MT
(D.A.)SH
16530 13671 MT
(Common Lisp Object System Specification.)SH
/Times-Italic SF
16530 14867 MT
(LISP and Symbolic Computation)SH
/Times-Roman SF
31258 XM
(1\0503/4\051:245-394, January, 1989.)SH
8280 16818 MT
([Giuse 87])SH
16530 XM
(Dario Giuse.)SH
/Times-Italic SF
16530 18014 MT
(KR: an Efficient Knowledge Representation System)SH
/Times-Roman SF
(.)SH
16530 19210 MT
(Technical Report CMU-RI-TR-87-23, Carnegie Mellon University Robotics Institute,)SH
18180 20406 MT
(October, 1987.)SH
8280 22357 MT
([Giuse 88a])SH
16530 XM
(Dario Giuse.)SH
16530 23553 MT
(LISP as a rapid prototyping environment: the Chinese Tutor.)SH
/Times-Italic SF
16530 24749 MT
(LISP and Symbolic Computation)SH
/Times-Roman SF
31258 XM
(1\0502\051:165-184, September, 1988.)SH
8280 26700 MT
([Giuse 88b])SH
16530 XM
(Giuse, D.A.)SH
16530 27896 MT
(Intelligent Tutoring Systems for Foreign Language Acquisition.)SH
16530 29092 MT
(In)SH
/Times-Italic SF
17721 XM
(Proceedings of the Asia-Pacific Conference on Computer Education \050APCCE 88\051)SH
/Times-Roman SF
(,)SH
18180 30288 MT
(pages 33-58.  Chinese Computer Federation, Shanghai, China, 1988.)SH
8280 32239 MT
([Giuse 89])SH
16530 XM
(Dario Giuse.)SH
/Times-Italic SF
16530 33435 MT
(KR: Constraint-Based Knowledge Representation)SH
/Times-Roman SF
(.)SH
16530 34631 MT
(Technical Report CMU-CS-89-142, Carnegie Mellon University Computer Science)SH
18180 35827 MT
(Department, April, 1989.)SH
8280 37778 MT
([Giuse 90])SH
16530 XM
(Giuse, D.A.)SH
16530 38974 MT
(Efficient Knowledge Representation Systems.)SH
/Times-Italic SF
16530 40170 MT
(Knowledge Engineering Review)SH
/Times-Roman SF
30919 XM
(5\0501\051:35-50, 1990.)SH
8280 42121 MT
([Lieberman 86])SH
16530 XM
(Henry Lieberman.)SH
16530 43317 MT
(Using Prototypical Objects to Implement Shared Behavior in Object Oriented Systems.)SH
/Times-Italic SF
16530 44513 MT
(Sigplan Notices)SH
/Times-Roman SF
23742 XM
(21\05011\051:214-223, November, 1986.)SH
16530 45709 MT
(ACM Conference on Object-Oriented Programming; Systems Languages and)SH
18180 46905 MT
(Applications; OOPSLA'86.)SH
8280 48856 MT
([Steele 84])SH
16530 XM
(Guy L. Steele, Jr. \050editor\051.)SH
/Times-Italic SF
16530 50052 MT
(Common Lisp; The Language.)SH
/Times-Roman SF
16530 51248 MT
(Digital Press, 1984.)SH
8280 53199 MT
([Young 89])SH
16530 XM
(Sheryl R. Young, Alexander G. Hauptmann, Wayne H. Ward, Edward T. Smith, and)SH
16530 54395 MT
(Philip Werner.)SH
16530 55591 MT
(High-level Knowledge Sources in Usable Speech Recognition Systems.)SH
/Times-Italic SF
16530 56787 MT
(Communications of the ACM)SH
/Times-Roman SF
29608 XM
(32\0502\051:183-194, February, 1989.)SH
ES
%%Page: 148 47
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 148)
SH( KR)830 W
50643 XM
(Index)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(Index)SH
8 /Times-Roman AF
6120 11525 MT
(*pre-set-demon* 134)400 W
22818 XM
(Formula-p 115)400 W
37320 XM
(Name-for-schema 124)400 W
6120 12449 MT
(*print-as-structure* 141)400 W
22818 XM
(Gv in formulas)
SH( 115)400 W
37320 XM
(Name-prefix 138)400 W
6120 13373 MT
(*print-new-instances* 142)400 W
22818 XM
(Inheritance 108)400 W
37320 XM
(Name-prefix keyword)
SH( 138)400 W
6120 14297 MT
(*store-lambdas* 142)400 W
22818 XM
(Initial values)
SH( 114)400 W
37320 XM
(Named schemata)
SH( 105)400 W
6120 15221 MT
(*warning-on-circularity* 142)400 W
22818 XM
(Mark-as-changed 128)400 W
37320 XM
(Null \050type\051)
SH( 121)400 W
6120 16145 MT
(*warning-on-create-schema* 142)400 W
22818 XM
(O-formula 114)400 W
37320 XM
(Number \050type\051)
SH( 121)400 W
6120 17069 MT
(*warning-on-evaluation* 142)400 W
22818 XM
(Recompute-formula 128)400 W
6120 17993 MT
(*warning-on-null-link* 142)400 W
37320 XM
(O-formula 114)400 W
21720 18917 MT
(G-cached-value 128)400 W
37320 XM
(Object constraints)
SH( 108)400 W
6120 19841 MT
(Accelerators-type 121)400 W
21720 XM
(G-formula-value 132)400 W
37320 XM
(Object initialization)
SH( 108)400 W
6120 20765 MT
(Action propagation)
SH( 135)400 W
21720 XM
(G-local-value 137)400 W
37320 XM
(Object names)
SH( 123)400 W
6120 21689 MT
(Add-update-slot 135)400 W
21720 XM
(G-type 119)400 W
37320 XM
(Object-oriented programming)
SH( 108,)
400 W( 115)SH
6120 22613 MT
(Aggregate\050-or-nil\051 type)
SH( 121)400 W
21720 XM
(G-value 113)400 W
37320 XM
(Objects and inheritance)
SH( 108)400 W
6120 23537 MT
(Apply-prototype-method 116)400 W
21720 XM
(Get-declarations 126)400 W
37320 XM
(Override 137)400 W
21720 24461 MT
(Get-local-value 136)400 W
6120 25385 MT
(Bitmap\050-or-nil\051 type)
SH( 121)400 W
21720 XM
(Get-slot-declarations 126)400 W
37320 XM
(Paths in formulas)
SH( 115,)
400 W( 110)SH
6120 26309 MT
(Box-object 105)400 W
21720 XM
(Get-type-definition 120)400 W
37320 XM
(Pre-set demon)
SH( 134)400 W
21720 27233 MT
(Get-type-documentation 120)400 W
37320 XM
(Predicates 115)400 W
6120 28157 MT
(Cached values)
SH( 109,)
400 W( 114, 129)SH
21720 XM
(Get-value 136)400 W
37320 XM
(Print-as-structure 141)400 W
6120 29081 MT
(Call-on-one-slot 141)400 W
21720 XM
(Global-limit-values slot)
SH( 139)400 W
37320 XM
(Print-as-structure slot)
SH( 139)400 W
6120 30005 MT
(Call-on-ps-slots 141)400 W
21720 XM
(Gv 115)400 W
37320 XM
(Print-new-instances 142)400 W
6120 30929 MT
(Call-prototype-method 116)400 W
21720 XM
(Gv-local 137)400 W
37320 XM
(Print-schema-control 138)400 W
6120 31853 MT
(Change-formula 128)400 W
21720 XM
(Gvl 115)400 W
37320 XM
(Print-slots slot)
SH( 139)400 W
6120 32777 MT
(Check-slot-type 120)400 W
37320 XM
(Printing schemata)
SH( 112,)
400 W( 138)SH
6120 33701 MT
(Circular constraints)
SH( 110)400 W
21720 XM
(H-align type)
SH( 121)400 W
37320 XM
(Priority-level type)
SH( 121)400 W
6120 34625 MT
(Color\050-or-nil\051 type)
SH( 121)400 W
21720 XM
(Has-slot-p 127)400 W
37320 XM
(Procedural attachments)
SH( 134)400 W
6120 35549 MT
(Combining methods)
SH( 145)400 W
37320 XM
(Prototype/instance 108)400 W
6120 36473 MT
(Cons \050type\051)
SH( 121)400 W
21720 XM
(I-depend-on 131)400 W
37320 XM
(Prototypes 108,)
400 W( 111, 144)SH
6120 37397 MT
(Constant slots)
SH( 129)400 W
21720 XM
(Ignored-slots slot)
SH( 139)400 W
37320 XM
(Ps 112,)
400 W( 138)SH
6120 38321 MT
(Constraint maintenance)
SH( 109)400 W
21720 XM
(Inheritance 107)400 W
6120 39245 MT
(Controlling printing)
SH( 138)400 W
21720 XM
(Inheritance search)
SH( 126)400 W
37320 XM
(Reader macros)
SH( 117)400 W
6120 40169 MT
(Create-instance 108,)
400 W( 111)SH
21720 XM
(Inherited formulas)
SH( 108)400 W
37320 XM
(Recompute-formula 128)400 W
6120 41093 MT
(Create-prototype 123)400 W
21720 XM
(Initialize method)
SH( 108,)
400 W( 111)SH
37320 XM
(Rectangle-1 105)400 W
6120 42017 MT
(Create-relation 127)400 W
21720 XM
(Installing formulas)
SH( 113)400 W
37320 XM
(Rectangle-2 105)400 W
6120 42941 MT
(Create-schema 123)400 W
21720 XM
(Instance 108)400 W
37320 XM
(Relation 107)400 W
6120 43865 MT
(Creating objects)
SH( 111,)
400 W( 123)SH
21720 XM
(Integer \050type\051)
SH( 121)400 W
37320 XM
(Relation maintenance)
SH( 126)400 W
6120 44789 MT
(Creating schemata)
SH( 111,)
400 W( 123)SH
21720 XM
(Inter-window-type 121)400 W
37320 XM
(Relation-p 127)400 W
21720 45713 MT
(Invalidate demon)
SH( 134)400 W
37320 XM
(Relations 127)400 W
6120 46637 MT
(Declare syntax)
SH( 124)400 W
21720 XM
(Inverse relations)
SH( 126,)
400 W( 127)SH
6120 47561 MT
(Declare-constant 130)400 W
21720 XM
(Is-a relation)
SH( 107)400 W
37320 XM
(S-formula-value 132)400 W
6120 48485 MT
(Def-kr-type 118)400 W
21720 XM
(Is-a-p \050function\051)
SH( 112)400 W
37320 XM
(S-type 119)400 W
6120 49409 MT
(Default constraints)
SH( 108)400 W
21720 XM
(Is-a-p \050type predicate\051)
SH( 120)400 W
37320 XM
(S-value 113)400 W
6120 50333 MT
(Default formulas)
SH( 111)400 W
21720 XM
(Items-type 121)400 W
37320 XM
(Schema \050type\051)
SH( 121)400 W
6120 51257 MT
(Define-method 115)400 W
21720 XM
(Iterators 127)400 W
37320 XM
(Schema 105)400 W
6120 52181 MT
(Defining methods)
SH( 111)400 W
37320 XM
(Schema manipulation)
SH( 111)400 W
6120 53105 MT
(Degrees schema)
SH( 143)400 W
21720 XM
(Keyword \050type\051)
SH( 121)400 W
37320 XM
(Schema names)
SH( 105,)
400 W( 124)SH
6120 54029 MT
(Dependency paths)
SH( 110)400 W
21720 XM
(Known-as-type 121)400 W
37320 XM
(Schema-p 112)400 W
6120 54953 MT
(Destroy-constraint 129)400 W
21720 XM
(Kr-boolean \050type\051)
SH( 121)400 W
37320 XM
(Schemata and variables)
SH( 105)400 W
6120 55877 MT
(Destroy-schema 123)400 W
21720 XM
(Kr-path 131)400 W
37320 XM
(Sending messages)
SH( 108,)
400 W( 116)SH
6120 56801 MT
(Destroy-slot 124)400 W
21720 XM
(Kr-send 116)400 W
37320 XM
(Set-type-documentation 120)400 W
6120 57725 MT
(Direction\050-or-nil\051 type)
SH( 121)400 W
37320 XM
(Slot 105)400 W
6120 58649 MT
(Doslots 127)400 W
21720 XM
(Lazy evaluation)
SH( 109)400 W
37320 XM
(Slot iterator)
SH( 127)400 W
6120 59573 MT
(Draw-function type)
SH( 121)400 W
21720 XM
(Limit-values slot)
SH( 139)400 W
37320 XM
(Slot names)
SH( 105)400 W
21720 60497 MT
(Line-style\050-or-nil\051 type)
SH( 121)400 W
37320 XM
(Sorted-slots slot)
SH( 139)400 W
6120 61421 MT
(Eager evaluation)
SH( 109)400 W
21720 XM
(List \050type\051)
SH( 121)400 W
37320 XM
(Store-lambdas 142)400 W
6120 62345 MT
(Expressions in formulas)
SH( 114)400 W
37320 XM
(String \050type\051)
SH( 121)400 W
21720 63269 MT
(Mark-as-changed 128)400 W
6120 64193 MT
(Filename-type 121)400 W
21720 XM
(Maybe-constant 130)400 W
37320 XM
(T \050type\051)
SH( 121)400 W
6120 65117 MT
(Fill-style type)
SH( 121)400 W
21720 XM
(Messages 108)400 W
37320 XM
(Temperature-device schema)
SH( 143)400 W
6120 66041 MT
(Filling-style\050-or-nil\051 type)
SH( 121)400 W
21720 XM
(Meta-information 132)400 W
37320 XM
(Thermometer schema)
SH( 144)400 W
6120 66965 MT
(Font\050-...\051 type)
SH( 121)400 W
21720 XM
(Method combination)
SH( 108)400 W
37320 XM
(Tracing methods)
SH( 117)400 W
6120 67889 MT
(Formula-p 115)400 W
21720 XM
(Method-trace 117)400 W
37320 XM
(Type-checking 118)400 W
6120 68813 MT
(Formulas 109)400 W
21720 XM
(Methods 115,)
400 W( 116, 117)SH
7218 69737 MT
(Change-formula 128)400 W
21720 XM
(Move-formula 128)400 W
37320 XM
(Uniform declaration syntax)
SH( 124)400 W
7218 70661 MT
(Copy-Formula 128)400 W
21720 XM
(Multiple inheritance)
SH( 136)400 W
37320 XM
(Unnamed schemata)
SH( 105)400 W
7218 71585 MT
(Formula \050function\051)
SH( 114)400 W
21720 XM
(My-graphical-object 105)400 W
37320 XM
(Update-slots 135)400 W
ES
%%Page: 149 48
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Index)SH
51386 XM
(Page 149)SH
46800 50 8280 4486 UL
8 SS 
8280 7749 MT
(V-align type)
SH( 121)400 W
8280 8673 MT
(Value 105)400 W
8280 9597 MT
(Value dependency)
SH( 115)400 W
8280 10521 MT
(Value propagation)
SH( 109,)
400 W( 128)SH
8280 11445 MT
(Values as links)
SH( 107)400 W
8280 13293 MT
(Warning, create-schema)
SH( 142)400 W
8280 14217 MT
(Warning-on-circularity 142)400 W
8280 15141 MT
(Warning-on-null-link 142)400 W
8280 16065 MT
(Window\050or-nil\051 type)
SH( 121)400 W
8280 16989 MT
(With-constants-disabled 131)400 W
8280 17913 MT
(With-demon-disabled 136)400 W
8280 18837 MT
(With-demon-enabled 136)400 W
8280 19761 MT
(With-demons-disabled 135)400 W
8280 20685 MT
(With-dependencies-disabled 129)400 W
8280 21609 MT
(With-types-disabled 120)400 W
ES
%%Page: 150 49
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 150)
SH( KR)830 W
50643 XM
(Index)SH
46800 50 6120 4486 UL
ES
%%Page: i 50
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(KR)SH
47914 XM
(Table of Contents)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 9796 MT
(1. Introduction)SH
53280 XM
(103)SH
8280 11320 MT
(2. Structure of the System)SH
53280 XM
(104)SH
8280 12844 MT
(3. Basic Concepts)SH
53280 XM
(105)SH
10 SS 
9780 14234 MT
(3.1. Main Concepts: Schema, Slot, Value)SH
53580 XM
(105)SH
9780 15314 MT
(3.2. Inheritance)SH
53580 XM
(107)SH
12 SS 
8280 16838 MT
(4. Object-Oriented Programming)SH
53280 XM
(108)SH
10 SS 
9780 18228 MT
(4.1. Objects)SH
53580 XM
(108)SH
9780 19308 MT
(4.2. Prototypes vs. Classes)SH
53580 XM
(108)SH
9780 20388 MT
(4.3. Inheritance of Formulas)SH
53580 XM
(108)SH
12 SS 
8280 21912 MT
(5. Constraint Maintenance)SH
53280 XM
(109)SH
10 SS 
9780 23302 MT
(5.1. Value Propagation)SH
53580 XM
(109)SH
9780 24382 MT
(5.2. Formulas)SH
53580 XM
(109)SH
11780 25462 MT
(5.2.1. Circular Dependencies)SH
53580 XM
(110)SH
11780 26542 MT
(5.2.2. Dependency Paths)SH
53580 XM
(110)SH
12 SS 
8280 28066 MT
(6. Functional Interface: Common Functions)SH
53280 XM
(111)SH
10 SS 
9780 29456 MT
(6.1. Schema Manipulation)SH
53580 XM
(111)SH
9780 30536 MT
(6.2. Slot and Value Manipulation Functions)SH
53580 XM
(112)SH
11780 31616 MT
(6.2.1. Getting Values with G-Value and GV)SH
53580 XM
(113)SH
11780 32696 MT
(6.2.2. Setting Values with S-Value)SH
53580 XM
(113)SH
11780 33776 MT
(6.2.3. Formula and O-Formula)SH
53580 XM
(114)SH
11780 34856 MT
(6.2.4. GV and GVL in Formulas)SH
53580 XM
(115)SH
9780 35936 MT
(6.3. Object-Oriented Programming)SH
53580 XM
(115)SH
9780 37016 MT
(6.4. Reader Macros)SH
53580 XM
(117)SH
12 SS 
8280 38540 MT
(7. The Type-Checking System)SH
53280 XM
(118)SH
10 SS 
9780 39930 MT
(7.1. Creating Types)SH
53580 XM
(118)SH
9780 41010 MT
(7.2. Declaring the Type of a Slot)SH
53580 XM
(119)SH
9780 42090 MT
(7.3. Type Documentation Strings)SH
53580 XM
(120)SH
9780 43170 MT
(7.4. Retrieving the Predicate Expression)SH
53580 XM
(120)SH
9780 44250 MT
(7.5. Explicit Type-Checking)SH
53580 XM
(120)SH
9780 45330 MT
(7.6. Temporarily Disabling Types)SH
53580 XM
(120)SH
9780 46410 MT
(7.7. System-Defined Types)SH
53580 XM
(120)SH
12 SS 
8280 47934 MT
(8. Functional Interface: Additional Topics)SH
53280 XM
(123)SH
10 SS 
9780 49324 MT
(8.1. Schema Manipulation)SH
53580 XM
(123)SH
9780 50404 MT
(8.2. Uniform Declaration Syntax)SH
53580 XM
(124)SH
11780 51484 MT
(8.2.1. Declarations in Instances)SH
53580 XM
(125)SH
11780 52564 MT
(8.2.2. Examining Slot Declarations)SH
53580 XM
(126)SH
9780 53644 MT
(8.3. Relations and Slots)SH
53580 XM
(126)SH
9780 54724 MT
(8.4. Constraint Maintenance)SH
53580 XM
(128)SH
9780 55804 MT
(8.5. Constant Formulas)SH
53580 XM
(129)SH
9780 56884 MT
(8.6. Efficient Path Definitions)SH
53580 XM
(131)SH
9780 57964 MT
(8.7. Tracking Formula Dependencies)SH
53580 XM
(132)SH
9780 59044 MT
(8.8. Formula Meta-Information)SH
53580 XM
(132)SH
11780 60124 MT
(8.8.1. Creating Meta-Information)SH
53580 XM
(132)SH
11780 61204 MT
(8.8.2. Accessing Meta-Information)SH
53580 XM
(133)SH
9780 62284 MT
(8.9. Demons)SH
53580 XM
(134)SH
11780 63364 MT
(8.9.1. Overview of the Demon Mechanism)SH
53580 XM
(134)SH
11780 64444 MT
(8.9.2. The :Update-Slots List)SH
53580 XM
(135)SH
11780 65524 MT
(8.9.3. Examples of Demons)SH
53580 XM
(135)SH
11780 66604 MT
(8.9.4. Enabling and Disabling Demons)SH
53580 XM
(135)SH
9780 67684 MT
(8.10. Multiple Inheritance)SH
53580 XM
(136)SH
ES
%%Page: ii 51
BS
0 SI
10 /Times-Bold AF
7620 7870 MT
(8.11. Local Values)SH
51420 XM
(136)SH
7620 8950 MT
(8.12. Local-only Slots)SH
51420 XM
(137)SH
7620 10030 MT
(8.13. Schema Creation Options)SH
51420 XM
(137)SH
7620 11110 MT
(8.14. Print Control)SH
51420 XM
(138)SH
9620 12190 MT
(8.14.1. Print Control Slots)SH
51420 XM
(139)SH
9620 13270 MT
(8.14.2. Slot Printing Functions)SH
51420 XM
(141)SH
7620 14350 MT
(8.15. Control Variables)SH
51420 XM
(141)SH
12 SS 
6120 15874 MT
(9. An Example)SH
51120 XM
(143)SH
10 SS 
7620 17264 MT
(9.1. The Degrees Schema)SH
51420 XM
(143)SH
7620 18344 MT
(9.2. The Thermometer Example)SH
51420 XM
(143)SH
12 SS 
6120 19868 MT
(10. Summary)SH
51120 XM
(146)SH
6120 21392 MT
(References)SH
51120 XM
(147)SH
6120 22916 MT
(Index)SH
51120 XM
(148)SH
ES
%%Trailer
%%Pages: 51
%%DocumentFonts: Times-Roman Times-Bold Symbol Times-Italic Courier
